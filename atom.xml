<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>点滴记忆</title>
  
  <subtitle>你知道的越多，你不知道的越多</subtitle>
  <link href="https://blog.quickso.cn/atom.xml" rel="self"/>
  
  <link href="https://blog.quickso.cn/"/>
  <updated>2025-07-26T13:18:21.473Z</updated>
  <id>https://blog.quickso.cn/</id>
  
  <author>
    <name>木子欢儿</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>斐讯N1盒子刷Armbian系统并安装桌面</title>
    <link href="https://blog.quickso.cn/2025/07/26/%E6%96%90%E8%AE%AFN1%E7%9B%92%E5%AD%90%E5%88%B7Armbian%E7%B3%BB%E7%BB%9F%E5%B9%B6%E5%AE%89%E8%A3%85%E6%A1%8C%E9%9D%A2/"/>
    <id>https://blog.quickso.cn/2025/07/26/%E6%96%90%E8%AE%AFN1%E7%9B%92%E5%AD%90%E5%88%B7Armbian%E7%B3%BB%E7%BB%9F%E5%B9%B6%E5%AE%89%E8%A3%85%E6%A1%8C%E9%9D%A2/</id>
    <published>2025-07-26T13:11:18.000Z</published>
    <updated>2025-07-26T13:18:21.473Z</updated>
    
    <content type="html"><![CDATA[<p>PHICOMM N1 盒子已经上市很多年了，虽然是一个矿渣产品，但是其优异的硬件配置，丰富的固件适配，目前还被广泛使用。在此首先对 webpad 等几位大佬致敬，由于他们的分享，使得很多人可以很方便的在 N1 盒子上实现自己所需的功能。</p><p><strong>一、斐讯 N1 的硬件参数</strong></p><p>产品类型：家庭网络存储，云存储</p><p>处理器：Amlogic S905D Cortex-A53，Mali-450 GPU</p><p>内存：RAM 2GB, ROM 8GB</p><p>接口：USB 2.0 * 2、HDMI * 1、RJ45 * 1（千兆网口）</p><p>无线连接：支持2.4G&#x2F;5G WiFi，蓝牙BT 4.1 BLE低功耗</p><p>视频输出分辨率：最高支持到 4K 60 帧硬件解码</p><p>电源接口：12V&#x2F;2A</p><p>尺寸与重量：产品尺寸为110mm x 110mm x 40mm，产品重量约为0.248kg</p><p><strong>二、刷机准备</strong></p><p>1、所需硬件</p><p>　　N1 盒子一个、8G 以上 U 盘一个、USB 接口键盘一个、USB 鼠标一块、HDMI 晶晨短接神器（作用为线刷时短接，很便宜，海鲜市场有卖，如果没有可以拆机手动短接）、HDMI 接口显示器 &#x2F; HDMI 接口电视一台、网线一根、HDMI 线一根、路由器、电脑。</p><p>2、所需软件</p><p>　　为方便使用，我已经将所需要的软件整理好，放到了谷歌云盘，大家可以下载后使用。</p><p><a href="https://drive.google.com/drive/u/1/folders/1QUhpnzm1CvFHkUh1904EN7QFaJBag8Vb">https://drive.google.com/drive/u/1/folders/1QUhpnzm1CvFHkUh1904EN7QFaJBag8Vb</a></p><p>Bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">1. 解压使用-斐讯T1、N1官方系统降级工具.zip                              <span class="hljs-comment">#斐讯 T1、N1 官方系统降级工具</span><br>2. 解压使用-N1U盘启动.zip                                              <span class="hljs-comment">#N1 U 盘启动</span><br>3. USB_Burning_Tools_v2.0.7.2_build2.exe                              <span class="hljs-comment">#晶晨线刷工具含驱动</span><br>4. win32diskimager-1.0.0-install.exe                                  <span class="hljs-comment">#写盘工具</span><br>5. N1_mod_by_webpad_v2.2_20180920.img.7z                              <span class="hljs-comment">#Android 7.0.1 版本固件, root, 可引导进入 Armbian</span><br>6. Reboot to LibreELEC_1.1_Apkpure.apk                                <span class="hljs-comment">#重启进入 Armbian 软件</span><br>7.Armbian_24.5.0_amlogic_s905d_jammy_6.6.28_server_2024.04.25.img.gz  <span class="hljs-comment">#Armbian_24.5.0 版本固件,kernel BPF 模块已打开,可使用 dae</span><br></code></pre></td></tr></table></figure><p>　　谷歌云盘里提供的 Armbian 固件 kernel BPF 模块默认已打开, 经我测试可使用 dae ，来自于 ophub 的 GitHub 项目，如果你更习惯于使用 Debian 固件，请使用如下链接自行下载。</p><p><a href="https://github.com/ophub/amlogic-s9xxx-armbian/releases/">https://github.com/ophub/amlogic-s9xxx-armbian/releases/</a></p><p>　　Armbian 是基于 Debian 和 Ubuntu 的 Linux 发行版，专门为 ARM 开发板设计。Armbian 的版本命名通常遵循其基于的 Debian 或 Ubuntu 发行版。Armbian 的这四个版本（Noble、Jammy、Bullseye 和 Bookworm）分别基于不同的 Debian 或 Ubuntu 版本：</p><ul><li>Armbian Noble - 这是基于 Ubuntu 22.04 LTS (代号 “Jammy Jellyfish”) 的版本。Ubuntu 22.04 是一个长期支持版本，提供了五年的安全更新和支持。Armbian 对这个版本进行了针对 ARM 设备的优化和定制。</li><li>Armbian Jammy - 也是基于 Ubuntu 22.04 LTS 的版本。这个版本名可能与 Noble 重复或是对同一基础版本的另一种命名方式。</li><li>Armbian Bullseye - 这是基于 Debian 11 (代号 “Bullseye”) 的版本。Debian 11 提供了多种软件的最新稳定版，并享有 Debian 社区的广泛支持和安全维护。Debian 版本的 Armbian 通常更倾向于稳定性和兼容性。</li><li>Armbian Bookworm - 基于 Debian 12 (代号 “Bookworm”)。这是 Debian 的测试版本，在正式成为稳定版前，它会包含最新的软件更新。使用这个版本的 Armbian 可能提供一些最前沿的特性，但也可能不如稳定版那么稳定。</li></ul><p><strong>三、降级关键分区</strong></p><p>　　玩 N1 的朋友都知道第一步要对 N1 进行降级，但是却很少有人说明为什么要进行降级，降级针对盒子做了什么事情，这里我参考“if年少有为”在自己博文中的描述，希望大家能明白其中原理。</p><p>　　连接 HDMI、网线、电源后会进入斐讯自带的安卓系统，安卓系统的标准启动过程如下：</p><ul><li>bootloader：斐讯针对该盒子硬件实现的类似 BIOS 的东西，它负责硬件的初始化，最终引导操作系统。</li><li>boot 分区：放着安卓操作系统的内核文件，由 bootloader 唤起，也就实现了进入操作系统的效果。</li><li>recovery 分区：类似于 WinPE 的东西，如果 boot 分区挂了，则可以通过 Recovery 方式进入一个临时的操作系统，然后恢复 boot 分区（类似于 ghost 做系统）。</li></ul><p>　　问题就在于，bootloader 是斐讯针对盒子定制的，它设置了一些限制，比如：</p><ul><li>只能使用他家的安卓系统</li><li>不支持U盘引导操作系统</li></ul><p>　　所以呢，恩山论坛的 webpad 大佬，修改了斐讯的 bootloader，我们要做的就是把 webpad 大佬修改后的 bootloader 覆盖到盒子里面去，这个过程被称之为 N1 降级，一台 N1 这辈子只需要做一次降级操作，后续不需要再研究这个问题了。当然如果你的盒子到手时就已经被刷成了 TV 等其他系统，这一步骤就可以跳过了。</p><p>1、将 N1 接上网线，HDMI 线接显示器，离 HDMI 口远的那个 USB 口接一个鼠标。连上网以后，等个五分钟左右，待其自动升级到最新版，中间可能会多次重启升级，直到不再升级为准。否则如果正在刷的过程中 N1 重启可能会有点麻烦。记录一下屏幕上显示的 IP ，下一步会用到。接下来用鼠标点击屏幕上版本号的地方 4 次，屏幕中间会显示一下“开启adb”。</p><p><img src="https://www.hicairo.com/zb_users/upload/2024/05/202405031714739962370407.webp" alt="1.N1 在 nas 主界面点击四次固件版本打开 adb.webp"></p><p>2、下载“1.解压使用-斐讯T1、N1官方系统降级工具.zip”文件并解压，运行 onekey 目录中的 run.bat 批处理文件，按照提示输入 2 选择 N1 降级。</p><p><img src="https://www.hicairo.com/zb_users/upload/2024/05/202405031714739978448687.webp" alt="2.N1 降级_1.webp"></p><p>按照提示输入 N1 的 IP 地址。</p><p><img src="https://www.hicairo.com/zb_users/upload/2024/05/202405031714739993276301.webp" alt="2.N1 降级_2.webp"></p><p>按照提示按任意键开始降级。</p><p><img src="https://www.hicairo.com/zb_users/upload/2024/05/202405031714740007378510.webp" alt="2.N1 降级_3.webp"></p><p><strong>四、制作 Armbian U 盘</strong></p><p>1、在电脑上下载并安装“4.win32diskimager-1.0.0-install.exe”写盘工具软件，同时下载并解压镜像文件“7.Armbian_24.5.0_amlogic_s905d_jammy_6.6.28_server_2024.04.25.img.gz”备用。</p><p>2、运行 win32diskimager 软件，如下图所示，选择上一步解压好的镜像文件，插入 U 盘后将镜像文件写入 U 盘。</p><p><img src="https://www.hicairo.com/zb_users/upload/2024/05/202405031714740022198752.webp" alt="3.给U盘写入armbian镜像.webp"></p><p>　　有关网上流传的 armbian 5.77 版本的最稳定，meson-gxl-s905d-phicomm-n1-xiangsm.dtb 可以解决系统过高等问题，经过我的实际测试，目前 ophub 编译的镜像已经解决了上述问题，大家可以放心使用。</p><p><strong>五、在 Android 系统里引导从 U 盘启动</strong></p><p>1、下载“2.解压使用-N1U盘启动.zip”并解压，将显示器和键盘接入 N1 盒子，执行“N1-ADBU盘启动（傻瓜包）”文件夹下的“U盘启动.bat”，输入 N1 盒子的 IP 地址，地址可以从路由器管理界面看到。</p><p><img src="https://www.hicairo.com/zb_users/upload/2024/05/202405031714740042717577.webp" alt="4.N1盒子U盘启动.webp"></p><p>2、N1 的两个 USB 口，离 HDMI口 远的接 USB 键盘，另一个接 U 盘。HDMI 线接显示器，加电冷启动。屏幕会先出现启动画面，之后会进入 U 盘的 armbian 系统。这里如果多次重复，还是只能进入 Android 的 recovery 模式，那么请换个 U 盘试试，基本这里不成功都是因为 U 盘兼容性问题导致的，建议最好使用 USB 2.0 的 U 盘。</p><p><img src="https://www.hicairo.com/zb_users/upload/2024/05/202405031714740057197921.webp" alt="5.armbian启动界面.webp"></p><p>3、进入 armbian 以后用 root:1234 登录，会被要求修改密码和创建普通用户，不想创建用户可以 Ctrl+C 跳过，完成以后会留在一个 shell 里面。</p><p><img src="https://www.hicairo.com/zb_users/upload/2024/05/202405031714740074835356.webp" alt="6.armbian初始化设置.webp"></p><p><strong>六、将 U 盘中的 Armbian 系统写入 N1 盒子的 EMMC</strong></p><p>　　接上一步，使用 root 用户及密码登录 armbian 后，在 bash 下执行 <strong>armbian-install</strong> 命令。按照提示输入“101”，选择文件系统输入“1”（选择ext4），这时开始将 U 盘中的 armbian 系统 copy 到 emmc ，整个过程大概需要 2~3 分钟，等待文件 copy 完后，按照提示输入 <strong>poweroff</strong> 命令关机，然后移除盒子上的 U 盘，给盒子重新加电后会使用 emmc 进入 armbian 系统，到此刷机工作就完成了。</p><p>　　注意：在将 armbian 写入 emmc 成功后，引导的先后顺序为先从 U 盘引导进入系统，没有插 U 盘时才使用 emmc 引导进入系统，所有如果你要使用 emmc 中的系统，请务必拔掉 U 盘。</p><p>Bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@armbian:~# armbian-install<br>[ STEPS ] Installing Armbian to internal eMMC...<br>[ STEPS ] Checking dependencies...<br>[ INFO ] Dependency check completed. Proceeding installation...<br>[ STEPS ] Initializing the environment...<br>[ INFO ] Use mainline u-boot: [ no ]<br>[ INFO ] Use ampart tool: [ <span class="hljs-built_in">yes</span> ]<br>[ INFO ] Show all devices: [ no ]<br>[ INFO ] Internal eMMC : [ /dev/mmcblk2 ]<br>[ STEPS ] Start selecting device...<br>--------------------------------------------------------------------------------------<br>ID    SOC        MODEL                               DTB<br>--------------------------------------------------------------------------------------<br>101   s905d      Phicomm-N1                          meson-gxl-s905d-phicomm-n1.dtb<br>102   s905d      Phicomm-N1(DMA-thresh)              meson-gxl-s905d-phicomm-n1-thresh.dtb<br>103   s905d      MECOOL-KI-Pro                       meson-gxl-s905d-mecool-ki-pro.dtb<br>104   s905d      SML-5442TW                          meson-gxl-s905d-sml5442tw.dtb<br>105   s905x      HG680P                              meson-gxl-s905x-p212.dtb<br>106   s905x      B860H                               meson-gxl-s905x-b860h.dtb<br>107   s905x      Nexbox-a95x                         meson-gxl-s905x-nexbox-a95x.dtb<br>108   s905x      TX9                                 meson-gxl-s905x-tx9.dtb<br>109   s905x      T95,XiaoMI-3S,X96                   meson-gxl-s905x-p212.dtb<br>110   s905x      TBee                                meson-gxl-s905x-tbee.dtb<br>--------------------------------------------------------------------------------------<br>111   s905w      TX3-Mini                            meson-gxl-s905w-tx3-mini.dtb<br>112   s905w      W95                                 meson-gxl-s905w-p281.dtb<br>113   s905w      X96-Mini                            meson-gxl-s905w-x96-mini.dtb<br>114   s905w      X96W,FunTV,MXQ-Pro-4K               meson-gxl-s905w-x96w.dtb<br>115   s905l      UNT402A,M201-S,MiBox-4C             meson-gxl-s905l3b-m302a.dtb<br>116   s905l      MG101,Mibox-4                       meson-gxl-s905l-venz-v10.dtb<br>117   s905l2     MGV2000,MGV3000,M301A,CM201-1       meson-gxl-s905l2-x7-5g.dtb<br>118   s905l2     E900v21E,MGV2000-K,e900v21d         meson-gxl-s905l2-x7-5g.dtb<br>119   s905l2     Wojia-TV-IPBS9505                   meson-gxl-s905l2-ipbs9505.dtb<br>120   s905l3     CM311-1,HG680-LC,M401A,UNT402A      meson-gxl-s905l2-x7-5g.dtb<br>--------------------------------------------------------------------------------------<br>121   s905l3     CM211-1,M411A,B860AV3.2-M           meson-gxl-s905l3b-m302a.dtb<br>122   s905l3     UNT400G1,E900V22D-2                 meson-gxl-s905l2-x7-5g.dtb<br>123   s905l3b    E900V22D,TY1608                     meson-gxl-s905l2-x7-5g.dtb<br>124   s905l3b    E900V21E,E900V22E,MGV2000           meson-gxl-s905l3b-e900v22e.dtb<br>125   s905l3b    M302A,M304A,CM201-1,CM211-1,CM311-1 meson-gxl-s905l3b-m302a.dtb<br>126   s905l3b    UNT403A                             meson-gxl-s905l3b-m302a.dtb<br>127   s905l3b    RG020ET-CA                          meson-gxl-s905l3b-e900v22e.dtb<br>128   s905l3b    IP103H,TY1608,BV310,B860AV-2.1M     meson-gxl-s905l3b-m302a.dtb<br>129   s905lb     BesTV-R3300L,SumaVision-Q7,MG101    meson-gxl-s905x-p212.dtb<br>130   s905lb     Q96-mini                            meson-gxl-s905x-p212.dtb<br>--------------------------------------------------------------------------------------<br>131   s905mb     S65                                 meson-gxl-s905x-p212.dtb<br>0     Other      Customize                           Enter-custom-dtb-name<br>--------------------------------------------------------------------------------------<br>[ OPTIONS ] Please Input ID: 101<br>[ INFO ] Input Box ID: [ 101 ]<br>[ INFO ] Model Name: [ Phicomm-N1 ]<br>[ INFO ] FDTFILE: [ meson-gxl-s905d-phicomm-n1.dtb ]<br>[ INFO ] MAINLINE_UBOOT: [  ]<br>[ INFO ] BOOTLOADER_IMG:  [ u-boot-2015-phicomm-n1.bin ]<br>[ INFO ] UBOOT_OVERLOAD: [ u-boot-n1.bin ]<br>[ INFO ] NEED_OVERLOAD: [ no ]<br>[ STEPS ] Which <span class="hljs-built_in">type</span> of filesystem <span class="hljs-keyword">do</span> you want <span class="hljs-keyword">for</span> your root?<br>-----------------------------------------------<br>  ID   TYPE<br>-----------------------------------------------<br>  1    ext4<br>  2    btrfs<br>-----------------------------------------------<br>[ OPTIONS ] Please Input ID (1/2): 1<br>[ INFO ] Input Type ID: [ 1 ]<br>[ INFO ] Type of filesystem: [ ext4 ]<br>[ STEPS ] Partitioning eMMC...<br>[ INFO ] Start backing up the default bootloader.<br>4+0 records <span class="hljs-keyword">in</span><br>4+0 records out<br>4194304 bytes (4.2 MB, 4.0 MiB) copied, 2.19803 s, 1.9 MB/s<br>[ INFO ] Delete the existing [ 2 ] partitions.<br>[ INFO ] Start create MBR and partittion.<br>[ INFO ] 02. Write Android bootloader: [ u-boot-2015-phicomm-n1.bin ]<br>444+0 records <span class="hljs-keyword">in</span><br>444+0 records out<br>444 bytes copied, 0.00781175 s, 56.8 kB/s<br>8191+0 records <span class="hljs-keyword">in</span><br>8191+0 records out<br>4193792 bytes (4.2 MB, 4.0 MiB) copied, 0.450597 s, 9.3 MB/s<br>[ STEPS ] Processing BOOTFS partition...<br>[ INFO ] Formatting BOOTFS partition...<br>mkfs.fat 4.2 (2021-01-31)<br>[ INFO ] Copying BOOTFS ...<br>[ INFO ] Update the [ uEnv.txt ] file.<br>[ STEPS ] Start processing the rootfs partition...<br>[ INFO ] Formatting ROOTFS ...<br>/dev/mmcblk2p2 contains a btrfs file system labelled <span class="hljs-string">&#x27;ROOTFS_EMMC&#x27;</span><br>[ INFO ] Copying ROOTFS ...<br>[ INFO ] Copying [ etc ] ...<br>[ INFO ] Copying [ home ] ...<br>[ INFO ] Copying [ opt ] ...<br>[ INFO ] Copying [ root ] ...<br>[ INFO ] Copying [ selinux ] ...<br>[ INFO ] Copying [ srv ] ...<br>[ INFO ] Copying [ usr ] ...<br>[ INFO ] Copying [ var ] ...<br>[ INFO ] Generate the new fstab file.<br>[ INFO ] Update the relevant parameters.<br>[ SUCCESS ] Installation successful. Run [ poweroff ], remove the installation media <span class="hljs-keyword">then</span> re-insert the power supply to boot new system.<br></code></pre></td></tr></table></figure><p><strong>七、Armbian 的简单设置</strong></p><p>1、将 armbian 的更新源修改为清华源</p><p>　　Armbian 操作系统默认使用的官方更新源（ports.ubuntu.com）服务器在海外，连接速度和国内镜像源比起来较慢，建议修改为清华大学提供的镜像源。</p><p>Bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> /etc/apt/sources.list /etc/apt/sources.list.bak<br><br><span class="hljs-built_in">cat</span> &gt; /etc/apt/sources.list &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ jammy main restricted universe multiverse</span><br><span class="hljs-string">#deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ jammy main restricted universe multiverse</span><br><span class="hljs-string">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ jammy-security main restricted universe multiverse</span><br><span class="hljs-string">#deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ jammy-security main restricted universe multiverse</span><br><span class="hljs-string">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ jammy-updates main restricted universe multiverse</span><br><span class="hljs-string">#deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ jammy-updates main restricted universe multiverse</span><br><span class="hljs-string">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ jammy-backports main restricted universe multiverse</span><br><span class="hljs-string">#deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ jammy-backports main restricted universe multiverse</span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-built_in">mv</span> /etc/apt/sources.list.d/armbian.list /etc/apt/sources.list.d/armbian.list.bak<br><br><span class="hljs-built_in">cat</span> &gt; /etc/apt/sources.list.d/armbian.list &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">deb [signed-by=/usr/share/keyrings/armbian.gpg] https://mirrors.tuna.tsinghua.edu.cn/armbian jammy main jammy-utils jammy-desktop</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p>　　更新本机已安装的软件包</p><p>Bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt update<br>apt upgrade -y<br></code></pre></td></tr></table></figure><p>2、修改时区</p><p>Bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 系统时间和时区</span><br><span class="hljs-built_in">date</span> -R<br><br><span class="hljs-comment"># 修改时区，使用 tzselect 命令，然后选择 asia china beijing yes。</span><br>tzselect<br><span class="hljs-built_in">cp</span> /usr/share/zoneinfo/Asia/Shanghai /etc/localtime<br><br><span class="hljs-comment"># 再次查询系统时间和时区</span><br><span class="hljs-built_in">date</span> -R<br></code></pre></td></tr></table></figure><p>3、为 N1 分配静态 IP 地址</p><p>　　参考以下示例，为 N1 分配同网段的静态 IP 地址，hwaddress 参数用于固定 Mac 地址，Mac 地址可以在盒子背后的标签上找到，或者使用 ifconfig 命令查询。修改完成后使用 reboot 命令重启盒子，然后使用新的 IP 地址连接盒子。</p><p>Bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 关闭 NetworkManager 服务</span><br>systemctl stop NetworkManager<br>systemctl <span class="hljs-built_in">disable</span> NetworkManager<br><br><span class="hljs-comment"># 备份原始配置，分配静态 IP</span><br><span class="hljs-built_in">mv</span> /etc/network/interfaces /etc/network/interfaces.bak<br><span class="hljs-built_in">cat</span> &gt; /etc/network/interfaces &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">source /etc/network/interfaces.d/*</span><br><span class="hljs-string">auto lo</span><br><span class="hljs-string">iface lo inet loopback</span><br><span class="hljs-string">auto eth0</span><br><span class="hljs-string">allow-hotplug eth0</span><br><span class="hljs-string">iface eth0 inet static</span><br><span class="hljs-string">    hwaddress 88:88:88:88:88:88</span><br><span class="hljs-string">    address 192.168.0.2</span><br><span class="hljs-string">netmask 255.255.255.0</span><br><span class="hljs-string">gateway 192.168.0.1</span><br><span class="hljs-string">iface eth0 inet6 auto</span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-comment"># 重新启动盒子</span><br>reboot<br></code></pre></td></tr></table></figure><p>安装xfce桌面</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">apt</span>-<span class="hljs-meta">get</span> install xfce4 xfce4-goodies xorg dbus-<span class="hljs-built_in">x11</span> <span class="hljs-built_in">x11</span>-xserver-utils<br></code></pre></td></tr></table></figure><p>ubuntu的安装gdm3，</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">apt</span> install gdm3<br></code></pre></td></tr></table></figure><p>debian安装lightdm。</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">apt</span> install lightdm<br></code></pre></td></tr></table></figure><p>安装vnc server</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">apt-<span class="hljs-built_in">get</span> install tightvncserver<br></code></pre></td></tr></table></figure><p>中文字体</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">apt-<span class="hljs-built_in">get</span> install fonts-wqy-zenhei<br></code></pre></td></tr></table></figure><p> 开机自启动vncviewer</p><p>在root或者普通用户下执行</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">/usr/bin/vncserver -depth <span class="hljs-number">24</span> -<span class="hljs-built_in">geometry</span> <span class="hljs-number">1920</span>x1080 :<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p> 设置密码</p><p>然后修改启动脚本</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">vim /etc/rc.<span class="hljs-keyword">local</span><br></code></pre></td></tr></table></figure><p>添加以下内容</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs llvm">su - root -<span class="hljs-keyword">c</span> <span class="hljs-string">&quot;/usr/bin/vncserver -depth 24 -geometry 1920x1080 :1 &amp;&quot;</span><br>或<br>su - yourusername -<span class="hljs-keyword">c</span> <span class="hljs-string">&quot;/usr/bin/vncserver -depth 24 -geometry 1920x1080 :1 &amp;&quot;</span><br></code></pre></td></tr></table></figure><p><a href="https://github.com/ophub/amlogic-s9xxx-armbian/issues/802#top">Phicomm-n1刷入后lightdm无法正常启动</a></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">cat</span> &lt;&lt; <span class="hljs-string">&#x27;_EOF_&#x27;</span> &gt; /etc/<span class="hljs-built_in">X11</span>/xorg.conf.d/<span class="hljs-number">02</span>-dietpi-aml-s905.conf<br><span class="hljs-symbol">Section</span> <span class="hljs-string">&quot;OutputClass&quot;</span><br>    Identifier <span class="hljs-string">&quot;Amlogic&quot;</span><br>    MatchDriver <span class="hljs-string">&quot;meson&quot;</span><br>    Driver <span class="hljs-string">&quot;modesetting&quot;</span><br>    Option <span class="hljs-string">&quot;PrimaryGPU&quot;</span> <span class="hljs-string">&quot;true&quot;</span><br><span class="hljs-symbol">EndSection</span><br><span class="hljs-symbol">Section</span> <span class="hljs-string">&quot;Screen&quot;</span><br>    Identifier <span class="hljs-string">&quot;Default Screen&quot;</span><br>    Device <span class="hljs-string">&quot;Meson&quot;</span><br>    Monitor <span class="hljs-string">&quot;foo&quot;</span><br>    DefaultDepth <span class="hljs-number">24</span><br>    SubSection <span class="hljs-string">&quot;Display&quot;</span><br>        Depth <span class="hljs-number">24</span><br>        Modes <span class="hljs-string">&quot;1920x1080&quot;</span> <span class="hljs-string">&quot;1440x900&quot;</span> <span class="hljs-string">&quot;1280x720&quot;</span> <span class="hljs-string">&quot;1280x1024&quot;</span> <span class="hljs-string">&quot;1280x960&quot;</span> <span class="hljs-string">&quot;1024x768&quot;</span> <span class="hljs-string">&quot;800x600&quot;</span> <span class="hljs-string">&quot;640x480&quot;</span> <span class="hljs-string">&quot;720x400&quot;</span><br>    EndSubSection<br><span class="hljs-symbol">EndSection</span><br><span class="hljs-symbol">_EOF_</span><br></code></pre></td></tr></table></figure><p>如果还不行的话：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs none">apt install accountsservice<br>mkdir /var/lib/lightdm/data<br>chmod 775 /var/lib/lightdm/data<br></code></pre></td></tr></table></figure><p><strong>八、从 Armbian 刷到 Android 固件</strong></p><p>1、在电脑上下载并安装“3.USB_Burning_Tools_v2.0.7.2_build2.exe”烧录软件，同时下载并解压 android 固件“5.N1_mod_by_webpad_v2.2_20180920.img.7z”备用。</p><p>2、运行 USB_Burning_tools 软件，如下图所示，选择 android 固件后，去掉“擦除flash”和“擦除bootloader”前的对勾，然后点击“开始”按钮，将晶晨短接神器插在 HDMI 接口上，USB双公头线插到靠近 HDMI 接口的 USB 口上，然后给 N1 盒子接上电源，这时软件就识别到了 N1 盒子，开始写入固件。</p><p><img src="https://www.hicairo.com/zb_users/upload/2024/05/202405031714740113513927.webp" alt="8.N1线刷 Android 系统_1.webp"></p><p>3、大约等待 3~4 分钟，会提示“100%：烧录成功”，这时先点击“停止”按钮，关闭烧录软件，然后拔掉 USB 线，拔掉电源后再次开机就进入了 android 系统。</p><p><img src="https://www.hicairo.com/zb_users/upload/2024/05/202405031714740129381098.webp" alt="8.N1线刷 Android 系统_2.webp"></p><hr><p>参考：<br><a href="https://www.hicairo.com/post/75.html">https://www.hicairo.com/post/75.html</a></p><p><a href="https://www.erballoon.vip/2023/03/14/armbianazxfcezmjqtdyxsz/">Armbian安装xfce桌面及其他的一些设置</a></p><p><a href="https://github.com/ophub/amlogic-s9xxx-armbian/releases/">https://github.com/ophub/amlogic-s9xxx-armbian/releases/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;PHICOMM N1 盒子已经上市很多年了，虽然是一个矿渣产品，但是其优异的硬件配置，丰富的固件适配，目前还被广泛使用。在此首先对 webpad 等几位大佬致敬，由于他们的分享，使得很多人可以很方便的在 N1 盒子上实现自己所需的功能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一、斐</summary>
      
    
    
    
    <category term="教程" scheme="https://blog.quickso.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="N1" scheme="https://blog.quickso.cn/tags/N1/"/>
    
    <category term="Linux" scheme="https://blog.quickso.cn/tags/Linux/"/>
    
    <category term="Armbian" scheme="https://blog.quickso.cn/tags/Armbian/"/>
    
  </entry>
  
  <entry>
    <title>用树莓派搭建Minecraft服务器</title>
    <link href="https://blog.quickso.cn/2025/06/28/%E7%94%A8%E6%A0%91%E8%8E%93%E6%B4%BE%E6%90%AD%E5%BB%BAMinecraft%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://blog.quickso.cn/2025/06/28/%E7%94%A8%E6%A0%91%E8%8E%93%E6%B4%BE%E6%90%AD%E5%BB%BAMinecraft%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2025-06-28T01:16:08.000Z</published>
    <updated>2025-06-28T02:08:57.306Z</updated>
    
    <content type="html"><![CDATA[<h3 id="为什么要折腾这个？"><a href="#为什么要折腾这个？" class="headerlink" title="为什么要折腾这个？"></a>为什么要折腾这个？</h3><p>为什么要自己搭Minecraft服务器呢？因为在自己的服务器上玩Minecraft，你可以让服务器一直运行，当你不玩的时候，你的朋友和家人还可以加入到游戏中，继续建造你的世界。你可以尝试修改游戏参数，制作mod，而且还能让你体验一把上帝的感觉，这在公共服务器里可是做不到的，而且也不用花很多钱去租远程主机来做服务器。</p><p>对于Minecraft狂热粉丝而言，搭建Minecraft服务器已经很有吸引力了。但是在树莓派上搭则会更有吸引力。小小的树莓派耗电非常少，你可以不间断地开着服务器，一年的电费也不过几块钱而已。只要一个树莓派，一张SD卡，花上一点时间设置一下，就能有一台全天候的Minecraft服务器。</p><h3 id="一、前期准备"><a href="#一、前期准备" class="headerlink" title="一、前期准备"></a><strong>一、前期准备</strong></h3><ol><li><strong>系统要求</strong><ul><li>树莓派3B（1GB内存）</li><li>推荐系统：Raspberry Pi OS Lite（64位）</li><li>至少16GB存储（建议使用SSD&#x2F;USB3.0硬盘，避免SD卡损坏）</li><li>稳定电源和散热风扇</li></ul></li></ol><h3 id="二、安装Java环境"><a href="#二、安装Java环境" class="headerlink" title="二、安装Java环境"></a><strong>二、安装Java环境</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装适合ARM的Java 17（轻量级）</span><br><span class="hljs-built_in">sudo</span> apt update<br><span class="hljs-built_in">sudo</span> apt install openjdk-17-jdk-headless -y<br><br><span class="hljs-comment"># Java 21</span><br>wget https://download.bell-sw.com/java/21.0.7+9/bellsoft-jdk21.0.7+9-linux-aarch64-lite.deb<br><span class="hljs-built_in">sudo</span> dpkg -i bellsoft-jdk21.0.7+9-linux-aarch64-lite.deb<br>apt --fix-broken install<br><span class="hljs-built_in">sudo</span> update-alternatives --config java<br><br><span class="hljs-comment"># 验证安装</span><br>java -version  <span class="hljs-comment"># 应显示 &quot;OpenJDK 64-Bit Server VM&quot;</span><br></code></pre></td></tr></table></figure><h3 id="三、安装PaperMC服务器"><a href="#三、安装PaperMC服务器" class="headerlink" title="三、安装PaperMC服务器"></a><strong>三、安装PaperMC服务器</strong></h3><p><strong>创建专用用户</strong>（提升安全性）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> useradd -m -s /bin/bash minecraft<br><span class="hljs-built_in">sudo</span> passwd minecraft<br></code></pre></td></tr></table></figure><p><strong>下载Paper服务端</strong></p><p><a href="https://papermc.io/downloads/paper">https://papermc.io/downloads/paper</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> su - minecraft<br><span class="hljs-built_in">mkdir</span> ~/server &amp;&amp; <span class="hljs-built_in">cd</span> ~/server<br>wget https://fill-data.papermc.io/v1/objects/bfca155b4a6b45644bfc1766f4e02a83c736e45fcc060e8788c71d6e7b3d56f6/paper-1.21.6-46.jar<br></code></pre></td></tr></table></figure><p><strong>首次启动生成配置</strong></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">java </span>-Xms256M -Xmx768M -<span class="hljs-keyword">jar </span>paper.<span class="hljs-keyword">jar </span>--nogui<br><span class="hljs-comment"># 首次启动后会停止，编辑 eula.txt</span><br>echo <span class="hljs-string">&quot;eula=true&quot;</span> &gt; eula.txt<br></code></pre></td></tr></table></figure><h3 id="四、内存优化配置"><a href="#四、内存优化配置" class="headerlink" title="四、内存优化配置"></a><strong>四、内存优化配置</strong></h3><p>编辑 <code>~/server/start.sh</code>：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">nano ~<span class="hljs-regexp">/server/</span>start.sh<br><br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-comment"># 使用Aikar&#x27;s Flags（针对低内存设备优化）</span><br>JAVA_ARGS=<span class="hljs-string">&quot;-Xms256M -Xmx768M -XX:+UseG1GC -XX:+ParallelRefProcEnabled -XX:MaxGCPauseMillis=200 -XX:+UnlockExperimentalVMOptions -XX:+DisableExplicitGC -XX:+AlwaysPreTouch -XX:G1NewSizePercent=30 -XX:G1MaxNewSizePercent=40 -XX:G1HeapRegionSize=8M -XX:G1ReservePercent=20 -XX:G1HeapWastePercent=5 -XX:G1MixedGCCountTarget=4 -XX:InitiatingHeapOccupancyPercent=15 -XX:G1MixedGCLiveThresholdPercent=90 -XX:G1RSetUpdatingPauseTimePercent=5 -XX:SurvivorRatio=32 -XX:+PerfDisableSharedMem -XX:MaxTenuringThreshold=1&quot;</span><br><br>java <span class="hljs-variable">$JAVA_ARGS</span> -jar paper.jar --nogui<br></code></pre></td></tr></table></figure><p><strong>关键参数说明</strong></p><ul><li><code>-Xmx768M</code>：最大内存768MB（为系统保留256MB）</li><li><code>G1GC</code>：低延迟垃圾回收器</li><li><code>MaxGCPauseMillis=200</code>：控制GC停顿时间</li><li><code>AlwaysPreTouch</code>：启动时分配内存，减少运行时延迟</li></ul><p>加上权限(root下)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chmod</span> 755 start.sh<br></code></pre></td></tr></table></figure><h3 id="五、创建Systemd服务（持久化-自动重启）"><a href="#五、创建Systemd服务（持久化-自动重启）" class="headerlink" title="五、创建Systemd服务（持久化+自动重启）"></a><strong>五、创建Systemd服务（持久化+自动重启）</strong></h3><ol><li><strong>创建服务文件</strong></li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo nano <span class="hljs-regexp">/etc/</span>systemd<span class="hljs-regexp">/system/mi</span>necraft.service<br></code></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Unit]</span><br><span class="hljs-attr">Description</span>=Minecraft Paper Server<br><span class="hljs-attr">After</span>=network.target<br><br><span class="hljs-section">[Service]</span><br><span class="hljs-attr">User</span>=minecraft<br><span class="hljs-attr">WorkingDirectory</span>=/home/minecraft/server<br><span class="hljs-attr">ExecStart</span>=/bin/bash start.sh<br><span class="hljs-attr">Restart</span>=always<br><span class="hljs-attr">RestartSec</span>=<span class="hljs-number">5</span><br><span class="hljs-comment"># 内存保护（防止树莓派崩溃）</span><br><span class="hljs-attr">MemoryMax</span>=<span class="hljs-number">800</span>M<br><span class="hljs-attr">MemorySwapMax</span>=<span class="hljs-number">0</span><br><br><span class="hljs-section">[Install]</span><br><span class="hljs-attr">WantedBy</span>=multi-user.target<br></code></pre></td></tr></table></figure><p><strong>启用服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl daemon-reload<br><span class="hljs-built_in">sudo</span> systemctl start minecraft<br><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> minecraft<br></code></pre></td></tr></table></figure><h3 id="管理命令"><a href="#管理命令" class="headerlink" title="管理命令"></a><strong>管理命令</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看服务器状态</span><br><span class="hljs-built_in">sudo</span> systemctl status minecraft<br><br><span class="hljs-comment"># 重启服务器</span><br><span class="hljs-built_in">sudo</span> systemctl restart minecraft<br><br><span class="hljs-comment"># 查看实时日志</span><br>journalctl -u minecraft -f<br></code></pre></td></tr></table></figure><h3 id="玩家连接"><a href="#玩家连接" class="headerlink" title="玩家连接"></a><strong>玩家连接</strong></h3><ol><li>获取树莓派IP：<code>hostname -I</code></li><li>客户端连接地址：<code>树莓派IP:25565</code></li></ol><p>通过这样配置，即使在1GB内存下也能稳定运行轻量级生存服务器。建议每两周重启一次服务释放内存碎片。</p><p>这种只适合折腾，正式开服还是用游戏服吧~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;为什么要折腾这个？&quot;&gt;&lt;a href=&quot;#为什么要折腾这个？&quot; class=&quot;headerlink&quot; title=&quot;为什么要折腾这个？&quot;&gt;&lt;/a&gt;为什么要折腾这个？&lt;/h3&gt;&lt;p&gt;为什么要自己搭Minecraft服务器呢？因为在自己的服务器上玩Minecraft，</summary>
      
    
    
    
    <category term="教程" scheme="https://blog.quickso.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Minecraft" scheme="https://blog.quickso.cn/tags/Minecraft/"/>
    
    <category term="我的世界" scheme="https://blog.quickso.cn/tags/%E6%88%91%E7%9A%84%E4%B8%96%E7%95%8C/"/>
    
    <category term="树莓派" scheme="https://blog.quickso.cn/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>zabbix使用docker-compose部署和配置</title>
    <link href="https://blog.quickso.cn/2025/06/14/zabbix%E4%BD%BF%E7%94%A8docker-compose%E9%83%A8%E7%BD%B2%E5%92%8C%E9%85%8D%E7%BD%AE/"/>
    <id>https://blog.quickso.cn/2025/06/14/zabbix%E4%BD%BF%E7%94%A8docker-compose%E9%83%A8%E7%BD%B2%E5%92%8C%E9%85%8D%E7%BD%AE/</id>
    <published>2025-06-14T05:13:02.000Z</published>
    <updated>2025-06-14T05:39:31.845Z</updated>
    
    <content type="html"><![CDATA[<p><strong>zabbix</strong>是一款知名的老牌监控系统，可对硬件、操作系统、数据库、网络等多种目标介质进行统一监控，并集成了UI、监控展示、告警、服务发现等多种功能，可非常高效地进行监控工作。</p><p>zabbi本身的使用非常广泛，但由于产品涉及较多组件，安装的过程往往较为麻烦，需要花费不少时间进行部署调试。对此，本文将介绍如何基于docker容器的方式，快速搭建最新版本的zabbix监控平台，解决大家在安装部署上的痛点。</p><p><img src="https://assets.zabbix.com/img/logo/zabbix_20years.svg"></p><p>官方网站：</p><p><a href="https://www.zabbix.com/cn/">https://www.zabbix.com/cn/</a></p><p>Zabbix 使用手册</p><p><a href="https://www.zabbix.com/documentation/7.0/zh/manual">https://www.zabbix.com/documentation/7.0/zh/manual</a></p><h2 id="zabbix架构信息"><a href="#zabbix架构信息" class="headerlink" title="zabbix架构信息"></a><strong>zabbix架构信息</strong></h2><p>核心架构包括以下几个部分：</p><ol><li>Zabbix Server：Zabbix Server是整个监控系统的核心组件，负责接收和处理来自Zabbix Agent的监控数据。Zabbix Server可以通过多种方式收集数据，如SNMP、IPMI、SSH等。收集到的数据会存储在Zabbix数据库中，供后续处理和分析。</li><li>Zabbix Agent：Zabbix Agent是安装在被监控主机上的软件，负责收集并提供监控数据。Zabbix Agent可以运行在各种操作系统上，支持多种编程语言。Agent会定期将监控数据发送给Zabbix Server，以确保监控数据的实时性和准确性。</li><li>Zabbix Web界面：Zabbix Web界面是一个基于Java的Web应用程序，用于展示和管理监控数据。通过Zabbix Web界面，用户可以轻松查看实时监控数据、历史趋势、报警信息等。此外，Zabbix Web界面还提供了丰富的报告和统计功能，方便用户分析和诊断系统性能。</li><li>Zabbix API：Zabbix API是一个RESTful风格的接口，允许外部程序和脚本访问Zabbix Server的数据和功能。通过Zabbix API，您可以实现自动化操作、数据集成和其他定制功能。</li><li>数据库：Zabbix使用MySQL或PostgreSQL数据库存储监控数据、配置信息和报警历史等。数据库服务器可以是本地或远程的，以便于扩展和备份。</li><li>报警和通知：Zabbix支持多种报警方式，如邮件、SMS、即时通讯等。当监控项触发报警条件时，Zabbix Server会将报警信息发送给指定的用户或团队。此外，Zabbix还支持通知渠道的聚合和重试，以确保报警信息的及时传递。</li><li>插件和扩展：Zabbix具有良好的扩展性，通过丰富的插件和扩展模块，可以实现对各种设备和协议的监控。此外，Zabbix社区不断推出新功能和优化性能，使得Zabbix适用于更多场景。</li></ol><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/image-1.png"></p><h2 id="安装Docker-Docker-Compose"><a href="#安装Docker-Docker-Compose" class="headerlink" title="安装Docker&amp;Docker Compose"></a>安装Docker&amp;Docker Compose</h2><p>参考 <a href="https://getdocker.quickso.cn/">https://getdocker.quickso.cn</a></p><h2 id="安装服务端"><a href="#安装服务端" class="headerlink" title="安装服务端"></a>安装服务端</h2><p>Zabbix 提供了用于在 Docker 中定义和运行多容器 Zabbix 组件的 compose 文件。 这些 compose 文件可以在  <a href="https://github.com/zabbix/zabbix-docker">https://github.com/zabbix/zabbix-docker</a> 上的 Zabbix docker 官方仓库中找到。</p><p>以下为几个不同版本的 compose 文件：</p><table><thead><tr><th><strong>文件名</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><code>docker-compose_v3_alpine_mysql_latest.yaml</code></td><td>该 compose 文件运行基于 Alpine Linux 的 Zabbix 5.4 最新版本的组件，支持 MySQL 数据库。</td></tr><tr><td><code>docker-compose_v3_alpine_mysql_local.yaml</code></td><td>该 compose 文件本地构建和运行基于 Alpine Linux 的 Zabbix 5.4 最新版本的组件，支持 MySQL数据库。</td></tr><tr><td><code>docker-compose_v3_alpine_pgsql_latest.yaml</code></td><td>该 compose 文件运行基于 Alpine Linux 的 Zabbix 5.4 最新版本的组件，支持 PostgreSQL 数据库。</td></tr><tr><td><code>docker-compose_v3_alpine_pgsql_local.yaml</code></td><td>该 compose 文件本地构建和运行基于 Apline Linux 的 Zabbix 5.4 最新版本的组件，支持 PostgreSQL 数据库。</td></tr><tr><td><code>docker-compose_v3_centos_mysql_latest.yaml</code></td><td>该 compose 文件运行基于 CentOS 8 的 Zabbix 5.4 最新版本的组件，支持 MySQL 数据库。</td></tr><tr><td><code>docker-compose_v3_centos_mysql_local.yaml</code></td><td>该 compose 文件本地构建和运行基于 CentOS 8 的 Zabbix 5.4 最新版本的组件，支持 MySQL 数据库。</td></tr><tr><td><code>docker-compose_v3_centos_pgsql_latest.yaml</code></td><td>该 compose 文件运行基于 CentOS 8 的 Zabbix 5.4 最新版本的组件，支持 PostgreSQL 数据库。</td></tr><tr><td><code>docker-compose_v3_centos_pgsql_local.yaml</code></td><td>该 compose 文件本地构建和运行基于 CentOS 8 的 Zabbix 5.4 最新版本的组件，支持 PostgreSQL 数据库。</td></tr><tr><td><code>docker-compose_v3_ubuntu_mysql_latest.yaml</code></td><td>该 compose 文件运行基于 Ubuntu 20.04 的 Zabbix 5.4 最新版本的组件，支持 MySQL 数据库。</td></tr><tr><td><code>docker-compose_v3_ubuntu_mysql_local.yaml</code></td><td>该 compose 文件本地构建和运行基于 Ubuntu 20.04 的 Zabbix 5.4 最新版本的组件，支持 MySQL 数据库。</td></tr><tr><td><code>docker-compose_v3_ubuntu_pgsql_latest.yaml</code></td><td>该 compose 文件运行基于 Ubuntu 20.04 的 Zabbix 5.4 最新版本的组件，支持 PostgreSQL 数据库。</td></tr><tr><td><code>docker-compose_v3_ubuntu_pgsql_local.yaml</code></td><td>该 compose 文件本地构建和运行基于 Ubuntu 20.04 的 Zabbix 5.4 最新版本的组件，支持 PosegreSQL 数据库。</td></tr></tbody></table><blockquote><p>[!NOTE]</p><p>Docker compose 文件支持 Docker Compose 3 版本。</p></blockquote><p>本次我们使用<code>docker-compose_v3_alpine_mysql_latest.yaml</code>文件部署</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/zabbix/zabbix-docker.git<br><span class="hljs-built_in">cd</span> zabbix-docker<br></code></pre></td></tr></table></figure><p>栗子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建存放位置</span><br><span class="hljs-built_in">mkdir</span> -p /data/zabbix &amp;&amp; <span class="hljs-built_in">cd</span> /data/zabbix<br><span class="hljs-built_in">touch</span> docker-compose.yml<br> <br><span class="hljs-built_in">cat</span> &gt; docker-compose.yml &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string"> </span><br><span class="hljs-string">version: &#x27;3&#x27;</span><br><span class="hljs-string"> </span><br><span class="hljs-string">services:</span><br><span class="hljs-string">  zabbix-web-nginx-mysql:</span><br><span class="hljs-string">    image: zabbix/zabbix-web-nginx-mysql:centos-5.2-latest</span><br><span class="hljs-string">    restart: always</span><br><span class="hljs-string">    environment:</span><br><span class="hljs-string">      - DB_SERVER_HOST=zabbix-mysql</span><br><span class="hljs-string">      - MYSQL_DATABASE=zabbix</span><br><span class="hljs-string">      - MYSQL_USER=zabbix</span><br><span class="hljs-string">      - MYSQL_PASSWORD=zabbix</span><br><span class="hljs-string">      - MYSQL_ROOT_PASSWORD=123456</span><br><span class="hljs-string">      - ZBX_SERVER_HOST=zabbix-server-mysql</span><br><span class="hljs-string">    ports:</span><br><span class="hljs-string">      - 8080:8080</span><br><span class="hljs-string">    volumes:</span><br><span class="hljs-string">      - /etc/localtime:/etc/localtime</span><br><span class="hljs-string">      - /data/zabbix/fonts/DejaVuSans.ttf:/usr/share/zabbix/assets/fonts/DejaVuSans.ttf</span><br><span class="hljs-string">    networks:</span><br><span class="hljs-string">      - zbx_net</span><br><span class="hljs-string">    depends_on:</span><br><span class="hljs-string">      - zabbix-server-mysql</span><br><span class="hljs-string">      - zabbix-mysql</span><br><span class="hljs-string">  zabbix-mysql:</span><br><span class="hljs-string">    image: mysql:8.0.23</span><br><span class="hljs-string">    restart: always</span><br><span class="hljs-string">    ports:</span><br><span class="hljs-string">      - 3306:3306</span><br><span class="hljs-string">    environment:</span><br><span class="hljs-string">      - MYSQL_DATABASE=zabbix</span><br><span class="hljs-string">      - MYSQL_USER=zabbix</span><br><span class="hljs-string">      - MYSQL_PASSWORD=zabbix</span><br><span class="hljs-string">      - MYSQL_ROOT_PASSWORD=123456</span><br><span class="hljs-string">    command:</span><br><span class="hljs-string">      - mysqld</span><br><span class="hljs-string">      - --default-authentication-plugin=mysql_native_password</span><br><span class="hljs-string">      - --character-set-server=utf8</span><br><span class="hljs-string">      - --collation-server=utf8_bin</span><br><span class="hljs-string">    volumes:</span><br><span class="hljs-string">      - /etc/localtime:/etc/localtime</span><br><span class="hljs-string">      - /data/zabbix/db:/var/lib/mysql</span><br><span class="hljs-string">    networks:</span><br><span class="hljs-string">      - zbx_net</span><br><span class="hljs-string">  zabbix-java-gateway:</span><br><span class="hljs-string">    image: zabbix/zabbix-java-gateway:centos-5.2-latest</span><br><span class="hljs-string">    restart: always</span><br><span class="hljs-string">    volumes:</span><br><span class="hljs-string">      - /etc/localtime:/etc/localtime</span><br><span class="hljs-string">    networks:</span><br><span class="hljs-string">      - zbx_net</span><br><span class="hljs-string">  zabbix-server-mysql:</span><br><span class="hljs-string">    image: zabbix/zabbix-server-mysql:centos-5.2-latest</span><br><span class="hljs-string">    restart: always</span><br><span class="hljs-string">    volumes:</span><br><span class="hljs-string">      - zabbix-server-vol:/etc/zabbix</span><br><span class="hljs-string">      - /data/zabbix/alertscripts:/usr/lib/zabbix/alertscripts</span><br><span class="hljs-string">      - /etc/localtime:/etc/localtime</span><br><span class="hljs-string">      - /data/zabbix/config:/etc/zabbix/</span><br><span class="hljs-string">    ports:</span><br><span class="hljs-string">      - 10051:10051</span><br><span class="hljs-string">    environment:</span><br><span class="hljs-string">      - DB_SERVER_HOST=zabbix-mysql</span><br><span class="hljs-string">      - MYSQL_DATABASE=zabbix</span><br><span class="hljs-string">      - MYSQL_USER=zabbix</span><br><span class="hljs-string">      - MYSQL_PASSWORD=zabbix</span><br><span class="hljs-string">      - MYSQL_ROOT_PASSWORD=123456</span><br><span class="hljs-string">      - ZBX_JAVAGATEWAY=zabbix-java-gateway</span><br><span class="hljs-string">      - ZBX_JAVAGATEWAY_ENABLE=true</span><br><span class="hljs-string">      - ZBX_JAVAGATEWAYPORT=10052</span><br><span class="hljs-string">    depends_on:</span><br><span class="hljs-string">      - zabbix-mysql</span><br><span class="hljs-string">    networks:</span><br><span class="hljs-string">      - zbx_net</span><br><span class="hljs-string">  zabbix-agent:</span><br><span class="hljs-string">    image: zabbix/zabbix-agent:centos-5.2-latest</span><br><span class="hljs-string">    restart: always</span><br><span class="hljs-string">    ports:</span><br><span class="hljs-string">      - 10050:10050</span><br><span class="hljs-string">    environment:</span><br><span class="hljs-string">      - ZBX_HOSTNAME=Zabbix server</span><br><span class="hljs-string">      - ZBX_SERVER_HOST=zabbix-server-mysql</span><br><span class="hljs-string">      - ZBX_SERVER_PORT=10051</span><br><span class="hljs-string">    networks:</span><br><span class="hljs-string">      - zbx_net</span><br><span class="hljs-string"> </span><br><span class="hljs-string">networks:</span><br><span class="hljs-string">  zbx_net:</span><br><span class="hljs-string">    driver: bridge</span><br><span class="hljs-string"> </span><br><span class="hljs-string">volumes:</span><br><span class="hljs-string">  zabbix-server-vol:</span><br><span class="hljs-string"> </span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在docker-compose.yml文件目录中运行</span><br>docker-compose up -d <br><br><span class="hljs-comment"># 查看容器运行日志</span><br>docker-compose logs -f <br><br><span class="hljs-comment"># 查看容器运行状态</span><br>docker-compose up <br><br><span class="hljs-comment"># 查看容器启动的进程</span><br>docker-compose top<br></code></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>访问测试</p><p><a href="http://ip/">http://ip:80</a></p><p>默认认证信息</p><ul><li>用户名Admin</li><li>密码zabbix</li></ul><h2 id="安装agent（客户端）"><a href="#安装agent（客户端）" class="headerlink" title="安装agent（客户端）"></a><strong>安装agent</strong>（客户端）</h2><p>zabbix agent部署较为简单，你可以使用docker，也可以使用Yum、二进制包等方式安装，此处演示基于docker的安装方式。</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs livescript">$ docker run --name zabbix-agent -t <span class="hljs-string">\</span><br>      -v zabbix_agent:/etc/zabbix <span class="hljs-string">\</span><br>      -e ZBX_HOSTNAME=<span class="hljs-string">&quot;host-01&quot;</span> <span class="hljs-string">\</span><br>      -e ZBX_SERVER_HOST=<span class="hljs-string">&quot;192.168.214.112&quot;</span> <span class="hljs-string">\</span> <br>      -e ZBX_SERVER_PORT=<span class="hljs-number">10051</span> <span class="hljs-string">\</span><br>      -p <span class="hljs-number">10050</span>:<span class="hljs-number">10050</span> <span class="hljs-string">\</span><br>      --restart=<span class="hljs-keyword">unless</span>-stopped <span class="hljs-string">\</span><br>      --privileged <span class="hljs-string">\</span><br>      -d zabbix/zabbix-agent:alpine-<span class="hljs-number">6.2</span>-latest<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE]</p><p>如果是部署在zabbix Server主机上的监控agent，此时的ZBX_SERVER_HOST需改为zabbix server的容器IP，而不能用主机IP。</p></blockquote><h3 id="添加主机"><a href="#添加主机" class="headerlink" title="添加主机"></a><strong>添加主机</strong></h3><p>在目标主机安装好agnt后，即可以在zabbix server端配置相关的主机监控。</p><ol><li>点击”Create host”,创建新的主机配置。</li></ol><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/fdc0bcc338bef783e9282b03874eca90.png" alt="img"></p><ol start="2"><li>配置完成后，静待一会可看到监控目标生效。</li></ol><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/bfdf8686607f527f454cfdcc7d22b150.png" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;zabbix&lt;/strong&gt;是一款知名的老牌监控系统，可对硬件、操作系统、数据库、网络等多种目标介质进行统一监控，并集成了UI、监控展示、告警、服务发现等多种功能，可非常高效地进行监控工作。&lt;/p&gt;
&lt;p&gt;zabbi本身的使用非常广泛，但由于产品涉及较多组</summary>
      
    
    
    
    <category term="教程" scheme="https://blog.quickso.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Zabbix" scheme="https://blog.quickso.cn/tags/Zabbix/"/>
    
    <category term="运维" scheme="https://blog.quickso.cn/tags/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="监控" scheme="https://blog.quickso.cn/tags/%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>去中心化异地组网工具Easytier搭建与使用</title>
    <link href="https://blog.quickso.cn/2025/05/26/%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E5%BC%82%E5%9C%B0%E7%BB%84%E7%BD%91%E5%B7%A5%E5%85%B7Easytier%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>https://blog.quickso.cn/2025/05/26/%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E5%BC%82%E5%9C%B0%E7%BB%84%E7%BD%91%E5%B7%A5%E5%85%B7Easytier%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/</id>
    <published>2025-05-26T15:16:20.000Z</published>
    <updated>2025-05-26T15:45:27.504Z</updated>
    
    <content type="html"><![CDATA[<p>自从开始玩NAS以来，就一直关注怎样用便宜和快速的解决异地组网的问题。</p><ul><li>公网IPv6，有但是不想公开</li><li>公网IPv4，更加不敢奢求</li><li>各种收费内网工具cpolar、passnat、樱花frp感觉有点贵，免费的又不够用</li><li>frp必须要有个中转，便宜的有公网IP的云服务器不是小水管就是限流量</li><li>zerotier、tailscale的服务器都在国外，连上PVN的P2P的成功率越来越低，也难用。</li><li>开源的Easytier，基于WireGuard改进而来。有一些大佬无偿贡献了免费中转服务器。</li></ul><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>工作原理</strong></p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/easytier01.jpg"></p><ol><li>电脑、服务器、手机作为客户端，首次连入Easytier是需要一个服务端（中转服务器）来做认证、接通P2P的VPN。【红色虚线】</li><li>如果P2P的VPN一直接不通，流量就只能通过服务端（中转服务器）来中转了。【红色虚线】</li><li>如果P2P的VPN接通了，就直接走两台客户端之间的流量。【蓝色实线】</li></ol><p><strong>问题</strong></p><ul><li>大神自建的服务端（中转服务器）肯定满足不了日常使用，因为链接的人越多，肯定越慢。</li><li>这样就需要搭建自己的服务端（中转服务器），或者使用其他大佬无偿提供的服务端（中转服务器）。</li></ul><p><strong>搭建自己的中转服务器</strong></p><p>服务器环境：</p><ul><li>ClawCloud 日本 ，<strong>必须要有公网IP</strong></li><li>Debian 12</li><li>安装Docker</li></ul><p>最终形成这样的拓扑架构<br><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/easytier14.jpg" alt="图片"></p><h1 id="搭建服务端"><a href="#搭建服务端" class="headerlink" title="搭建服务端"></a>搭建服务端</h1><p><strong>通过Docker Compose来启动镜像</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">nano</span> docker-compose.yaml<br></code></pre></td></tr></table></figure><p>写入</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">version</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;3.8&#x27;</span><br><span class="hljs-attribute">services</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">watchtower</span><span class="hljs-punctuation">:</span> <span class="hljs-string"># 用于自动更新easytier镜像，若不需要请删除这部分</span><br>    <span class="hljs-attribute">command</span><span class="hljs-punctuation">:</span> <span class="hljs-string">--interval 3600 --cleanup --label-enable</span><br>    <span class="hljs-attribute">container_name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">watchtower</span><br>    <span class="hljs-attribute">environment</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">TZ=Asia/Shanghai</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">WATCHTOWER_NO_STARTUP_MESSAGE</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">containrrr/watchtower</span><br>    <span class="hljs-attribute">restart</span><span class="hljs-punctuation">:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attribute">volumes</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/var/run/docker.sock:/var/run/docker.sock</span><br>  <span class="hljs-attribute">easytier</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">restart</span><span class="hljs-punctuation">:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">com.centurylinklabs.watchtower.enable</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;true&#x27;</span><br>    <span class="hljs-attribute">privileged</span><span class="hljs-punctuation">:</span> <span class="hljs-string">true</span><br>    <span class="hljs-attribute">mem_limit</span><span class="hljs-punctuation">:</span> <span class="hljs-string">0m</span><br>    <span class="hljs-attribute">container_name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">easytier</span><br>    <span class="hljs-attribute">hostname</span><span class="hljs-punctuation">:</span> <span class="hljs-string">easytier</span><br>    <span class="hljs-attribute">network_mode</span><span class="hljs-punctuation">:</span> <span class="hljs-string">host</span><br>    <span class="hljs-attribute">volumes</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/etc/easytier:/root</span><br>    <span class="hljs-attribute">environment</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">TZ=Asia/Shanghai</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">easytier/easytier:latest # 国内用户可以使用 m.daocloud.io/docker.io/easytier/easytier:latest</span><br>    <span class="hljs-attribute">command</span><span class="hljs-punctuation">:</span> <span class="hljs-string">-i &lt;VPN虚拟IP&gt; --network-name &lt;用户&gt; --network-secret &lt;密码&gt; -p tcp://&lt;云服务器域名或公网IP&gt;:11010</span><br></code></pre></td></tr></table></figure><p>如最后一句可以是：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">command: -<span class="hljs-selector-tag">i</span> <span class="hljs-number">10.0</span>.<span class="hljs-number">0.1</span> <span class="hljs-attr">--hostname</span> MyEasytierServer <span class="hljs-attr">--network-name</span> MyVPNName <span class="hljs-attr">--network-secret</span> MyVPNPassword -<span class="hljs-selector-tag">p</span> tcp:<span class="hljs-comment">//vpn.xx.com:11010</span><br></code></pre></td></tr></table></figure><ul><li><code>-i</code>：VPN中的内网地址</li><li><code>--hostname</code>：节点名字（中转服务器名字），没有的话就默认是easytier</li><li><code>--network-name</code>：在组建虚拟局域网的名字，要复杂个性一点，网上已经有人用了就会冲突连不上。其他节点千万不要写错。</li><li><code>--network-secret</code>：在组建虚拟局域网的密码，要复杂一点，被人猜到，就会白嫖你的公网云主机流量。其他节点千万不要写错。</li><li><code>-p</code>：搭建中转服务器的IP，即云主机的公网IP。如果填写的不是云主机的公网IP，就需要填作者或其他大神公开的中转服务器IP，连通性会差很多的。</li></ul><p>配置好后，输入下面命令</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker compose up -d</span><br></code></pre></td></tr></table></figure><h1 id="配置客户端"><a href="#配置客户端" class="headerlink" title="配置客户端"></a>配置客户端</h1><p><strong>（1）配置Windows客户端</strong><br>下载地址：<a href="https://easytier.cn/guide/download.html">https://easytier.cn/guide/download.html</a><br><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/easytier05.jpg" alt="图片"><br>Windows的安装非常简单的，这里就不说明的。全部下一步。</p><ul><li>配置Windows客户端的方法如图：<br><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/easytier06.jpg" alt="图片"></li><li>连上了就会这样子，显示<code>P2P</code>就是点对点的联网<strong>成功</strong>了，这时候就会走两台电脑之间的WIFI&#x2F;宽带&#x2F;5G流量，不会走中转服务器（腾讯云&#x2F;阿里云）的公网IP流量。</li><li>点对点<code>P2P</code><strong>不成功</strong>，会显示<code>delay</code>，这就只能走中转服务器的流量了，会慢很多。看下图的ping值就看出来有两个数量级的延时差距。<br>  <img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/easytier09.jpg" alt="图片"></li></ul><p><strong>（2）配置Linux客户端</strong></p><ul><li>配置飞牛OS的客户端（命令行）</li></ul><ol><li><p>下载Linux用的zip包</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> https://github.com/EasyTier/EasyTier/releases/download/v2.<span class="hljs-number">2</span>.<span class="hljs-number">4</span>/easytier-linux-x86_64-v2.<span class="hljs-number">2</span>.<span class="hljs-number">4</span>.zip<br></code></pre></td></tr></table></figure></li><li><p>把zip包解压出来，会有三个文件。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">unzip</span> easytier-linux-x86_64-v2.<span class="hljs-number">2</span>.<span class="hljs-number">4</span>.zip<br></code></pre></td></tr></table></figure><p>把文件授权可以执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># cd到你解压出来的文件夹里面</span><br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chmod</span> +x ./*<br></code></pre></td></tr></table></figure><p>把文件丢到</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>bin/<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mv</span> ./easytier-* /usr/bin/<br></code></pre></td></tr></table></figure><p>现在就可以试用</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">easytier-core</span><br></code></pre></td></tr></table></figure><p>和</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">easytier-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure><p>命令了，记得在root用户下使用。</p></li><li><p>启动飞牛OS的客户端</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">sudo easytier-core -<span class="hljs-selector-tag">i</span> &lt;你要创建虚拟局域网IP&gt; <span class="hljs-attr">--network-name</span> &lt;用户&gt; <span class="hljs-attr">--network-secret</span> &lt;密码&gt; -<span class="hljs-selector-tag">p</span> tcp:<span class="hljs-comment">//&lt;服务器地址&gt;:11010</span><br>#例子： sudo easytier-core -<span class="hljs-selector-tag">i</span> <span class="hljs-number">10.0</span>.<span class="hljs-number">0.5</span> <span class="hljs-attr">--network-name</span> MyVPNName <span class="hljs-attr">--network-secret</span> MyVPNPassword -<span class="hljs-selector-tag">p</span> tcp:<span class="hljs-comment">//vpn.xxx.com:11010</span><br></code></pre></td></tr></table></figure><p>譬如：Windows的虚拟局域网IP是：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">10.0.0.3</span><br></code></pre></td></tr></table></figure><p>，你的飞牛OS就是错开用：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">10.0.0.5</span><br></code></pre></td></tr></table></figure><p>，你的安卓手机是</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">10.0.0.4</span><br></code></pre></td></tr></table></figure><p>、笔记本电脑是</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">10.0.0.5</span><br></code></pre></td></tr></table></figure><p>全都要把最后一位IP错开。</p></li></ol><p>成功连上就会有日志返回<br><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/easytier10.jpg" alt="图片"></p><p>测试用飞牛影视播放1080P的电影原画的时候，走的是P2P，即只走了飞牛所在宽带的上传流量，没有走中转服务</p><p><em>PS：如果关闭终端窗口，就会关闭这个easytier-core进程，需要后台保持就要创建systemctl服务</em></p><ol><li><p>配置<code>systemctl</code>服务和自启<br>创建一个<code>easytier-core.service</code>文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo vim <span class="hljs-regexp">/etc/</span>systemd<span class="hljs-regexp">/system/</span>easytier-core.service<br></code></pre></td></tr></table></figure><p>写入这段到代码，具体需要按自己的情况修改。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Unit]</span><br><span class="hljs-attr">Description</span> = EasyTier Core Service<br><span class="hljs-attr">After</span> = network.target<br><br><span class="hljs-section">[Service]</span><br><span class="hljs-attr">ExecStart</span> = /usr/bin/easytier-core -i <span class="hljs-number">10.0</span>.<span class="hljs-number">0.5</span> --network-name MyVPNName --network-secret MyVPNPassword -p tcp://vpn.xxx.com:<span class="hljs-number">11010</span><br><br><br><span class="hljs-section">[Install]</span><br><span class="hljs-attr">WantedBy</span> = multi-user.target<br></code></pre></td></tr></table></figure><p>然后配置<code>systemctl</code>自启动</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nsis">ps aux | grep easytier <span class="hljs-comment"># 确认是否有easytier启动着</span><br><span class="hljs-params">system</span>ctl daemon-reload <span class="hljs-comment">#重载你的systemctl，不然下面的命令都会用不了</span><br><span class="hljs-params">system</span>ctl start easytier-core <span class="hljs-comment"># 启动服务</span><br><span class="hljs-params">system</span>ctl status easytier-core <span class="hljs-comment"># 查看启动状态</span><br><span class="hljs-params">system</span>ctl enable easytier-core <span class="hljs-comment"># 设置自启动</span><br><span class="hljs-params">system</span>ctl restart easytier-core <span class="hljs-comment"># 重启服务</span><br><span class="hljs-params">system</span>ctl stop easytier-core <span class="hljs-comment"># 停止服务</span><br></code></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/easytier16.jpg" alt="图片"></p><p><strong>搭好的环境：</strong><br>优点：</p><ul><li>走P2P流量，即WIFI、家庭宽带、5G的直接流量，不需要浪费云主机（阿里云&#x2F;腾讯云）的流量来做中转。</li><li>延迟低，基本上可以达到个位数的毫秒级。</li><li>速度快，这主要看WIFI、家庭宽带、5G的上传带宽为限。平时不要用太狠，会被运营商封禁的</li></ul><p>缺点：</p><ul><li>稳定性差，因为P2P不是绝对能连上的。如果走云主机中转，会比frp还要慢。主流的内网穿透都是走frp模式的。平时可以使用easytier的P2P来降低中转流量，用frp来兜底。</li></ul><p>官方网站（文档）：</p><p><a href="https://easytier.cn/">https://easytier.cn/</a></p><p>Github：</p><p><a href="https://github.com/EasyTier/Easytier">https://github.com/EasyTier/Easytier</a></p></li></ol><p>本文参考</p><p><a href="https://www.brian-zzh.cn/2025/03/13/20250331%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7Easytier/#%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E7%AB%AF">https://www.brian-zzh.cn/2025/03/13/20250331%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7Easytier/#%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E7%AB%AF</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;自从开始玩NAS以来，就一直关注怎样用便宜和快速的解决异地组网的问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公网IPv6，有但是不想公开&lt;/li&gt;
&lt;li&gt;公网IPv4，更加不敢奢求&lt;/li&gt;
&lt;li&gt;各种收费内网工具cpolar、passnat、樱花frp感觉有点贵，免费的又不够用</summary>
      
    
    
    
    <category term="教程" scheme="https://blog.quickso.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Easytier" scheme="https://blog.quickso.cn/tags/Easytier/"/>
    
    <category term="异地组网" scheme="https://blog.quickso.cn/tags/%E5%BC%82%E5%9C%B0%E7%BB%84%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>CudyTR3000路由器刷机OpenWrt折腾记录</title>
    <link href="https://blog.quickso.cn/2025/03/22/CudyTR3000%E8%B7%AF%E7%94%B1%E5%99%A8%E5%88%B7%E6%9C%BAOpenWrt%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/"/>
    <id>https://blog.quickso.cn/2025/03/22/CudyTR3000%E8%B7%AF%E7%94%B1%E5%99%A8%E5%88%B7%E6%9C%BAOpenWrt%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/</id>
    <published>2025-03-22T05:10:52.000Z</published>
    <updated>2025-05-26T15:06:48.566Z</updated>
    
    <content type="html"><![CDATA[<p>这几个月最火的路由器就是cudy多酷TR3000了，这是一款便携迷你随身路由器，MT7981B方案。Cudy很多人没听过，这是一家正规厂家专门做外贸的，可能是库存压力大，转内销了，不要你399，仅需隔壁MT3000三分之一的价格，让你带回家。我花了差不多150买下了它。</p><h2 id="配置说明："><a href="#配置说明：" class="headerlink" title="配置说明："></a>配置说明：</h2><ul><li>️ 无线规格：AX3000 160MHz</li><li>128MB闪存&#x2F;512MB内存</li><li>2.5G&#x2F;1G 双网口, USB3.0接口,Type-C供电（5V&#x2F;3A）</li><li>️ 隔壁MT3000平替(1&#x2F;3价格)，MT3000有主动散热、闪存256MB</li><li>支持OpenWrt，配合 4&#x2F;5G 随身WiFi，变身CPE路由器，办公、旅行、车载。</li><li>❗缺点：闪存小，装不了几个插件，USB接口供电不足</li></ul><p>路由器通电开机进入官方系统看看，</p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/v2-d4c3a49ecd15f28740c4949bd1f00de0_1440w.jpg" alt="img"></p><p>▲ 后台首页可以看到路由器的基本信息、运行状态、接入终端的设备、网络等信息。</p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/v2-795f8c986717b57a31d77ba7365e13a6_720w.webp" alt="img"></p><p>▲ 高级设置里面有的功能，经过测试USB接口不能共享网络，官方系统没有这个功能。</p><p>官方固件整体上比较简洁、只有一些基础功能，像是USB共享网络，移动通信模块、打印机共享等都没有，下面开始折腾刷机。</p><h2 id="刷openwrt系统"><a href="#刷openwrt系统" class="headerlink" title="刷openwrt系统"></a><strong>刷openwrt系统</strong></h2><h2 id="准备资料"><a href="#准备资料" class="headerlink" title="准备资料"></a>准备资料</h2><p><strong>由于文件名比较相似，请注意辨别。本文末尾所有文件均有下载。</strong></p><h4 id="过渡包："><a href="#过渡包：" class="headerlink" title="过渡包："></a>过渡包：</h4><p>cudy_tr3000-v1-sysupgrade.bin</p><h4 id="FIP分区只读破解包："><a href="#FIP分区只读破解包：" class="headerlink" title="FIP分区只读破解包："></a>FIP分区只读破解包：</h4><p>openwrt-mediatek-filogic-cudy_tr3000-v1-squashfs-sysupgrade.bin</p><h4 id="中文三分区DHCP-UBOOT："><a href="#中文三分区DHCP-UBOOT：" class="headerlink" title="中文三分区DHCP UBOOT："></a>中文三分区DHCP UBOOT：</h4><p>dhcp-mt7981_cudy_tr3000-fip-fixed-parts-multi-layout.bin</p><h4 id="固件："><a href="#固件：" class="headerlink" title="固件："></a><strong>固件：</strong></h4><p><a href="https://www.right.com.cn/forum/thread-8415516-1-1.html">cudy tr3000v1 lede源码6.6内核</a></p><p>114m-lede-openwrt6.6.673-mediatek-filogic-cudy_tr3000-v1-squashfs-sysupgrade.bin</p><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><p><a href="https://www.wifilu.com/wp-content/uploads/2025/02/20250307193946798218.webp"><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/20250307193946798218.webp" alt="img"></a></p><p><strong>刷机过程中涉及到和电脑连接的时候，请使用网线连接TR3000的千兆网口和电脑。</strong></p><h3 id="1，刷入过渡包"><a href="#1，刷入过渡包" class="headerlink" title="1，刷入过渡包"></a>1，刷入过渡包</h3><p>本步骤刷入过渡包，是为了下一步刷入 FIP分区只读破解包。</p><ul><li>进入TR3000官方后台 基本设置-&gt;固件升级</li><li>刷入 cudy_tr3000-v1-sysupgrade.bin</li></ul><p><a href="https://www.wifilu.com/wp-content/uploads/2025/02/20250228064215770704.webp"><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/20250228064215770704.webp" alt="img"></a></p><p>刷写完成后，自动重启。此时浏览器输入192.168.1.1，进入过渡包后台（密码password）</p><p><a href="https://www.wifilu.com/wp-content/uploads/2025/02/20250228064152518202.webp"><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/20250228064152518202.webp" alt="img"></a></p><h3 id="2，刷入FIP分区只读破解包"><a href="#2，刷入FIP分区只读破解包" class="headerlink" title="2，刷入FIP分区只读破解包"></a>2，刷入FIP分区只读破解包</h3><p>在过渡包后台打开 系统-&gt;备份与升级 进入刷机界面，点击 刷写固件 开始选择刷入FIP分区只读破解包刷入。</p><p>FIP分区只读破解包：openwrt-mediatek-filogic-cudy_tr3000-v1-squashfs-sysupgrade.bin</p><p>记得<strong>不要</strong>勾选保留当前设置。</p><p><a href="https://www.wifilu.com/wp-content/uploads/2025/02/20250228064242092959.webp"><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/20250228064242092959.webp" alt="img"></a></p><p><a href="https://www.wifilu.com/wp-content/uploads/2025/02/20250228064255109819.webp"><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/20250228064255109819.webp" alt="img"></a></p><p>刷写完成后，自动重启。此时浏览器输入192.168.1.1，进入FIP分区只读破解包后台（密码password）</p><p><a href="https://www.wifilu.com/wp-content/uploads/2025/02/20250228064333472465.webp"><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/20250228064333472465.webp" alt="img"></a></p><h3 id="3，刷入第三方Uboot"><a href="#3，刷入第三方Uboot" class="headerlink" title="3，刷入第三方Uboot"></a>3，刷入第三方Uboot</h3><p>本文提供的是fry2022大佬的多分区布局中文uboot</p><h4 id="3-1，上传uboot"><a href="#3-1，上传uboot" class="headerlink" title="3.1，上传uboot"></a>3.1，上传uboot</h4><p>在FIP分区只读破解包后台 打开 系统-&gt;文件传输 选择 dhcp-mt7981_cudy_tr3000-fip-fixed-parts-multi-layout.bin 上传</p><p><a href="https://www.wifilu.com/wp-content/uploads/2025/02/20250228064319780174.webp"><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/20250228064319780174.webp" alt="img"></a></p><h4 id="3-2，刷入Uboot"><a href="#3-2，刷入Uboot" class="headerlink" title="3.2，刷入Uboot"></a>3.2，刷入Uboot</h4><p>在FIP分区只读破解包后台 打开系统-&gt;TTYD终端 默认用户名 root&#x2F;密码 password</p><p>进入uboot文件上传目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /tmp/upload/<br></code></pre></td></tr></table></figure><p>刷入ubtoot</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">mtd <span class="hljs-built_in">write</span> dhcp-mt7981_cudy_tr3000-fip-fixed-parts-multi-layout.bin FIP<br></code></pre></td></tr></table></figure><p><a href="https://www.wifilu.com/wp-content/uploads/2025/02/20250228064358681730.webp"><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/20250228064358681730.webp" alt="img"></a></p><h3 id="4，刷入第三方固件"><a href="#4，刷入第三方固件" class="headerlink" title="4，刷入第三方固件"></a>4，刷入第三方固件</h3><h4 id="4-1，进入uboot界面"><a href="#4-1，进入uboot界面" class="headerlink" title="4.1，进入uboot界面"></a>4.1，进入uboot界面</h4><p>4.1.1，TR3000断电</p><p>4.1.2，路由器LAN口先用网线连接电脑</p><p>4.1.3，按住路由器<strong>Reset键不松手</strong>，随即接通电源</p><p>4.1.4，<strong>闪烁4次白灯后转为红灯常亮</strong> 表示成功进入U-Boot，此时可以松开Reset键。</p><p>4.1.5，浏览器输入192.168.1.1进入web刷机界面刷机<a href="https://www.wifilu.com/wp-content/uploads/2025/02/20250228064412354461.webp"><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/20250228064412354461.webp" alt="img"></a></p><h4 id="4-2，刷入第三方固件"><a href="#4-2，刷入第三方固件" class="headerlink" title="4.2，刷入第三方固件"></a>4.2，刷入第三方固件</h4><p>注意此uboot支持多种分区，本文提供的是114M大分区固件，所以 mtd分区 请选择 <strong>maximum-114m</strong></p><p>选择 114m-lede-openwrt6.6.673-mediatek-filogic-cudy_tr3000-v1-squashfs-sysupgrade.bin 刷入。</p><p><a href="https://www.wifilu.com/wp-content/uploads/2025/02/20250228064421175014.webp"><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/20250228064421175014.webp" alt="img"></a></p><p>刷机完成后自动启动固件，首次启动可能时间比较长大约需要5分钟。</p><p>固件后台：192.168.2.1  用户&#x2F;密码：root&#x2F;password</p><p><a href="https://www.wifilu.com/wp-content/uploads/2025/02/20250228064429075371.webp"><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/20250228064429075371.webp" alt="第三方固件后台界面"></a></p><h2 id="关于后续刷机"><a href="#关于后续刷机" class="headerlink" title="关于后续刷机"></a>关于后续刷机</h2><ul><li>如果你的固件是114M分区也就是和当前固件同一分区类型。</li></ul><p>那么打开 系统-&gt;备份与升级 刷固件即可。</p><ul><li>如果你的固件是其他分区</li></ul><p>请进入uboot选择合适的分区布局，然后刷入。</p><h2 id="关于刷回原厂"><a href="#关于刷回原厂" class="headerlink" title="关于刷回原厂"></a>关于刷回原厂</h2><h3 id="1，体验原厂固件"><a href="#1，体验原厂固件" class="headerlink" title="1，体验原厂固件"></a>1，体验原厂固件</h3><p>如果你只是想体验原厂固件而保留第三方uboot.</p><p>那么请进入uboot选择 <strong>default</strong> 分区布局，然后刷入分割好的官方固件</p><p>本文网盘链接中提供原厂2.3.7分割好的固件：uboot刷cudy_tr3000v1-GF2.3.7.bin</p><h3 id="2，彻底恢复原厂"><a href="#2，彻底恢复原厂" class="headerlink" title="2，彻底恢复原厂"></a>2，彻底恢复原厂</h3><p>如果你因为某些原因，想彻底恢复原厂固件，请看下面的操作。</p><h4 id="2-1，准备材料："><a href="#2-1，准备材料：" class="headerlink" title="2.1，准备材料："></a>2.1，准备材料：</h4><p>原厂uboot(FIP)：恢复原厂&#x2F;FIP.bin</p><p>原厂救砖包：recovery.bin（recovery.zip包内）</p><p>tftp工具：tftpd64.exe（recovery.zip包内）</p><h4 id="2-2，刷回原厂uboot-FIP"><a href="#2-2，刷回原厂uboot-FIP" class="headerlink" title="2.2，刷回原厂uboot(FIP)"></a>2.2，刷回原厂uboot(FIP)</h4><p>进入当前的uboot页面，点击 更新U-Boot</p><p>然后选择FIP.bin更新</p><p><a href="https://www.wifilu.com/wp-content/uploads/2025/02/20250228105043963861.webp"><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/20250228105043963861.webp" alt="img"></a></p><h4 id="2-3-电脑手动设置IP"><a href="#2-3-电脑手动设置IP" class="headerlink" title="2.3,电脑手动设置IP"></a>2.3,电脑手动设置IP</h4><p>TR3000断电，然后设置IP</p><p>路径为 控制面板-&gt;网络和 Internet-&gt;网络连接-&gt;以太网-&gt;属性-&gt;Internet协议版本4(TCP&#x2F;IPv4)</p><p>设置如下：</p><p>如果你是2025年以前的机器：ip地址为：192.168.1.88，网关地址为192.168.1.112</p><p><strong>如果你是2025年以后的机器：ip地址为：192.168.1.2，网关地址为192.168.1.1</strong></p><p>当然IP区分不一定绝对，如果你始终用一组IP，无法刷机的时候，建议换一组。</p><p><a href="https://www.wifilu.com/wp-content/uploads/2025/02/20250228105136846623.webp"><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/20250228105136846623.webp" alt="img"></a></p><h4 id="2-4，tftp设置"><a href="#2-4，tftp设置" class="headerlink" title="2.4，tftp设置"></a>2.4，tftp设置</h4><p>TR3000断电，然后打开tftp.exe</p><p><strong>Current Directory</strong> 为你recovery.bin所在的目录，默认是tftp.exe所在的目录。recovery.bin和tftp.exe在一个目录即可。</p><p><strong>Server interface</strong> 选择你上一步设置的IP地址192.168.1.88或者192.168.1.2，我自己的是192.168.1.2。</p><p><a href="https://www.wifilu.com/wp-content/uploads/2025/02/20250228105100941890.webp"><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/20250228105100941890.webp" alt="img"></a></p><h4 id="2-5，刷入原厂救砖包"><a href="#2-5，刷入原厂救砖包" class="headerlink" title="2.5，刷入原厂救砖包"></a>2.5，刷入原厂救砖包</h4><p>2.5.1，TR3000断电</p><p>2.5.2，路由器LAN口先用网线连接电脑</p><p>2.5.3，按住路由器<strong>Reset键不松手</strong>，随即接通电源</p><p>2.5.4，指示灯红色粉色交替闪烁，tftp显示刷机过程，此时可以松开Reset键。</p><p>刷机完成后自动重启</p><p><a href="https://www.wifilu.com/wp-content/uploads/2025/02/20250228105202561399.webp"><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/20250228105202561399.webp" alt="img"></a></p><p>2.5.5，电脑IP地址改回自动获取</p><p>此时访问192.168.10.1 就是原厂固件了，可以更新从官网下载的固件了。</p><h2 id="关于使用USB共享"><a href="#关于使用USB共享" class="headerlink" title="关于使用USB共享"></a>关于使用USB共享</h2><p>手机或者随身wifi插入USB网口</p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/v2-2d44d001f27b472e6d7d6064a77acd45_1440w.jpg" alt="img"></p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/v2-c3bc75bbbf6b57534884598c60594a33_1440w.jpg" alt="img"></p><p>▲ 网络→接口里新建一个接口，名称随意，协议DHCP，设备选择eth2（没有的话重新拔插一下），有的固件是usb设备，根据具体情况选择，防火墙设置WAN区域，其他保持默认，保存应用。</p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/v2-e729892c18624b81d036312f9388c5af_1440w.jpg" alt="img"></p><p>▲ 路由器通过USB接口上网，USB网口当做WAN口，随便测个速</p><h2 id="刷机资料下载"><a href="#刷机资料下载" class="headerlink" title="刷机资料下载"></a>刷机资料下载</h2><p><a href="https://www.123865.com/s/9a5rVv-Vp2sH">https://www.123865.com/s/9a5rVv-Vp2sH</a></p><p>提取码:z9Mp</p><p>其他固件下载<br><a href="https://www.right.com.cn/FORUM/thread-8411618-1-1.html">https://www.right.com.cn/FORUM/thread-8411618-1-1.html</a></p><h2 id="文章参考"><a href="#文章参考" class="headerlink" title="文章参考"></a>文章参考</h2><p><a href="https://mao.fan/article/216">https://mao.fan/article/216</a></p><p><a href="https://www.wifilu.com/3592.html">https://www.wifilu.com/3592.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这几个月最火的路由器就是cudy多酷TR3000了，这是一款便携迷你随身路由器，MT7981B方案。Cudy很多人没听过，这是一家正规厂家专门做外贸的，可能是库存压力大，转内销了，不要你399，仅需隔壁MT3000三分之一的价格，让你带回家。我花了差不多150买下了它。&lt;/</summary>
      
    
    
    
    <category term="教程" scheme="https://blog.quickso.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="刷机" scheme="https://blog.quickso.cn/tags/%E5%88%B7%E6%9C%BA/"/>
    
    <category term="Cudy" scheme="https://blog.quickso.cn/tags/Cudy/"/>
    
    <category term="路由器" scheme="https://blog.quickso.cn/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
    <category term="OpenWrt" scheme="https://blog.quickso.cn/tags/OpenWrt/"/>
    
  </entry>
  
  <entry>
    <title>基于Prometheus和Grafana的IPMI/BMC监控系统</title>
    <link href="https://blog.quickso.cn/2025/03/14/%E5%9F%BA%E4%BA%8EPrometheus%E5%92%8CGrafana%E7%9A%84IPMI-BMC%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/"/>
    <id>https://blog.quickso.cn/2025/03/14/%E5%9F%BA%E4%BA%8EPrometheus%E5%92%8CGrafana%E7%9A%84IPMI-BMC%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/</id>
    <published>2025-03-14T13:04:15.000Z</published>
    <updated>2025-05-26T15:06:48.608Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言-环境准备"><a href="#一、前言-环境准备" class="headerlink" title="一、前言&amp;环境准备"></a>一、前言&amp;环境准备</h2><p>服务器BMC&#x2F;IPMI，可以看到硬件的运行情况，比如CPU温度、内存温度、风扇转速、主板电压等，这些数据默认只能通过登录web后台或者ipmitool等接口工具来实时查看，看不到历史曲线图，也做不到监控告警，当服务器出现问题时，除了日志之外，这些物理传感器指标绘制的趋势图更有利于我们判断服务器在历史异常时间点的硬件状态趋势变化情况，或者实时监测指标到达设定的阈值时自动告警。</p><p>prometheus和grafana，前者作为数据采集，后者作为监控展示及告警，缺一不可，这两个组件如何安装非本文重点，本文建立在已安装两个环境之下。</p><p>安装教程可以参考前一篇文章…</p><p>我这里的prometheus和grafana是在VPS上安装的，方便监控多台服务器。</p><p>服务器是一台超微物理服务器，IP是192.168.10.x</p><p>服务器安装了PVE，是基于Debian的</p><h2 id="二、安装ipmi-exporter"><a href="#二、安装ipmi-exporter" class="headerlink" title="二、安装ipmi_exporter"></a>二、安装ipmi_exporter</h2><p>到<a href="https://github.com/prometheus-community/ipmi_exporter/releases">此页面</a>下载对应系统版本的二进制文件，解压即可。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> https://github.com/prometheus-community/ipmi_exporter/releases/download/v1.<span class="hljs-number">10</span>.<span class="hljs-number">0</span>/ipmi_exporter-<span class="hljs-number">1</span>.<span class="hljs-number">10</span>.<span class="hljs-number">0</span>.linux-amd64.tar.gz<br><span class="hljs-attribute">tar</span> xf ipmi_exporter-<span class="hljs-number">1</span>.<span class="hljs-number">10</span>.<span class="hljs-number">0</span>.linux-amd64.tar.gz<br></code></pre></td></tr></table></figure><p>不添加PATH环境变量的情况下，设置一个软链接到PATH路径下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> /opt/ipmi_exporter-1.10.0.linux-amd64 /opt/ipmi_exporter<br><span class="hljs-built_in">ln</span> -sf /opt/ipmi_exporter/ipmi_exporter /usr/local/bin/ipmi_exporter<br></code></pre></td></tr></table></figure><p>验证是否可以成功执行：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ipmi_exporter -h</span><br></code></pre></td></tr></table></figure><h2 id="三、写systemctl服务并安装FreeIPMI"><a href="#三、写systemctl服务并安装FreeIPMI" class="headerlink" title="三、写systemctl服务并安装FreeIPMI"></a>三、写systemctl服务并安装FreeIPMI</h2><h3 id="ipmi-exporter-yaml配置文件"><a href="#ipmi-exporter-yaml配置文件" class="headerlink" title="ipmi_exporter yaml配置文件"></a>ipmi_exporter yaml配置文件</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">vim</span> /<span class="hljs-keyword">opt</span>/ipmi_exporter/ipmi_remote.yml<br></code></pre></td></tr></table></figure><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">modules</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">default</span><span class="hljs-punctuation">:</span><br>                <span class="hljs-comment"># These settings are used if no module is specified, the</span><br>                <span class="hljs-comment"># specified module doesn&#x27;t exist, or of course if</span><br>                <span class="hljs-comment"># module=default is specified.</span><br>                <span class="hljs-attribute">user</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ADMIN&quot;     # 无特殊需求，填写这两行账号密码即可，IPMI用户名</span><br>                <span class="hljs-attribute">pass</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;PASSWORD&quot;  # 无特殊需求，填写这两行账号密码即可，IPMI密码</span><br>                <span class="hljs-comment"># The below settings correspond to driver-type, privilege-level, and</span><br>                <span class="hljs-comment"># session-timeout respectively, see `man 5 freeipmi.conf` (and e.g.</span><br>                <span class="hljs-comment"># `man 8 ipmi-sensors` for a list of driver types).</span><br>                <span class="hljs-attribute">driver</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;LAN_2_0&quot;</span><br>                <span class="hljs-attribute">privilege</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;user&quot;</span><br>                <span class="hljs-comment"># The session timeout is in milliseconds. Note that a scrape can take up</span><br>                <span class="hljs-comment"># to (session-timeout * #-of-collectors) milliseconds, so set the scrape</span><br>                <span class="hljs-comment"># timeout in Prometheus accordingly.</span><br>                <span class="hljs-comment"># Must be larger than the retransmission timeout, which defaults to 1000.</span><br>                <span class="hljs-attribute">timeout</span><span class="hljs-punctuation">:</span> <span class="hljs-string">10000</span><br>                <span class="hljs-comment"># Available collectors are bmc, bmc-watchdog, ipmi, chassis, dcmi, sel,</span><br>                <span class="hljs-comment"># and sm-lan-mode</span><br>                <span class="hljs-comment"># If _not_ specified, bmc, ipmi, chassis, and dcmi are used</span><br>                <span class="hljs-attribute">collectors</span><span class="hljs-punctuation">:</span><br>                <span class="hljs-bullet">-</span> <span class="hljs-string">bmc</span><br>                <span class="hljs-bullet">-</span> <span class="hljs-string">ipmi</span><br>                <span class="hljs-bullet">-</span> <span class="hljs-string">chassis</span><br>                <span class="hljs-comment"># Got any sensors you don&#x27;t care about? Add them here.</span><br>                <span class="hljs-attribute">exclude_sensor_ids</span><span class="hljs-punctuation">:</span><br>                <span class="hljs-bullet">-</span> <span class="hljs-string">2</span><br>                <span class="hljs-bullet">-</span> <span class="hljs-string">29</span><br>                <span class="hljs-bullet">-</span> <span class="hljs-string">32</span><br>                <span class="hljs-bullet">-</span> <span class="hljs-string">50</span><br>                <span class="hljs-bullet">-</span> <span class="hljs-string">52</span><br>                <span class="hljs-bullet">-</span> <span class="hljs-string">55</span><br>        <span class="hljs-attribute">dcmi</span><span class="hljs-punctuation">:</span><br>                <span class="hljs-comment"># Use these settings when scraped with module=dcmi.</span><br>                <span class="hljs-attribute">user</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;admin_user&quot;</span><br>                <span class="hljs-attribute">pass</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;another_pw&quot;</span><br>                <span class="hljs-attribute">privilege</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;admin&quot;</span><br>                <span class="hljs-attribute">driver</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;LAN_2_0&quot;</span><br>                <span class="hljs-attribute">collectors</span><span class="hljs-punctuation">:</span><br>                <span class="hljs-bullet">-</span> <span class="hljs-string">dcmi</span><br>        <span class="hljs-attribute">thatspecialhost</span><span class="hljs-punctuation">:</span><br>                <span class="hljs-comment"># Use these settings when scraped with module=thatspecialhost.</span><br>                <span class="hljs-attribute">user</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;some_user&quot;</span><br>                <span class="hljs-attribute">pass</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;secret_pw&quot;</span><br>                <span class="hljs-attribute">privilege</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;admin&quot;</span><br>                <span class="hljs-attribute">driver</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;LAN&quot;</span><br>                <span class="hljs-attribute">collectors</span><span class="hljs-punctuation">:</span><br>                <span class="hljs-bullet">-</span> <span class="hljs-string">ipmi</span><br>                <span class="hljs-bullet">-</span> <span class="hljs-string">sel</span><br>                <span class="hljs-comment"># Need any special workaround flags set? Add them here.</span><br>                <span class="hljs-comment"># Workaround flags might be needed to address issues with specific vendor implementations</span><br>                <span class="hljs-comment"># e.g. https://www.gnu.org/software/freeipmi/freeipmi-faq.html#Why-is-the-output-from-FreeIPMI-different-than-another-software_003f</span><br>                <span class="hljs-comment"># For a full list of flags, refer to:</span><br>                <span class="hljs-comment"># https://www.gnu.org/software/freeipmi/manpages/man8/ipmi-sensors.8.html#lbAL</span><br>                <span class="hljs-attribute">workaround_flags</span><span class="hljs-punctuation">:</span><br>                <span class="hljs-bullet">-</span> <span class="hljs-string">discretereading</span><br>                <span class="hljs-comment"># If you require additional command line arguments (e.g. --bridge-sensors for ipmimonitoring),</span><br>                <span class="hljs-comment"># you can specify them per collector - BE CAREFUL, you can easily break the exporter with this!</span><br>                <span class="hljs-attribute">custom_args</span><span class="hljs-punctuation">:</span><br>                        <span class="hljs-attribute">ipmi</span><span class="hljs-punctuation">:</span><br>                        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;--bridge-sensors&quot;</span><br>        <span class="hljs-attribute">advanced</span><span class="hljs-punctuation">:</span><br>                <span class="hljs-comment"># Use these settings when scraped with module=advanced.</span><br>                <span class="hljs-attribute">user</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;some_user&quot;</span><br>                <span class="hljs-attribute">pass</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;secret_pw&quot;</span><br>                <span class="hljs-attribute">privilege</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;admin&quot;</span><br>                <span class="hljs-attribute">driver</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;LAN&quot;</span><br>                <span class="hljs-attribute">collectors</span><span class="hljs-punctuation">:</span><br>                <span class="hljs-bullet">-</span> <span class="hljs-string">ipmi</span><br>                <span class="hljs-bullet">-</span> <span class="hljs-string">sel</span><br>                <span class="hljs-comment"># USING ANY OF THE BELOW VOIDS YOUR WARRANTY! YOU MAY GET BITTEN BY SHARKS!</span><br>                <span class="hljs-comment"># You can override the command to be executed for a collector. Paired with</span><br>                <span class="hljs-comment"># custom_args, this can be used to e.g. execute the IPMI tools with sudo:</span><br>                <span class="hljs-attribute">collector_cmd</span><span class="hljs-punctuation">:</span><br>                        <span class="hljs-attribute">ipmi</span><span class="hljs-punctuation">:</span> <span class="hljs-string">sudo</span><br>                        <span class="hljs-attribute">sel</span><span class="hljs-punctuation">:</span> <span class="hljs-string">sudo</span><br>                <span class="hljs-attribute">custom_args</span><span class="hljs-punctuation">:</span><br>                        <span class="hljs-attribute">ipmi</span><span class="hljs-punctuation">:</span><br>                        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;ipmimonitoring&quot;</span><br>                        <span class="hljs-attribute">sel</span><span class="hljs-punctuation">:</span><br>                        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;ipmi-sel&quot;</span><br></code></pre></td></tr></table></figure><p>编辑服务文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/</span>systemd<span class="hljs-regexp">/system/i</span>pmi_exporter.service<br></code></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Unit]</span><br><span class="hljs-attr">Description</span>=IPMI Exporter<br><span class="hljs-attr">Wants</span>=network-<span class="hljs-literal">on</span>line.target<br><span class="hljs-attr">After</span>=network-<span class="hljs-literal">on</span>line.target<br><span class="hljs-section">[Service]</span><br><span class="hljs-attr">User</span>=root<br><span class="hljs-attr">Group</span>=root<br><span class="hljs-attr">Type</span>=simple<br><span class="hljs-attr">ExecStart</span>=/usr/local/bin/ipmi_exporter --config.file=/opt/ipmi_exporter/ipmi_remote.yml<br><span class="hljs-section">[Install]</span><br><span class="hljs-attr">WantedBy</span>=multi-user.target<br></code></pre></td></tr></table></figure><p>重载并启动服务：</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-title">systemctl</span> daemon-reload<br><span class="hljs-title">systemctl</span> enable ipmi_exporter <span class="hljs-comment">--now</span><br></code></pre></td></tr></table></figure><p>验证服务已运行成功，并且没有报错：</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-title">journalctl</span> -u ipmi_exporter.service -f<br></code></pre></td></tr></table></figure><h3 id="安装FreeIPMI"><a href="#安装FreeIPMI" class="headerlink" title="安装FreeIPMI"></a>安装FreeIPMI</h3><p>安装FreeIPMI即可。</p><table><thead><tr><th align="left">发行版</th><th align="left">安装命令</th></tr></thead><tbody><tr><td align="left">Archlinux</td><td align="left">pacman -Sy extra&#x2F;freeipmi</td></tr><tr><td align="left">Centos&#x2F;Redhat</td><td align="left">yum install freeipmi -y</td></tr><tr><td align="left">Debian&#x2F;Ubuntu</td><td align="left">apt install freeipmi -y</td></tr><tr><td align="left">Gentoo</td><td align="left">emerge –ask freeipmi</td></tr></tbody></table><h2 id="四、配置Prometheus并验证metrics"><a href="#四、配置Prometheus并验证metrics" class="headerlink" title="四、配置Prometheus并验证metrics"></a>四、配置Prometheus并验证metrics</h2><h3 id="1-配置ipmi-targets"><a href="#1-配置ipmi-targets" class="headerlink" title="1.配置ipmi_targets"></a>1.配置ipmi_targets</h3><p>写一个targets文件，填写需要监控的ipmi的IP（不是服务器上安装的系统IP）：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/prometheus/i</span>pmi_targets.yml <br></code></pre></td></tr></table></figure><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-bullet">-</span> <span class="hljs-string">targets:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">xx.xx.xx.xx # 被监控的IPMI IP</span><br>  <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">job</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ipmi_exporter</span><br></code></pre></td></tr></table></figure><h3 id="2-配置prometheus"><a href="#2-配置prometheus" class="headerlink" title="2.配置prometheus"></a>2.配置prometheus</h3><p>在prometheus主配置文件里追加以下ipmi_exporter的任务，prometheus将收集来自ipmi_exporter服务主机的metrics数据：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/prometheus/</span>prometheus.yml<br></code></pre></td></tr></table></figure><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-bullet">-</span> <span class="hljs-string">job_name: ipmi_exporter</span><br>    <span class="hljs-attribute">params</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">module</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[&#x27;default&#x27;]</span><br>    <span class="hljs-attribute">scrape_interval</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1m</span><br>    <span class="hljs-attribute">scrape_timeout</span><span class="hljs-punctuation">:</span> <span class="hljs-string">30s</span><br>    <span class="hljs-attribute">metrics_path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/ipmi</span><br>    <span class="hljs-attribute">scheme</span><span class="hljs-punctuation">:</span> <span class="hljs-string">http</span><br>    <span class="hljs-attribute">file_sd_configs</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">files:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/etc/prometheus/ipmi_targets.yml</span><br>      <span class="hljs-attribute">refresh_interval</span><span class="hljs-punctuation">:</span> <span class="hljs-string">5m</span><br>    <span class="hljs-attribute">relabel_configs</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">source_labels: [__address__]</span><br>      <span class="hljs-attribute">separator</span><span class="hljs-punctuation">:</span> <span class="hljs-string">;</span><br>      <span class="hljs-attribute">regex</span><span class="hljs-punctuation">:</span> <span class="hljs-string">(.*)</span><br>      <span class="hljs-attribute">target_label</span><span class="hljs-punctuation">:</span> <span class="hljs-string">__param_target</span><br>      <span class="hljs-attribute">replacement</span><span class="hljs-punctuation">:</span> <span class="hljs-string">$&#123;1&#125;</span><br>      <span class="hljs-attribute">action</span><span class="hljs-punctuation">:</span> <span class="hljs-string">replace</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">source_labels: [__param_target]</span><br>      <span class="hljs-attribute">separator</span><span class="hljs-punctuation">:</span> <span class="hljs-string">;</span><br>      <span class="hljs-attribute">regex</span><span class="hljs-punctuation">:</span> <span class="hljs-string">(.*)</span><br>      <span class="hljs-attribute">target_label</span><span class="hljs-punctuation">:</span> <span class="hljs-string">instance</span><br>      <span class="hljs-attribute">replacement</span><span class="hljs-punctuation">:</span> <span class="hljs-string">$&#123;1&#125;</span><br>      <span class="hljs-attribute">action</span><span class="hljs-punctuation">:</span> <span class="hljs-string">replace</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">separator: ;</span><br>      <span class="hljs-attribute">regex</span><span class="hljs-punctuation">:</span> <span class="hljs-string">.*</span><br>      <span class="hljs-attribute">target_label</span><span class="hljs-punctuation">:</span> <span class="hljs-string">__address__</span><br>      <span class="hljs-attribute">replacement</span><span class="hljs-punctuation">:</span> <span class="hljs-string">xx.xx.xx.xx:9290 # 这里写ipmi_exporter服务所在的系统IP，不是IPMIIP，我这里使用了tailscale分配的IP</span><br>      <span class="hljs-attribute">action</span><span class="hljs-punctuation">:</span> <span class="hljs-string">replace</span><br></code></pre></td></tr></table></figure><p>之后重启prometheus服务</p><h3 id="3-验证metrics数据收集情况"><a href="#3-验证metrics数据收集情况" class="headerlink" title="3.验证metrics数据收集情况"></a>3.验证metrics数据收集情况</h3><p>此时到Prometheus的web页面，找到我们添加的ipmi_exporter任务，确保已经UP</p><p>Endpoint链接点进去可以看到ipmi_exporter收集的metrics原始数据</p><h2 id="五、配置grafana监控面板"><a href="#五、配置grafana监控面板" class="headerlink" title="五、配置grafana监控面板"></a>五、配置grafana监控面板</h2><h3 id="导入监控模板"><a href="#导入监控模板" class="headerlink" title="导入监控模板"></a>导入监控模板</h3><p>获取到metric数据后，最后一步则将这些数据通过监控图的方式展示出来，这里采用模板方式进行导入。</p><p>在Grafana主面板中，点击<strong>导入</strong>选项</p><p>填写ID为15765，之后点击<strong>Load</strong>：</p><p>数据源选择Prometheus</p><p>就可以了，可以根据自己的实际情况修改模板</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、前言-环境准备&quot;&gt;&lt;a href=&quot;#一、前言-环境准备&quot; class=&quot;headerlink&quot; title=&quot;一、前言&amp;amp;环境准备&quot;&gt;&lt;/a&gt;一、前言&amp;amp;环境准备&lt;/h2&gt;&lt;p&gt;服务器BMC&amp;#x2F;IPMI，可以看到硬件的运行情况，比如CPU</summary>
      
    
    
    
    <category term="教程" scheme="https://blog.quickso.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Prometheus" scheme="https://blog.quickso.cn/tags/Prometheus/"/>
    
    <category term="Grafana" scheme="https://blog.quickso.cn/tags/Grafana/"/>
    
    <category term="IPMI" scheme="https://blog.quickso.cn/tags/IPMI/"/>
    
    <category term="BMC" scheme="https://blog.quickso.cn/tags/BMC/"/>
    
  </entry>
  
  <entry>
    <title>服务器多节点docker部署Grafana、Prometheus、Node-Exporter、alertmanager、prometheus-alert并对接飞书通知</title>
    <link href="https://blog.quickso.cn/2025/03/14/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%A4%9A%E8%8A%82%E7%82%B9Docker%E9%83%A8%E7%BD%B2Grafana%E3%80%81Prometheus%E3%80%81Node-Exporter%E3%80%81alertmanager%E3%80%81prometheus-alert%E5%B9%B6%E5%AF%B9%E6%8E%A5%E9%A3%9E%E4%B9%A6%E9%80%9A%E7%9F%A5/"/>
    <id>https://blog.quickso.cn/2025/03/14/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%A4%9A%E8%8A%82%E7%82%B9Docker%E9%83%A8%E7%BD%B2Grafana%E3%80%81Prometheus%E3%80%81Node-Exporter%E3%80%81alertmanager%E3%80%81prometheus-alert%E5%B9%B6%E5%AF%B9%E6%8E%A5%E9%A3%9E%E4%B9%A6%E9%80%9A%E7%9F%A5/</id>
    <published>2025-03-14T12:58:56.000Z</published>
    <updated>2025-07-26T13:08:23.975Z</updated>
    
    <content type="html"><![CDATA[<p>要在多台服务器上部署 Grafana、Prometheus 和 Node-Exporter，并且其中一台服务器专门用于 Grafana 和 Prometheus 的部署</p><h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h3><ul><li><strong>服务器信息</strong>：<ul><li><strong>Server 1</strong>：用于部署 Grafana 和 Prometheus、alertmanager、prometheus-alert</li><li><strong>Server 2-n</strong>：用于部署 Node-Exporter。</li></ul></li><li><strong>Docker</strong>：确保所有服务器上已安装 Docker 和 Docker Compose。</li></ul><p><a href="https://getdocker.quickso.cn/">https://getdocker.quickso.cn/</a></p><h3 id="2-在-Server-1-上部署-Grafana-和-Prometheus等"><a href="#2-在-Server-1-上部署-Grafana-和-Prometheus等" class="headerlink" title="2. 在 Server 1 上部署 Grafana 和 Prometheus等"></a>2. 在 Server 1 上部署 Grafana 和 Prometheus等</h3><h4 id="2-1-创建-Docker-Compose-文件"><a href="#2-1-创建-Docker-Compose-文件" class="headerlink" title="2.1 创建 Docker Compose 文件"></a>2.1 创建 Docker Compose 文件</h4><p>在 Server 1 上创建一个 <code>docker-compose.yml</code> 文件，内容如下：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-symbol">services:</span><br><span class="hljs-symbol">  prometheus:</span><br><span class="hljs-symbol">    image:</span> prom/prometheus<br><span class="hljs-symbol">    container_name:</span> prometheus<br><span class="hljs-symbol">    ports:</span><br>      - <span class="hljs-string">&quot;9090:9090&quot;</span><br><span class="hljs-symbol">    volumes:</span><br>      - /root/Prometheus/<span class="hljs-meta">data</span>/prometheus.yml:/etc/prometheus/prometheus.yml<br>      -  /root/Prometheus/<span class="hljs-meta">data</span>/alerts.yml:/etc/prometheus/alerts.yml<br><span class="hljs-symbol">    command:</span><br>      - <span class="hljs-string">&#x27;--config.file=/etc/prometheus/prometheus.yml&#x27;</span><br>      - <span class="hljs-string">&#x27;--web.enable-lifecycle&#x27;</span><br><span class="hljs-symbol">    restart:</span> always<br><br><span class="hljs-symbol">  grafana:</span><br><span class="hljs-symbol">    image:</span> grafana/grafana<br><span class="hljs-symbol">    container_name:</span> grafana<br><span class="hljs-symbol">    ports:</span><br>      - <span class="hljs-string">&quot;3000:3000&quot;</span><br><span class="hljs-symbol">    volumes:</span><br>      - grafana-storage:/var/lib/grafana<br><span class="hljs-symbol">    environment:</span><br>      - GF_SECURITY_ADMIN_PASSWORD<span class="hljs-symbol">=admin</span> #这里可以改成你的密码<br><span class="hljs-symbol">    restart:</span> always<br><br>  node-exporter:<br><span class="hljs-symbol">    image:</span> prom/node-exporter<br><span class="hljs-symbol">    container_name:</span> node-exporter<br><span class="hljs-symbol">    ports:</span><br>      - <span class="hljs-string">&quot;9100:9100&quot;</span><br><span class="hljs-symbol">    restart:</span> always<br><br><span class="hljs-symbol">  alertmanager:</span><br><span class="hljs-symbol">    image:</span> prom/alertmanager<br><span class="hljs-symbol">    container_name:</span> alertmanager<br><span class="hljs-symbol">    ports:</span><br>      - <span class="hljs-string">&quot;9093:9093&quot;</span><br><span class="hljs-symbol">    volumes:</span><br>      - /root/Prometheus/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml<br><span class="hljs-symbol">    command:</span><br>      - <span class="hljs-string">&#x27;--config.file=/etc/alertmanager/alertmanager.yml&#x27;</span><br><span class="hljs-symbol">    restart:</span> always<br>    <br>  prometheus-alert:<br><span class="hljs-symbol">    image:</span> feiyu563/prometheus-alert:<span class="hljs-built_in">v4</span>.<span class="hljs-number">9</span>.<span class="hljs-number">1</span><br><span class="hljs-symbol">    container_name:</span> prometheus-alert<br><span class="hljs-symbol">    ports:</span><br>      - <span class="hljs-string">&quot;8080:8080&quot;</span><br><span class="hljs-symbol">    volumes:</span><br>      - /root/Prometheus/prometheus-alert/app.conf:/app/conf/app.conf<br><span class="hljs-symbol">    restart:</span> always<br><br><span class="hljs-symbol">volumes:</span><br>  grafana-storage:<br></code></pre></td></tr></table></figure><h4 id="2-2-创建-配置文件"><a href="#2-2-创建-配置文件" class="headerlink" title="2.2 创建 配置文件"></a>2.2 创建 配置文件</h4><p>在 Server 1 上创建一个 <code>prometheus.yml</code> 文件，内容如下：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">global:</span><br><span class="hljs-symbol">  scrape_interval:</span> <span class="hljs-number">15</span>s<br><span class="hljs-symbol">  evaluation_interval:</span> <span class="hljs-number">15</span>s<br><br><span class="hljs-symbol">alerting:</span><br><span class="hljs-symbol">  alertmanagers:</span><br>    - static_configs:<br>        - targets: [<span class="hljs-string">&#x27;alertmanager:9093&#x27;</span>]<br><br><span class="hljs-symbol">rule_files:</span><br>  - /etc/prometheus/alerts.yml<br><br><span class="hljs-symbol">scrape_configs:</span><br>  - job_name: <span class="hljs-string">&#x27;node-exporter&#x27;</span><br><span class="hljs-symbol">    static_configs:</span><br>      - targets: [<span class="hljs-string">&#x27;server2:9100&#x27;</span>, <span class="hljs-string">&#x27;server3:9100&#x27;</span>, <span class="hljs-string">&#x27;server4:9100&#x27;</span>, <span class="hljs-string">&#x27;server5:9100&#x27;</span>, <span class="hljs-string">&#x27;server6:9100&#x27;</span>]<br></code></pre></td></tr></table></figure><h4 id="alerts-yml"><a href="#alerts-yml" class="headerlink" title="alerts.yml"></a>alerts.yml</h4><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">groups:</span><br>- name: alerts<br><span class="hljs-symbol">  rules:</span><br>  - alert: 实例宕机<br><span class="hljs-symbol">    expr:</span> up == <span class="hljs-number">0</span><br><span class="hljs-symbol">    for:</span> <span class="hljs-number">1</span>m<br><span class="hljs-symbol">    labels:</span><br><span class="hljs-symbol">      severity:</span> 严重<br><span class="hljs-symbol">    annotations:</span><br><span class="hljs-symbol">      summary:</span> <span class="hljs-string">&quot;实例 &#123;&#123; $labels.instance &#125;&#125; 宕机&quot;</span><br><span class="hljs-symbol">      description:</span> <span class="hljs-string">&quot;实例 &#123;&#123; $labels.instance &#125;&#125; 已经宕机超过 1 分钟。&quot;</span><br><br>  - alert: CPU使用率过高<br><span class="hljs-symbol">    expr:</span> <span class="hljs-number">100</span> - (avg by (instance) (irate(node_cpu_seconds_total&#123;mode=<span class="hljs-string">&quot;idle&quot;</span>&#125;[<span class="hljs-number">1</span>m])) * <span class="hljs-number">100</span>) &gt; <span class="hljs-number">30</span><br><span class="hljs-symbol">    for:</span> <span class="hljs-number">5</span>m<br><span class="hljs-symbol">    labels:</span><br><span class="hljs-symbol">      severity:</span> 警告<br><span class="hljs-symbol">    annotations:</span><br><span class="hljs-symbol">      summary:</span> <span class="hljs-string">&quot;实例 &#123;&#123; $labels.instance &#125;&#125; 的 CPU 使用率过高&quot;</span><br><span class="hljs-symbol">      description:</span> <span class="hljs-string">&quot;实例 &#123;&#123; $labels.instance &#125;&#125; 的 CPU 使用率超过 30% 已经持续 5 分钟。&quot;</span><br><br>  - alert: 内存使用率过高<br><span class="hljs-symbol">    expr:</span> (node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes) / node_memory_MemTotal_bytes * <span class="hljs-number">100</span> &gt; <span class="hljs-number">80</span><br><span class="hljs-symbol">    for:</span> <span class="hljs-number">5</span>m<br><span class="hljs-symbol">    labels:</span><br><span class="hljs-symbol">      severity:</span> 警告<br><span class="hljs-symbol">    annotations:</span><br><span class="hljs-symbol">      summary:</span> <span class="hljs-string">&quot;实例 &#123;&#123; $labels.instance &#125;&#125; 的内存使用率过高&quot;</span><br><span class="hljs-symbol">      description:</span> <span class="hljs-string">&quot;实例 &#123;&#123; $labels.instance &#125;&#125; 的内存使用率超过 80% 已经持续 5 分钟。&quot;</span><br></code></pre></td></tr></table></figure><h4 id="alertmanager-yml"><a href="#alertmanager-yml" class="headerlink" title="alertmanager.yml"></a>alertmanager.yml</h4><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">global:</span><br><span class="hljs-symbol">  resolve_timeout:</span> <span class="hljs-number">5</span>m<br><br><span class="hljs-symbol">route:</span><br><span class="hljs-symbol">  receiver:</span> <span class="hljs-string">&#x27;feishu-webhook&#x27;</span><br><span class="hljs-symbol">  group_by:</span> [<span class="hljs-string">&#x27;alertname&#x27;</span>]<br><span class="hljs-symbol">  group_wait:</span> <span class="hljs-number">10</span>s<br><span class="hljs-symbol">  group_interval:</span> <span class="hljs-number">5</span>m<br><span class="hljs-symbol">  repeat_interval:</span> <span class="hljs-number">3</span>h<br><br><span class="hljs-symbol">receivers:</span><br>  - name: <span class="hljs-string">&#x27;feishu-webhook&#x27;</span><br><span class="hljs-symbol">    webhook_configs:</span><br>      - url: <span class="hljs-string">&#x27;http://你的IP:8080/prometheusalert?type=fs&amp;tpl=prometheus-fs&amp;fsurl=https://open.feishu.cn/open-apis/bot/v2/hook/xxx&#x27;</span><br><span class="hljs-symbol">        send_resolved:</span> true<br></code></pre></td></tr></table></figure><h4 id="2-3-启动服务"><a href="#2-3-启动服务" class="headerlink" title="2.3 启动服务"></a>2.3 启动服务</h4><p>在 Server 1 上运行以下命令启动：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">docker</span>-compose up -d<br></code></pre></td></tr></table></figure><h3 id="3-在-Server-2-n-上部署-Node-Exporter，并开放端口"><a href="#3-在-Server-2-n-上部署-Node-Exporter，并开放端口" class="headerlink" title="3.在 Server 2-n 上部署 Node-Exporter，并开放端口"></a>3.在 Server 2-n 上部署 Node-Exporter，并开放端口</h3><h4 id="Docker方式"><a href="#Docker方式" class="headerlink" title="Docker方式"></a>Docker方式</h4><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">docker</span> run -d \<br>  --name node-exporter \<br>  -p <span class="hljs-number">9100</span>:<span class="hljs-number">9100</span> \<br>  --restart always \<br>  prom/node-exporter<br></code></pre></td></tr></table></figure><h4 id="二进制（Debian）"><a href="#二进制（Debian）" class="headerlink" title="二进制（Debian）"></a>二进制（Debian）</h4> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt install prometheus-node-exporter<br></code></pre></td></tr></table></figure><h3 id="4-配置-Grafana"><a href="#4-配置-Grafana" class="headerlink" title="4. 配置 Grafana"></a>4. 配置 Grafana</h3><h4 id="4-1-访问-Grafana"><a href="#4-1-访问-Grafana" class="headerlink" title="4.1 访问 Grafana"></a>4.1 访问 Grafana</h4><p>在浏览器中访问 <code>http://&lt;Server1-IP&gt;:3000</code>，使用默认用户名 <code>admin</code> 和密码 <code>admin</code> 登录。</p><h4 id="4-2-添加-Prometheus-数据源"><a href="#4-2-添加-Prometheus-数据源" class="headerlink" title="4.2 添加 Prometheus 数据源"></a>4.2 添加 Prometheus 数据源</h4><h4 id="在-Grafana-中，点击左侧菜单的-Configuration-Data-Sources。"><a href="#在-Grafana-中，点击左侧菜单的-Configuration-Data-Sources。" class="headerlink" title="在 Grafana 中，点击左侧菜单的 Configuration -&gt; Data Sources。"></a>在 Grafana 中，点击左侧菜单的 <strong>Configuration</strong> -&gt; <strong>Data Sources</strong>。</h4><ol><li>点击 <strong>Add data source</strong>，选择 <strong>Prometheus</strong>。</li><li>在 <strong>URL</strong> 字段中输入 <code>http://prometheus:9090</code>，然后点击 <strong>Save &amp; Test</strong>。</li></ol><h4 id="4-3-导入-Node-Exporter-仪表盘"><a href="#4-3-导入-Node-Exporter-仪表盘" class="headerlink" title="4.3 导入 Node-Exporter 仪表盘"></a>4.3 导入 Node-Exporter 仪表盘</h4><h4 id="在-Grafana-中，点击左侧菜单的-Import。"><a href="#在-Grafana-中，点击左侧菜单的-Import。" class="headerlink" title="在 Grafana 中，点击左侧菜单的 + -&gt; Import。"></a>在 Grafana 中，点击左侧菜单的 <strong>+</strong> -&gt; <strong>Import</strong>。</h4><ol><li>在 <strong>Grafana.com Dashboard</strong> 字段中输入 <code>1860</code>，然后点击 <strong>Load</strong>。</li><li>选择 Prometheus 数据源，然后点击 <strong>Import</strong>。</li></ol><hr><h3 id="4-验证部署"><a href="#4-验证部署" class="headerlink" title="4. 验证部署"></a>4. 验证部署</h3><ul><li><strong>Prometheus</strong>：访问 <code>http://&lt;Server1-IP&gt;:9090/targets</code>，确保所有 <code>Node-Exporter</code> 目标（包括 <code>Server 1</code>）的状态为 <strong>UP</strong>。</li><li><strong>Grafana</strong>：访问 <code>http://&lt;Server1-IP&gt;:3000</code>，查看仪表盘是否显示所有服务器的监控数据。</li><li><strong>Alertmanager:</strong> 访问 <code>http://&lt;Server1-IP&gt;:9093</code>，告警管理组件，负责处理、分组、抑制和发送告警通知。</li><li><strong>Prometheus-Alert</strong> :访问 <code>http://&lt;Server1-IP&gt;:8080</code>，开源的运维告警中心消息转发系统，以及所有支持WebHook接口的系统发出的预警消息，支持将收到的这些消息发送到国内的各种平台</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;要在多台服务器上部署 Grafana、Prometheus 和 Node-Exporter，并且其中一台服务器专门用于 Grafana 和 Prometheus 的部署&lt;/p&gt;
&lt;h3 id=&quot;1-准备工作&quot;&gt;&lt;a href=&quot;#1-准备工作&quot; class=&quot;headerl</summary>
      
    
    
    
    <category term="教程" scheme="https://blog.quickso.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Prometheus" scheme="https://blog.quickso.cn/tags/Prometheus/"/>
    
    <category term="Grafana" scheme="https://blog.quickso.cn/tags/Grafana/"/>
    
    <category term="Node-Exporter" scheme="https://blog.quickso.cn/tags/Node-Exporter/"/>
    
  </entry>
  
  <entry>
    <title>年轻人的第一台服务器——SuperMicro SuperServer5018D-MF+X10SLL-F主板使用体验</title>
    <link href="https://blog.quickso.cn/2025/03/09/%E5%B9%B4%E8%BD%BB%E4%BA%BA%E7%9A%84%E7%AC%AC%E4%B8%80%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E2%80%94%E2%80%94SuperMicroSuperServer5018D-MF+X10SLL-F%E4%B8%BB%E6%9D%BF%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/"/>
    <id>https://blog.quickso.cn/2025/03/09/%E5%B9%B4%E8%BD%BB%E4%BA%BA%E7%9A%84%E7%AC%AC%E4%B8%80%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E2%80%94%E2%80%94SuperMicroSuperServer5018D-MF+X10SLL-F%E4%B8%BB%E6%9D%BF%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/</id>
    <published>2025-03-09T13:37:04.000Z</published>
    <updated>2025-05-26T15:06:48.611Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在咸鱼上淘了一台1U半高服务器回来，型号为SuperMicro（超微） SuperServer5018D-MF+X10SLL-F主板</p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/4928f53d821cf8c16ab7b25cafc79c6.jpg" alt="4928f53d821cf8c16ab7b25cafc79c6"></p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/6a23b393828ac15cd89a9152c982551.jpg" alt="6a23b393828ac15cd89a9152c982551"></p><p>参数如下:</p><table><thead><tr><th align="left"><strong>特性</strong></th><th align="left"><strong>详细信息</strong></th></tr></thead><tbody><tr><td align="left"><strong>处理器支持</strong></td><td align="left">Intel® Xeon® E3-1200 v3&#x2F;v4, 4th Gen Core i3, Pentium, Celeron</td></tr><tr><td align="left"><strong>芯片组</strong></td><td align="left">Intel® C222 Express PCH</td></tr><tr><td align="left"><strong>内存支持</strong></td><td align="left">最高 32GB DDR3 ECC 1600MHz UDIMMs，4个插槽</td></tr><tr><td align="left"><strong>网络接口</strong></td><td align="left">双千兆以太网端口 (1 Intel® i217LM &amp; 1 Intel® i210AT)</td></tr><tr><td align="left"><strong>存储接口</strong></td><td align="left">2个 SATA 6Gbps，4个 SATA 3Gbps</td></tr><tr><td align="left"><strong>扩展插槽</strong></td><td align="left">1个 PCI-E 3.0 x8 (in x16)，1个 PCI-E 3.0 x8，1个 PCI-E 2.0 x4 (in x8)</td></tr><tr><td align="left"><strong>USB 接口</strong></td><td align="left">2个 USB 3.0 (1 Type-A + 1 via header)，6个 USB 2.0 (4 rear + 2 via header)</td></tr><tr><td align="left"><strong>管理功能</strong></td><td align="left">集成 IPMI 2.0 支持 KVM 和专用 LAN</td></tr><tr><td align="left"><strong>其他特性</strong></td><td align="left">SATA DOM 电源连接器支持</td></tr></tbody></table><p>主板长这个样子</p><p><img src="https://www.supermicro.com/CDS_Image/uploads/imagecache/600px_wide/intel_motherboard_active/x10sll-fs.jpg" alt="Supermicro Motherboard Xeon Boards X10SLL-F"></p><h2 id="官方资料："><a href="#官方资料：" class="headerlink" title="官方资料："></a>官方资料：</h2><p>服务器介绍页：<a href="https://www.supermicro.org.cn/en/products/system/1u/5018/SYS-5018D-MF.cfm">5018D-MF | 1U | SuperServers | Products | Super Micro Computer, Inc</a></p><p>主板介绍页:<a href="https://www.supermicro.org.cn/zh_cn/products/motherboard/X10SLL-F">X10SLL-F | Motherboards | Products | Super Micro Computer, Inc.</a></p><h2 id="为什么要买它呢？"><a href="#为什么要买它呢？" class="headerlink" title="为什么要买它呢？"></a>为什么要买它呢？</h2><p>主要还是为了体验它的IPMI</p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/5746c1e472bc72f8322ff20744907fe.jpg" alt="默认账号密码都是ADMIN"></p><p>它的IPMI支持中文和Java iKVM&#x2F;HTML5 控制（更新最新BMC固件）</p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/image-20250309215527588.png" alt="image-20250309215527588"></p><h2 id="IPMI的使用"><a href="#IPMI的使用" class="headerlink" title="IPMI的使用"></a>IPMI的使用</h2><p>这里讲一下IPMI的使用</p><blockquote><p>IPMI（Intelligent Platform Management Interface，智能平台管理接口）是一种基于硬件的远程服务器管理标准，其核心组件是 <strong>BMC（Baseboard Management Controller，基板管理控制器）</strong>。BMC 是一个独立于服务器主系统的微控制器，直接嵌入在服务器主板上，通过专用网络接口（带外管理）提供对服务器的底层硬件控制与监控功能。</p><h3 id="IPMI-的核心功能"><a href="#IPMI-的核心功能" class="headerlink" title="IPMI 的核心功能"></a>IPMI 的核心功能</h3><ol><li><strong>带外管理（Out-of-Band Management）</strong><br>不依赖服务器操作系统和常规网络，通过独立的管理网络（如专用 IPMI&#x2F;BMC 网口）实现远程管理，即使服务器宕机或操作系统崩溃仍可操作。</li><li><strong>电源控制</strong><br>远程开关机、强制重启、断电等操作，无需物理接触设备。</li><li><strong>系统安装与维护</strong><br>挂载虚拟光驱（ISO 镜像）远程安装操作系统，或通过控制台重装&#x2F;修复系统。</li><li><strong>硬件监控</strong><br>实时监控 CPU 温度、风扇转速、电源状态、硬盘健康等硬件指标，触发告警或自动保护措施（如过热关机）。</li><li><strong>日志与故障诊断</strong><br>访问系统事件日志（SEL）、硬件错误日志，辅助定位故障原因。</li><li><strong>KVM over IP</strong><br>提供远程键盘、视频、鼠标控制，直接操作服务器 BIOS 或操作系统界面。</li></ol><hr><h3 id="BMC-的作用"><a href="#BMC-的作用" class="headerlink" title="BMC 的作用"></a>BMC 的作用</h3><ul><li><strong>IPMI 的硬件实现</strong>：BMC 是 IPMI 标准的物理载体，负责执行 IPMI 指令。</li><li><strong>独立运行</strong>：即使服务器断电，BMC 仍可通过备用电源（如 PSU 待机电源）保持运行。</li><li><strong>安全通信</strong>：支持用户权限管理、SSL&#x2F;TLS 加密、IP 过滤等功能，保障管理通道安全。</li></ul><hr><h3 id="厂商实现差异"><a href="#厂商实现差异" class="headerlink" title="厂商实现差异"></a>厂商实现差异</h3><p>尽管 IPMI 是通用标准，但各厂商会定制管理界面和扩展功能：</p><ul><li><strong>戴尔 iDRAC</strong>：集成生命周期控制器（自动化部署）、增强型硬件诊断。</li><li><strong>惠普 iLO</strong>：支持智能存储配置、能耗优化工具。</li><li><strong>华为 iBMC</strong>：融合智能诊断、批量固件升级。</li><li><strong>超微 IPMI</strong>：功能精简，仅提供基础管理（界面较原始），但兼容性强。</li><li><strong>IBM&#x2F;Lenovo IMM&#x2F;XClarity</strong>：深度集成企业级管理套件（如 Lenovo XClarity）。</li></ul></blockquote><p>你需要准备一根网线+一台安装好Java的电脑</p><p>下载并安装Java8（一路安装即可） <a href="https://www.java.com/zh-CN/download/">https://www.java.com/zh-CN/download/</a></p><p>将网线插入BMC口</p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/image-20250309222551310.png" alt="image-20250309222551310"></p><h3 id="配置BMC"><a href="#配置BMC" class="headerlink" title="配置BMC"></a>配置BMC</h3><p>开机+狂按<strong>Delete</strong>按键进入BIOS</p><p>移动到<strong>IPMI</strong>项（有的服务器叫<strong>Server Mgmt</strong>），选择<strong>BMC Network Configuration</strong> </p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/image-20250309222343220.png" alt="image-20250309222343220"></p><ol><li>启用 <code>Update IPMI LAN Configuration</code> → 设为 <code>Yes</code>。</li><li>选择 <code>Configuration Address Source</code> → <code>DHCP</code> 或 <code>Static</code>。</li><li>若选择 <code>Static</code>：<ul><li>填写 <code>Station IP Address</code>、<code>Subnet Mask</code>、<code>Gateway IP Address</code>。</li><li>例如 IP地址192.168.10.2 、子网掩码：255.255.255.0、网关：192.168.10.1</li></ul></li><li>保存设置并重启服务器，使配置生效。</li></ol><blockquote><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a><strong>注意事项</strong></h3><ul><li><strong>DHCP 模式</strong>：需确保网络中存在 DHCP 服务器，且 IPMI 能正常获取 IP。</li><li><strong>Static 模式</strong>：避免 IP 地址冲突，建议提前规划局域网 IP 分配。</li><li><strong>MAC 地址</strong>：用于网络绑定或防火墙规则时需记录此地址。</li><li><strong>远程访问</strong>：配置完成后，可通过 IP 地址访问 IPMI Web 界面（默认端口 443&#x2F;623）。</li></ul></blockquote><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/image-20250309223428520.png" alt="image-20250309223428520"></p><h3 id="使用IPMI"><a href="#使用IPMI" class="headerlink" title="使用IPMI"></a>使用IPMI</h3><p>然后连接服务器BMC口和电脑，在浏览器输入你配置的IP</p><p><a href="https://192.168.10.x/">https://192.168.10.x</a>  (一定是https:&#x2F;&#x2F;)</p><p>输入账号密码 默认账号密码都是ADMIN</p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/5746c1e472bc72f8322ff20744907fe.jpg" alt="默认账号密码都是ADMIN"></p><p>登录后可以切换为中文</p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/image-20250309223933922.png" alt="image-20250309223933922"></p><p>这里我们使用Java IKVM来控制服务器、安装系统等</p><p>首先需要配置一下Java</p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/image-20250309224217212.png" alt="image-20250309224217212"></p><p>将你的IPMI地址加入例外站点列表</p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/image-20250309224331195.png" alt="image-20250309224331195"></p><p>点击重定向控制台，会下载下来一个<strong>launch.jnlp</strong>文件，双击，一路同意即可进入控制台</p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/image-20250309224048311.png" alt="image-20250309224048311"></p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/image-20250309224555376.png" alt="image-20250309224555376"></p><h3 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h3><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/ipmi2.png" alt="img"></p><ol><li>选择 <strong>virtual storage</strong></li><li>选择 <strong>cdrom&amp;iso</strong></li><li>选择 iso 文件</li><li>打开文件夹选择 iso 文件</li><li>插入</li></ol><p>这里为了方便，使用Netboot安装镜像(在线安装)</p><p><a href="https://netboot.xyz/downloads/">https://netboot.xyz/downloads/</a></p><p><a href="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/image-20250301075155342.png"><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/image-20250301075155342.png" alt="image-20250301075155342"></a></p><p>重启服务器，狂按 F11，进入 启动项菜单</p><p>怕有人不会，上一张图</p><p><a href="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/ipmi3.png"><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/ipmi3.png" alt="img"></a></p><p><a href="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/ipmi4.png"><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/ipmi4.png" alt="img"></a></p><p>根据你选择挂载，我刚刚挂载是 cdrom，因此选择是 cdrom 这个启动项。</p><p>进入后填写你的公网IP、子网掩码、网关、DNS安装即可，具体步骤略</p><p><a href="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/netboot.xyz-d976acd5e46c61339230d38e767fbdc2.gif"><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/netboot.xyz-d976acd5e46c61339230d38e767fbdc2.gif" alt="netboot.xyz menu"></a></p><h2 id="升级BMC固件"><a href="#升级BMC固件" class="headerlink" title="升级BMC固件"></a>升级BMC固件</h2><p>下载 BIOS &#x2F; BMC &#x2F; Bundle Firmware for MBD-X10SLL-F</p><p> <a href="https://www.supermicro.com/zh_cn/support/resources/downloadcenter/firmware/MBD-X10SLL-F/BMC">https://www.supermicro.com/zh_cn/support/resources/downloadcenter/firmware/MBD-X10SLL-F/BMC</a></p><p>解压、上传你的固件升级即可</p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/image-20250309225242239.png" alt="image-20250309225242239"></p><h2 id="升级BIOS"><a href="#升级BIOS" class="headerlink" title="升级BIOS"></a>升级BIOS</h2><p>超微的主板自带的 IPMI 有些高级功能是需要授权才能解锁的，比如在线更新 BIOS，RAID 管理等等</p><p>这里一个密钥生成器</p><p><a href="https://tql.ink/ipmi/">https://tql.ink/ipmi/</a></p><p>填写你的 IPMI MAC 地址，生成一个即可</p><h3 id="BMC-MAC-地址在哪查看？"><a href="#BMC-MAC-地址在哪查看？" class="headerlink" title="BMC MAC 地址在哪查看？"></a>BMC MAC 地址在哪查看？</h3><p>登录你的主板 IPMI，首页就能看到 BMC MAC 地址</p><h3 id="怎么激活？"><a href="#怎么激活？" class="headerlink" title="怎么激活？"></a>怎么激活？</h3><p>登录 IPMI，找到下拉栏的 Other（其他），然后 Activate License 这个页面</p><p>把生成出来的 License Key 填进去就行了</p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/image-20250309225604976.png" alt="image-20250309225604976"></p><p>升级步骤还是一样</p><p>下载BIOS升级文件</p><p>BIOS &#x2F; BMC &#x2F; Bundle Firmware for MBD-X10SLL-F</p><p><a href="https://www.supermicro.com/zh_cn/support/resources/downloadcenter/firmware/MBD-X10SLL-F/BIOS">https://www.supermicro.com/zh_cn/support/resources/downloadcenter/firmware/MBD-X10SLL-F/BIOS</a></p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/image-20250309225639587.png" alt="image-20250309225639587"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这个服务器用起来还是不错的，噪音还是挺小的</p><p>就先写到这里</p><p>更多内容（使用手册、各种驱动、适配的硬件）可以看</p><p><a href="https://www.supermicro.org.cn/zh_cn/products/motherboard/X10SLL-F">https://www.supermicro.org.cn/zh_cn/products/motherboard/X10SLL-F</a></p><p>未完待续….</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近在咸鱼上淘了一台1U半高服务器回来，型号为SuperMicro（超微） SuperServer5018D-MF+X10SLL-F主板&lt;/</summary>
      
    
    
    
    <category term="教程" scheme="https://blog.quickso.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="服务器" scheme="https://blog.quickso.cn/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    <category term="SuperMicro" scheme="https://blog.quickso.cn/tags/SuperMicro/"/>
    
    <category term="ipmi" scheme="https://blog.quickso.cn/tags/ipmi/"/>
    
  </entry>
  
  <entry>
    <title>独立服务器安装ProxmoxVE并配置NAT网络转发</title>
    <link href="https://blog.quickso.cn/2025/03/01/%E7%8B%AC%E7%AB%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85ProxmoxVE%E5%B9%B6%E9%85%8D%E7%BD%AENAT%E7%BD%91%E7%BB%9C%E8%BD%AC%E5%8F%91/"/>
    <id>https://blog.quickso.cn/2025/03/01/%E7%8B%AC%E7%AB%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85ProxmoxVE%E5%B9%B6%E9%85%8D%E7%BD%AENAT%E7%BD%91%E7%BB%9C%E8%BD%AC%E5%8F%91/</id>
    <published>2025-02-28T23:36:10.000Z</published>
    <updated>2025-05-26T15:06:48.616Z</updated>
    
    <content type="html"><![CDATA[<p>最近买了一台美国独服，只有一个IPv4，这里记录一下ProxmoxVE安装以及网络配置</p><h1 id="1-安装Debian12"><a href="#1-安装Debian12" class="headerlink" title="1.安装Debian12"></a>1.安装Debian12</h1><p>这里使用服务商提供的IPMI面板</p><h3 id="登陆-ipmi，获取-jnlp-文件"><a href="#登陆-ipmi，获取-jnlp-文件" class="headerlink" title="登陆 ipmi，获取 jnlp 文件"></a>登陆 ipmi，获取 jnlp 文件</h3><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/ipmi1.png" alt="img"></p><p>根据上图，点击监视窗口下载 jnlp。第一步完成</p><h3 id="安装-jdk-环境，用来打开-jnlp-文件"><a href="#安装-jdk-环境，用来打开-jnlp-文件" class="headerlink" title="安装 jdk 环境，用来打开 jnlp 文件"></a>安装 jdk 环境，用来打开 jnlp 文件</h3><p>这里推荐 jdk 版本 1.7 版本。这里也贴心的准备两个直连下载地址</p><ol><li>win 32 位： <a href="http://iso.nomao.top/iso/jdk1.732.exe">http://iso.nomao.top/iso/jdk1.732.exe</a></li><li>win 64 位：<a href="http://iso.nomao.top/iso/jdk1.7.exe">http://iso.nomao.top/iso/jdk1.7.exe</a></li></ol><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/image-20250301075419142.png" alt="image-20250301075419142"></p><h3 id="双击打开-jnlp-文件，挂载-iso，进行安装"><a href="#双击打开-jnlp-文件，挂载-iso，进行安装" class="headerlink" title="双击打开 jnlp 文件，挂载 iso，进行安装"></a>双击打开 jnlp 文件，挂载 iso，进行安装</h3><h3 id="ipmi-白名单"><a href="#ipmi-白名单" class="headerlink" title="ipmi 白名单"></a>ipmi 白名单</h3><p>ipmi 为了安全，都会启用白名单 ip 访问，因此 java ikvm 也需要使用此白名单 ip 访问。<br>但是国外的服务器，使用国内的 ip 访问 java ikvm 会很缓慢，连接失败都问题。<br>因此：解决方案有两个<br>①使用真全局代理（我使用的是这个)</p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/image-20250301074925018.png" alt="image-20250301074925018">②使用国外 win 机器，连接 java ikvm</p><p>成功连接 java ikvm 后，你会看到以下画面，请看图！</p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/ipmi2.png" alt="img"></p><ol><li>选择 virtual storage</li><li>选择 cdrom&amp;iso</li><li>选择 iso 文件</li><li>打开文件夹选择 iso 文件</li><li>插入</li></ol><p>这里为了方便，使用Netboot安装镜像(在线安装)</p><p><a href="https://netboot.xyz/downloads/">https://netboot.xyz/downloads/</a></p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/image-20250301075155342.png" alt="image-20250301075155342"></p><h3 id="重启服务器，狂按-F11，进入-启动项菜单"><a href="#重启服务器，狂按-F11，进入-启动项菜单" class="headerlink" title="重启服务器，狂按 F11，进入 启动项菜单"></a>重启服务器，狂按 F11，进入 启动项菜单</h3><p>怕有人不会，上一张图</p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/ipmi3.png" alt="img"></p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/ipmi4.png" alt="img"></p><p>根据你选择挂载，我刚刚挂载是 cdrom，因此选择是 cdrom 这个启动项。</p><p>进入后填写你的公网IP、子网掩码、网关、DNS安装即可，具体步骤略</p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/netboot.xyz-d976acd5e46c61339230d38e767fbdc2.gif" alt="netboot.xyz menu"></p><h1 id="2-安装Proxmox-VE"><a href="#2-安装Proxmox-VE" class="headerlink" title="2.安装Proxmox VE"></a>2.安装Proxmox VE</h1><h3 id="1-配置hosts文件"><a href="#1-配置hosts文件" class="headerlink" title="1.配置hosts文件"></a>1.配置hosts文件</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">nano /etc/hosts<br>修改为下面格式，prox4m1为你的主机名，可以自定义。<span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">15</span>.<span class="hljs-number">77</span>为公网IP<br><span class="hljs-number">127.0.0.1</span>       localhost<br><span class="hljs-number">192.168.15.77</span>   prox4m1.proxmox.com prox4m1<br><br># The following lines are desirable for IPv6 capable hosts<br>::<span class="hljs-number">1</span>     localhost ip6-localhost ip6-loopback<br>ff02::<span class="hljs-number">1</span> ip6-allnodes<br>ff02::<span class="hljs-number">2</span> ip6-allrouters<br></code></pre></td></tr></table></figure><h3 id="2-安装Proxmox-VE-1"><a href="#2-安装Proxmox-VE-1" class="headerlink" title="2.安装Proxmox VE"></a>2.安装Proxmox VE</h3><p>添加 Proxmox VE 仓库</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">echo <span class="hljs-string">&quot;deb [arch=amd64] http://download.proxmox.com/debian/pve bookworm pve-no-subscription&quot;</span> &gt; /etc/apt/sources<span class="hljs-meta">.list</span>.d/pve-install-repo<span class="hljs-meta">.list</span><br></code></pre></td></tr></table></figure><p>添加仓库 key </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">wget https://enterprise.proxmox.com/debian/proxmox-<span class="hljs-keyword">release</span>-bookworm.gpg -O /etc/apt/<span class="hljs-keyword">trusted</span>.gpg.d/proxmox-<span class="hljs-keyword">release</span>-bookworm.gpg <br># verify<br>sha512sum /etc/apt/<span class="hljs-keyword">trusted</span>.gpg.d/proxmox-<span class="hljs-keyword">release</span>-bookworm.gpg <br><span class="hljs-number">7</span>da6fe34168adc6e479327ba517796d4702fa2f8b4f0a9833f5ea6e6b48f6507a6da403a274fe201595edc86a84463d50383d07f64bdde2e3658108db7d6dc87 /etc/apt/<span class="hljs-keyword">trusted</span>.gpg.d/proxmox-<span class="hljs-keyword">release</span>-bookworm.gpg <br></code></pre></td></tr></table></figure><p>更新软件源和系统:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">apt <span class="hljs-keyword">update</span> &amp;&amp; apt <span class="hljs-keyword">full</span>-upgrade<br></code></pre></td></tr></table></figure><p>安装 Proxmox VE 内核</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nsis">apt install proxmox-default-kernel<br><br><span class="hljs-params">system</span>ctl <span class="hljs-keyword">reboot</span><br></code></pre></td></tr></table></figure><p>安装 Proxmox VE 软件包</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift">apt install proxmox<span class="hljs-operator">-</span>ve <span class="hljs-keyword">postfix</span> <span class="hljs-keyword">open</span><span class="hljs-operator">-</span>iscsi chrony<br></code></pre></td></tr></table></figure><p>移除Debian内核</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">apt <span class="hljs-built_in">remove</span> linux-<span class="hljs-built_in">image</span>-amd64 &#x27;linux-<span class="hljs-built_in">image</span>-<span class="hljs-number">6.1</span>*&#x27;<br></code></pre></td></tr></table></figure><p>更新grub配置</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">update-grub</span><br></code></pre></td></tr></table></figure><p>移除os-prober包</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">apt <span class="hljs-built_in">remove</span> <span class="hljs-built_in">os</span>-prober<br></code></pre></td></tr></table></figure><p>Proxmox VE 网页访问</p><p>连接到管理Web界面（<code>https：// your-ip-address：8006</code>）。如果尚未添加任何用户，则应选择PAM身份验证领域并使用“ root”用户帐户登录。</p><h3 id="3-配置网络"><a href="#3-配置网络" class="headerlink" title="3.配置网络"></a>3.配置网络</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /etc/network<br><span class="hljs-built_in">cp</span> interfaces interfaces.bk <span class="hljs-comment">#备份一下</span><br></code></pre></td></tr></table></figure><p>修改interfaces</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># network interface settings; autogenerated</span><br><span class="hljs-comment"># Please do NOT modify this file directly, unless you know what</span><br><span class="hljs-comment"># you&#x27;re doing.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># If you want to manage parts of the network configuration manually,</span><br><span class="hljs-comment"># please utilize the &#x27;source&#x27; or &#x27;source-directory&#x27; directives to do</span><br><span class="hljs-comment"># so.</span><br><span class="hljs-comment"># PVE will preserve these directives, but will NOT read its network</span><br><span class="hljs-comment"># configuration from sourced files, so do not attempt to move any of</span><br><span class="hljs-comment"># the PVE managed interfaces into external files!</span><br><br><span class="hljs-attribute">source</span> /etc/network/interfaces.d/*<br><br><span class="hljs-attribute">auto</span> lo<br><span class="hljs-attribute">iface</span> lo inet loopback<br><br><span class="hljs-attribute">auto</span> eno1<br><span class="hljs-attribute">iface</span> eno1 inet static<br><span class="hljs-attribute">address</span> 公网IP/<span class="hljs-number">31</span><br><span class="hljs-attribute">gateway</span> 公网网关<br><span class="hljs-attribute">dns</span>-nameservers <span class="hljs-number">8.8.8.8</span><br><span class="hljs-comment"># dns-* options are implemented by the resolvconf package, if installed</span><br><br><span class="hljs-attribute">iface</span> enp0s25 inet manual<br><br><span class="hljs-attribute">auto</span> vmbr0<br><span class="hljs-comment">#private sub network</span><br><span class="hljs-attribute">iface</span> vmbr0 inet static<br>        <span class="hljs-attribute">address</span>  <span class="hljs-number">10.10.10.1</span>/<span class="hljs-number">24</span><br>        <span class="hljs-attribute">bridge</span>-ports none<br>        <span class="hljs-attribute">bridge</span>-stp <span class="hljs-literal">off</span><br>        <span class="hljs-attribute">bridge</span>-fd <span class="hljs-number">0</span><br><br>        <span class="hljs-attribute">post</span>-up   echo <span class="hljs-number">1</span> &gt; /proc/sys/net/ipv4/ip_forward<br>        <span class="hljs-attribute">post</span>-up   iptables -t nat -A POSTROUTING -s &#x27;<span class="hljs-number">10.10.10.0</span>/<span class="hljs-number">24</span>&#x27; -o eno1 -j MASQUERADE<br>        <span class="hljs-attribute">post</span>-down iptables -t nat -D POSTROUTING -s &#x27;<span class="hljs-number">10.10.10.0</span>/<span class="hljs-number">24</span>&#x27; -o eno1 -j MASQUERADE<br></code></pre></td></tr></table></figure><p>重启网络</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl restart networking</span><br></code></pre></td></tr></table></figure><p>配置好后是这样</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">执行 route -n<br>Kernel IP routing table<br>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface<br><span class="hljs-number">0.0.0.0</span>         x.x.x.x   <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>         UG    <span class="hljs-number">0</span>      <span class="hljs-number">0</span>        <span class="hljs-number">0</span> eno1<br><span class="hljs-number">10.10.10.0</span>      <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>         <span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">0</span>   U     <span class="hljs-number">0</span>      <span class="hljs-number">0</span>        <span class="hljs-number">0</span> vmbr0<br>x.x.x.x   <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>         <span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">254</span> U     <span class="hljs-number">0</span>      <span class="hljs-number">0</span>        <span class="hljs-number">0</span> eno1<br></code></pre></td></tr></table></figure><h1 id="3-创建kvm虚拟机"><a href="#3-创建kvm虚拟机" class="headerlink" title="3.创建kvm虚拟机"></a>3.创建kvm虚拟机</h1><blockquote><p>不是CT，pve直接可下载CT的模版</p><p>除了下面的方法，你也可以使用iso镜像安装</p></blockquote><h3 id="1-创建一个新的虚拟机"><a href="#1-创建一个新的虚拟机" class="headerlink" title="1.创建一个新的虚拟机"></a>1.创建一个新的虚拟机</h3><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">qm create 103</span> <span class="hljs-literal">--</span><span class="hljs-comment">memory 2048</span> <span class="hljs-literal">--</span><span class="hljs-comment">core 2</span> <span class="hljs-literal">--</span><span class="hljs-comment">name ubuntu</span><span class="hljs-literal">-</span><span class="hljs-comment">cloud</span> <span class="hljs-literal">--</span><span class="hljs-comment">net0 virtio</span><span class="hljs-string">,</span><span class="hljs-comment">bridge=vmbr0</span><br></code></pre></td></tr></table></figure><p>这里是创建 id 为 103 的虚拟机，内存大小为 2G ， CPU 核心数量 2，名称是 ubuntu-cloud </p><p>并设置网卡桥接到 vmbr0</p><h3 id="2-准备-Cloud-Init-镜像"><a href="#2-准备-Cloud-Init-镜像" class="headerlink" title="2.准备 Cloud-Init 镜像"></a>2.准备 Cloud-Init 镜像</h3><p>Cloud-Init 需要特定镜像支持。推荐使用官方提供的预装 Cloud-Init 的镜像，例如：</p><ul><li><a href="https://cloud.debian.org/images/cloud/">https://cloud.debian.org/images/cloud/</a></li><li><a href="https://cloud-images.ubuntu.com/releases/">https://cloud-images.ubuntu.com/releases/</a></li><li><a href="https://down.idc.wiki/Image/realServer-Template/current/qcow2/">https://down.idc.wiki/Image/realServer-Template/current/qcow2/</a></li></ul><p>下载镜像后，上传到 PVE 存储：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># 示例：将 镜像上传到 PVE 的 `<span class="hljs-keyword">local</span>` 存储<br>qm importdisk &lt;VMID&gt; /<span class="hljs-type">path</span>/<span class="hljs-keyword">to</span>/xxx.img <span class="hljs-keyword">local</span><br>或者<br>qm importdisk &lt;VMID&gt; /<span class="hljs-type">path</span>/<span class="hljs-keyword">to</span>/xxx.qcow2 <span class="hljs-keyword">local</span> <span class="hljs-comment">--format=qcow</span><br></code></pre></td></tr></table></figure><p>例如</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">qm importdisk <span class="hljs-number">103</span> noble-<span class="hljs-keyword">server</span>-cloudimg-amd64.img <span class="hljs-keyword">local</span><br></code></pre></td></tr></table></figure><p>将新导入的磁盘以 scsi 驱动器的方式装载到新建的虚拟机的 scsi 控制器</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">qm</span> set <span class="hljs-number">103</span> --scsihw virtio-scsi-pci --scsi0 local-lvm/vm-<span class="hljs-number">103</span>-disk-<span class="hljs-number">0</span><br><span class="hljs-attribute">qm</span> set <span class="hljs-number">103</span> --scsihw virtio-scsi-pci --scsi0 local:<span class="hljs-number">103</span>/vm-<span class="hljs-number">103</span>-disk-<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/image-20250301101749350.png" alt="image-20250301101749350"></p><h3 id="添加-cloud-init-驱动器"><a href="#添加-cloud-init-驱动器" class="headerlink" title="添加 cloud init 驱动器"></a>添加 cloud init 驱动器</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">qm <span class="hljs-keyword">set</span> <span class="hljs-number">103</span> <span class="hljs-comment">--ide2 local:cloudinit</span><br></code></pre></td></tr></table></figure><h3 id="将-cloud-init-驱动器设置为可启动并限制-BIOS-仅从磁盘启动"><a href="#将-cloud-init-驱动器设置为可启动并限制-BIOS-仅从磁盘启动" class="headerlink" title="将 cloud init 驱动器设置为可启动并限制 BIOS 仅从磁盘启动"></a>将 cloud init 驱动器设置为可启动并限制 BIOS 仅从磁盘启动</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">qm <span class="hljs-keyword">set</span> 103 <span class="hljs-params">--boot</span> c <span class="hljs-params">--bootdisk</span> scsi0<br></code></pre></td></tr></table></figure><h3 id="添加串口控制台"><a href="#添加串口控制台" class="headerlink" title="添加串口控制台"></a>添加串口控制台</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">qm <span class="hljs-keyword">set</span> 103 <span class="hljs-params">--serial0</span> socket <span class="hljs-params">--vga</span> serial0<br></code></pre></td></tr></table></figure><h2 id="现在先不要启动虚拟机"><a href="#现在先不要启动虚拟机" class="headerlink" title="现在先不要启动虚拟机"></a>现在先不要启动虚拟机</h2><p>现在可以配置新虚拟机的硬件和 cloud init 选项，配置好之后转换成模板。磁盘大小的调整可以在转换成模板前调整，或者从模板克隆出新的虚拟机时候再调整。</p><ul><li>用户：root</li><li>密码：改为你想要的root密码</li><li>IP配置：<br>IPv4&#x2F;CIDR：填你想要的静态IP，如：10.10.10.2&#x2F;24<br>网关：第2步你自己配置的虚拟网卡，如：10.10.10.1</li></ul><h3 id="创建模板（也可以在-Web-UI-操作）"><a href="#创建模板（也可以在-Web-UI-操作）" class="headerlink" title="创建模板（也可以在 Web UI 操作）"></a>创建模板（也可以在 Web UI 操作）</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">qm</span> template <span class="hljs-number">103</span><br></code></pre></td></tr></table></figure><h3 id="克隆模板（也可以在-Web-UI-操作）"><a href="#克隆模板（也可以在-Web-UI-操作）" class="headerlink" title="克隆模板（也可以在 Web UI 操作）"></a>克隆模板（也可以在 Web UI 操作）</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">qm <span class="hljs-keyword">clone</span> <span class="hljs-title">103</span> <span class="hljs-number">135</span> --name huihui --full<br></code></pre></td></tr></table></figure><h2 id="排障"><a href="#排障" class="headerlink" title="排障"></a>排障</h2><p>如果需要重置机器 id</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">rm</span> -f /etc/machine-id<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">rm</span> -f /var/lib/dbus/machine-id<br></code></pre></td></tr></table></figure><p>然后关机，下次启动会生成新的机器 id，如果没有生成，可以运行以下命令：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">sudo systemd-machine-<span class="hljs-built_in">id</span>-setup<br></code></pre></td></tr></table></figure><p>也可以使用我的脚本快速创建模板</p><p><a href="https://github.com/muzihuaner/ProxmoxVE-template-maker">https://github.com/muzihuaner/ProxmoxVE-template-maker</a></p><h3 id="5-开机"><a href="#5-开机" class="headerlink" title="5.开机"></a>5.开机</h3><p>点启动，开机后先用pve控制台打开登录你设置的root和密码</p><ul><li>运行<code>ip a</code>，看下静态IP类似10.10.10.2</li><li>看下外网通吗，再运行<code>ping 8.8.8.8</code></li></ul><h3 id="6-配置nat端口转发"><a href="#6-配置nat端口转发" class="headerlink" title="6.配置nat端口转发"></a>6.配置nat端口转发</h3><p><a href="https://github.com/muzihuaner/NATScript/">https://github.com/muzihuaner/NATScript/</a></p><blockquote><p>[!NOTE]</p><p>没网？<br>如果到最后一步，你发现nat机无法连接外网，可能是转发规则设置错了<br>在宿主机运行 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> iptables -t nat -A POSTROUTING -s <span class="hljs-string">&#x27;你的内网网关ip/24&#x27;</span> -o 你宿主机的网卡接口 -j MASQUERADE<br></code></pre></td></tr></table></figure><p>例如：<code>sudo iptables -t nat -A POSTROUTING -s &#39;10.10.10.0/24&#39; -o eno1 -j MASQUERADE</code></p></blockquote><p>大概就这些…有其他的我再更新…未完待续</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近买了一台美国独服，只有一个IPv4，这里记录一下ProxmoxVE安装以及网络配置&lt;/p&gt;
&lt;h1 id=&quot;1-安装Debian12&quot;&gt;&lt;a href=&quot;#1-安装Debian12&quot; class=&quot;headerlink&quot; title=&quot;1.安装Debian12&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="教程" scheme="https://blog.quickso.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="运维" scheme="https://blog.quickso.cn/tags/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="独立服务器" scheme="https://blog.quickso.cn/tags/%E7%8B%AC%E7%AB%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    <category term="ProxmoxVE" scheme="https://blog.quickso.cn/tags/ProxmoxVE/"/>
    
  </entry>
  
  <entry>
    <title>VMwareESXI密钥/ISO镜像</title>
    <link href="https://blog.quickso.cn/2025/02/28/VMwareESXI%E5%AF%86%E9%92%A5-ISO%E9%95%9C%E5%83%8F/"/>
    <id>https://blog.quickso.cn/2025/02/28/VMwareESXI%E5%AF%86%E9%92%A5-ISO%E9%95%9C%E5%83%8F/</id>
    <published>2025-02-28T14:28:54.000Z</published>
    <updated>2025-05-26T15:06:48.588Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VMwareESXI密钥-ISO镜像"><a href="#VMwareESXI密钥-ISO镜像" class="headerlink" title="VMwareESXI密钥&#x2F;ISO镜像"></a>VMwareESXI密钥&#x2F;ISO镜像</h1><p>它们应该可以工作。适用于主机系统的所有核心。也可以从此处下载 ESXi。</p><h2 id="下载链接"><a href="#下载链接" class="headerlink" title="下载链接:"></a>下载链接:</h2><h4 id="vCenter"><a href="#vCenter" class="headerlink" title="vCenter"></a>vCenter</h4><ul><li><a href="#vcenter-server-8-standard">vCenter Server 8 Standard</a></li><li><a href="#vcenter-server-7">vCenter Server 7</a></li></ul><h4 id="ESXi"><a href="#ESXi" class="headerlink" title="ESXi"></a>ESXi</h4><ul><li><a href="#esxi-8">ESXi 8</a></li><li><a href="#esxi-7-enterprise-plus">ESXi 7 Enterprise Plus</a></li><li><a href="#esxi-6-enterprise-plus">ESXi 6 Enterprise Plus</a></li></ul><h4 id="Workstation"><a href="#Workstation" class="headerlink" title="Workstation"></a>Workstation</h4><ul><li><a href="#workstation-17">Workstation 17</a></li><li><a href="#workstation-16">Workstation 16</a></li></ul><h4 id="Fusion"><a href="#Fusion" class="headerlink" title="Fusion"></a>Fusion</h4><ul><li><a href="#fusion-13-pro">Fusion 13 Pro</a></li></ul><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><h3 id="ESXi-1"><a href="#ESXi-1" class="headerlink" title="ESXi"></a>ESXi</h3><div>    <img src="https://gist.github.com/user-attachments/assets/facf84ef-ba73-47c8-9e37-e531dc8602a7" width="24" height="24" alt="VMWare ESXi 8 Current logo icon"/>    <br>    <a href="https://dl.hausmer.com/pub/VMware-VMvisor-Installer-8.0U3b-24280767.iso">ESXi 8.0U3b</a> (build 24280767)  <p>   <a href="https://dl.hausmer.com/pub/ESXI-8.0U2b.iso">ESXi 8.0U2b</a> (build 23305546)</p></div><div>    <img src="https://gist.github.com/user-attachments/assets/e916f8b4-9c7f-49f9-a777-ba4be2226cef" width="24" height="24" alt="VMWare ESXi 7 Old logo icon"/>    <br>    <a href="https://dl.hausmer.com/pub/VMware-VMvisor-Installer-7.0U3n-21930508.iso">ESXi 7.0U3n</a> (build 21930508)</div><h3 id="工作站"><a href="#工作站" class="headerlink" title="工作站"></a>工作站</h3><div>   <img src="https://gist.github.com/user-attachments/assets/4440ff01-70a2-4698-8984-f2eb1cb9d80f" width="24" height="24" alt="VMWare Workstation logo icon"/>    <br>    <a href="https://dl.hausmer.com/pub/VMware-workstation-full-17.5.1-23298084.exe">Workstation 17.5.1 Windows</a> (build 23298084)     <br>    <a href="https://dl.hausmer.com/pub/VMware-Workstation-Full-17.5.1-23298084.x86_64.bundle">Workstation 17.5.1 Linux</a> (build 23298084)</div><h2 id="vCenter-Server"><a href="#vCenter-Server" class="headerlink" title="vCenter Server"></a>vCenter Server</h2><h3 id="vCenter-Server-8-Standard"><a href="#vCenter-Server-8-Standard" class="headerlink" title="vCenter Server 8 Standard"></a>vCenter Server 8 Standard</h3><table><thead><tr><th>Key</th><th>Tested</th></tr></thead><tbody><tr><td>4F282-0MLD2-M8869-T89G0-CF240</td><td>✅</td></tr><tr><td>0F41K-0MJ4H-M88U1-0C3N0-0A214</td><td>✅</td></tr></tbody></table><h3 id="vCenter-Server-7"><a href="#vCenter-Server-7" class="headerlink" title="vCenter Server 7"></a>vCenter Server 7</h3><table><thead><tr><th>Key</th><th>Tested</th></tr></thead><tbody><tr><td>4F282-0MLD2-M8869-T89G0-CF240</td><td>✅</td></tr><tr><td>0F41K-0MJ4H-M88U1-0C3N0-0A214</td><td>✅</td></tr></tbody></table><h2 id="ESXi-2"><a href="#ESXi-2" class="headerlink" title="ESXi"></a>ESXi</h2><h3 id="ESXi-8"><a href="#ESXi-8" class="headerlink" title="ESXi 8"></a>ESXi 8</h3><table><thead><tr><th>Key</th><th>Tested</th></tr></thead><tbody><tr><td>4V492-44210-48830-931GK-2PRJ4</td><td>✅</td></tr><tr><td>HG00K-03H8K-48929-8K1NP-3LUJ4</td><td>✅</td></tr></tbody></table><h3 id="ESXi-7-Enterprise-Plus"><a href="#ESXi-7-Enterprise-Plus" class="headerlink" title="ESXi 7 Enterprise Plus"></a>ESXi 7 Enterprise Plus</h3><table><thead><tr><th>Key</th><th>Tested</th></tr></thead><tbody><tr><td>JJ2WR-25L9P-H71A8-6J20P-C0K3F</td><td>✅</td></tr><tr><td>HN2X0-0DH5M-M78Q1-780HH-CN214</td><td>✅</td></tr><tr><td>JH09A-2YL84-M7EC8-FL0K2-3N2J2</td><td>✅</td></tr></tbody></table><h3 id="ESXi-6-Enterprise-Plus"><a href="#ESXi-6-Enterprise-Plus" class="headerlink" title="ESXi 6 Enterprise Plus"></a>ESXi 6 Enterprise Plus</h3><table><thead><tr><th>Key</th><th>Tested</th></tr></thead><tbody><tr><td>1G4WK-4YH54-080P9-C9AZP-9GHQF</td><td>✅</td></tr></tbody></table><h2 id="Workstation-1"><a href="#Workstation-1" class="headerlink" title="Workstation"></a>Workstation</h2><h3 id="Workstation-17"><a href="#Workstation-17" class="headerlink" title="Workstation 17"></a>Workstation 17</h3><table><thead><tr><th>Key</th><th>Tested</th></tr></thead><tbody><tr><td>ZV3JH-4LXE1-M88MZ-HQXXX-XG0FD</td><td>✅</td></tr><tr><td>AG5RU-6AXDL-H81FZ-KQYN9-M32E0</td><td>✅</td></tr></tbody></table><h3 id="Workstation-16"><a href="#Workstation-16" class="headerlink" title="Workstation 16"></a>Workstation 16</h3><table><thead><tr><th>Key</th><th>Tested</th></tr></thead><tbody><tr><td>4F40H-4ML1K-M89U0-0C2N4-1AKL4</td><td>❓</td></tr></tbody></table><h2 id="Fusion-1"><a href="#Fusion-1" class="headerlink" title="Fusion"></a>Fusion</h2><h3 id="Fusion-13-Pro"><a href="#Fusion-13-Pro" class="headerlink" title="Fusion 13 Pro"></a>Fusion 13 Pro</h3><table><thead><tr><th>Key</th><th>Tested</th></tr></thead><tbody><tr><td>4A4RR-813DK-M81A9-4U35H-06KND</td><td>✅</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;VMwareESXI密钥-ISO镜像&quot;&gt;&lt;a href=&quot;#VMwareESXI密钥-ISO镜像&quot; class=&quot;headerlink&quot; title=&quot;VMwareESXI密钥&amp;#x2F;ISO镜像&quot;&gt;&lt;/a&gt;VMwareESXI密钥&amp;#x2F;ISO镜像&lt;/h1</summary>
      
    
    
    
    <category term="资源" scheme="https://blog.quickso.cn/categories/%E8%B5%84%E6%BA%90/"/>
    
    
    <category term="VMware" scheme="https://blog.quickso.cn/tags/VMware/"/>
    
    <category term="ESXI" scheme="https://blog.quickso.cn/tags/ESXI/"/>
    
  </entry>
  
  <entry>
    <title>Minecraft服务器搭建资源大杂烩</title>
    <link href="https://blog.quickso.cn/2025/02/22/Minecraft%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E8%B5%84%E6%BA%90%E5%A4%A7%E6%9D%82%E7%83%A9/"/>
    <id>https://blog.quickso.cn/2025/02/22/Minecraft%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E8%B5%84%E6%BA%90%E5%A4%A7%E6%9D%82%E7%83%A9/</id>
    <published>2025-02-22T13:45:53.000Z</published>
    <updated>2025-07-26T13:29:54.025Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Java下载"><a href="#Java下载" class="headerlink" title="Java下载"></a>Java下载</h3><p><a href="https://docs.papermc.io/misc/java-install">https://docs.papermc.io/misc/java-install</a></p><p><a href="http://mirror.nju.edu.cn/openjdk/">http://mirror.nju.edu.cn/openjdk/</a></p><h3 id="Minecraft-Paper服务端"><a href="#Minecraft-Paper服务端" class="headerlink" title="Minecraft Paper服务端"></a>Minecraft Paper服务端</h3><p><a href="https://papermc.io/software/paper">https://papermc.io/software/paper</a></p><table><thead><tr><th>Paper 版本</th><th>推荐Java版本</th></tr></thead><tbody><tr><td>1.8 to 1.11</td><td>Java 8</td></tr><tr><td>1.12 to 1.16.4</td><td>Java 11</td></tr><tr><td>1.16.5</td><td>Java 16</td></tr><tr><td>1.17.1-1.18.1+</td><td>Java 21</td></tr></tbody></table><p>启动脚本生成器</p><p><a href="https://docs.papermc.io/misc/tools/start-script-gen">https://docs.papermc.io/misc/tools/start-script-gen</a></p><p>启动脚本示例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -Xms2048M -Xmx2048M -XX:+AlwaysPreTouch -XX:+DisableExplicitGC -XX:+ParallelRefProcEnabled -XX:+PerfDisableSharedMem -XX:+UnlockExperimentalVMOptions -XX:+UseG1GC -XX:G1HeapRegionSize=8M -XX:G1HeapWastePercent=5 -XX:G1MaxNewSizePercent=40 -XX:G1MixedGCCountTarget=4 -XX:G1MixedGCLiveThresholdPercent=90 -XX:G1NewSizePercent=30 -XX:G1RSetUpdatingPauseTimePercent=5 -XX:G1ReservePercent=20 -XX:InitiatingHeapOccupancyPercent=15 -XX:MaxGCPauseMillis=200 -XX:MaxTenuringThreshold=1 -XX:SurvivorRatio=32 -Dusing.aikars.flags=https://mcflags.emc.gs -Daikars.new.flags=<span class="hljs-literal">true</span> -jar server.jar nogui<br></code></pre></td></tr></table></figure><h3 id="插件下载"><a href="#插件下载" class="headerlink" title="插件下载"></a>插件下载</h3><p><a href="https://hangar.papermc.io/">https://hangar.papermc.io/</a></p><p><a href="https://modrinth.com/plugins">https://modrinth.com/plugins</a></p><p><a href="https://dev.bukkit.org/bukkit-plugins">https://dev.bukkit.org/bukkit-plugins</a></p><p><a href="https://www.spigotmc.org/resources/">https://www.spigotmc.org/resources/</a></p><h3 id="插件推荐"><a href="#插件推荐" class="headerlink" title="插件推荐"></a>插件推荐</h3><table><thead><tr><th align="left">插件名称</th><th align="left">主要功能概述</th><th align="left">备注&#x2F;常见用途</th></tr></thead><tbody><tr><td align="left"><strong>AuthMe (5.7.0-FORK-b53)</strong></td><td align="left">玩家登录与注册系统。要求玩家设置密码并在每次进入服务器时登录。</td><td align="left">防止盗号，基础服务器安全必备。Fork 版本可能包含特定优化或功能。</td></tr><tr><td align="left"><strong>BlueMap (5.7)</strong></td><td align="left">为你的 Minecraft 世界生成实时、交互式的网页地图。</td><td align="left">玩家可以在浏览器中查看服务器地图、定位地标等。</td></tr><tr><td align="left"><strong>CMI (9.7.15.5)</strong></td><td align="left"><strong>综合管理插件 (Comprehensive Management Interface)</strong>。提供大量功能，如传送、经济、飞行、邮件、公告板、传送点等。</td><td align="left">旨在替代多个单一功能插件。功能非常庞大。</td></tr><tr><td align="left"><strong>CMIEInjector (1.0.2.3)</strong></td><td align="left">CMI 的扩展&#x2F;依赖组件。处理 CMI 与其他插件的集成和事件注入。</td><td align="left">通常与 CMI 主插件一起安装，是其运行所必需的。</td></tr><tr><td align="left"><strong>CMILib (1.5.5.5)</strong></td><td align="left">CMI 的核心库。提供 CMI 及其扩展插件运行所需的基础代码和 API。</td><td align="left">是 CMI 主插件和其相关插件（如 CMIEInjector）运行的基础依赖。</td></tr><tr><td align="left"><strong>Citizens (2.0.37-SNAPSHOT)</strong></td><td align="left"><strong>NPC 系统</strong>。允许创建和管理非玩家角色（NPC）。</td><td align="left">用于创建商人、向导、守卫、任务NPC等。是许多 RPG 或功能服务器的核心。需要配合其他插件赋予 NPC 更多功能。</td></tr><tr><td align="left"><strong>CoreProtect (22.4)</strong></td><td align="left"><strong>方块&#x2F;容器&#x2F;命令记录与回滚</strong>。记录玩家和自然事件的方块破坏、放置、容器交互、命令执行等。</td><td align="left">用于查熊、恢复破坏、回滚地形、查看物品去向等。服务器管理和安全的重要工具。</td></tr><tr><td align="left"><strong>Dominion (4.3.5-beta)</strong></td><td align="left"><strong>领地&#x2F;区域保护插件</strong>。允许玩家创建私人领地，控制领地内的权限（PVP、建造、方块交互等）。</td><td align="left">保护玩家建筑和资源不被他人破坏或盗窃。</td></tr><tr><td align="left"><strong>Jobs (5.2.6.1)</strong></td><td align="left"><strong>职业与经济系统</strong>。玩家可以选择职业（如矿工、农夫、伐木工），通过完成相应活动（挖矿、种植、砍树）赚钱。</td><td align="left">增加游戏目标和玩法，驱动服务器经济。通常需要配合经济插件（如 CMI 内置经济或 Vault 兼容的经济插件）。</td></tr><tr><td align="left"><strong>LiveKit (1.4.8)</strong></td><td align="left">将 <strong>Livekitapp</strong> 与 Minecraft 游戏内语音聊天连接起来。</td><td align="left">允许玩家在游戏内通过指定的 APP文字交流。增强社交体验。</td></tr><tr><td align="left"><strong>LuckPerms (5.4.40)</strong></td><td align="left"><strong>现代权限管理插件</strong>。用于管理玩家和用户组的权限节点。</td><td align="left">服务器权限系统的核心，控制玩家能执行什么命令、拥有什么功能。强大、高效、可扩展。</td></tr><tr><td align="left"><strong>MOTD (2.3.11)</strong></td><td align="left"><strong>自定义服务器列表信息</strong>。修改玩家在服务器列表中看到的服务器名称、描述、图标、玩家数量显示等。</td><td align="left">使服务器在列表里更吸引人，提供更多信息或个性化展示。</td></tr><tr><td align="left"><strong>Multiverse-Core (5.0.1)</strong></td><td align="left"><strong>多世界管理</strong>。创建和管理多个不同的世界（主世界、资源世界、地狱、末地、小游戏世界等）。</td><td align="left">实现服务器多世界架构的基础。控制世界的生成、传送规则、环境设置等。</td></tr><tr><td align="left"><strong>PlaceholderAPI (2.11.6)</strong></td><td align="left"><strong>占位符 API</strong>。提供一套标准化的 <code>%placeholder%</code> 变量，供其他插件使用和扩展。</td><td align="left">是众多插件之间信息沟通的桥梁。允许在聊天、计分板、Tab列表、插件消息中显示来自其他插件的数据（如金钱、等级）。</td></tr><tr><td align="left"><strong>ProtocolLib (5.3.0)</strong></td><td align="left"><strong>底层数据包操作库</strong>。允许其他插件修改客户端和服务器之间传输的网络数据包。</td><td align="left">许多高级插件（如 ViaVersion, ViaBackwards, TAB, LiveKit, SkinsRestorer）的基础依赖，用于实现复杂功能。</td></tr><tr><td align="left"><strong>QuickShop-Hikari (6.2.0.9)</strong></td><td align="left"><strong>箱子商店系统</strong>。玩家可以创建基于箱子&#x2F;容器的商店进行物品买卖（收购&#x2F;出售）。</td><td align="left">建立玩家驱动的市场经济。Hikari 版本优化了数据库性能。</td></tr><tr><td align="left"><strong>SkinsRestorer (15.7.7)</strong></td><td align="left"><strong>皮肤修复与自定义</strong>。恢复正版皮肤显示，允许离线模式玩家设置自定义皮肤。</td><td align="left">解决非正版服务器皮肤显示问题，提升玩家个性化。</td></tr><tr><td align="left"><strong>TAB (5.2.0)</strong></td><td align="left"><strong>自定义玩家列表 (Tablist)</strong>。修改玩家按 Tab 键看到的玩家列表格式、内容、动画等。</td><td align="left">美化玩家列表，显示更多信息（如Ping、金钱、等级、服务器时间等），通常依赖 PlaceholderAPI。</td></tr><tr><td align="left"><strong>UnifiedMetrics (0.3.8)</strong></td><td align="left"><strong>服务器性能监控</strong>。收集并展示服务器性能指标（TPS, MSPT, 内存使用、实体数量等）。</td><td align="left">帮助管理员监控服务器运行状况，诊断性能瓶颈。</td></tr><tr><td align="left"><strong>Vault (1.7.3-CMI)</strong></td><td align="left"><strong>经济&#x2F;权限&#x2F;聊天 API</strong>。提供一个标准接口，让其他插件可以兼容不同的经济、权限、聊天插件。</td><td align="left"><strong>本身不提供经济&#x2F;权限&#x2F;聊天功能</strong>，是插件兼容性的桥梁。例如，让商店插件兼容各种经济插件。CMI 版表明 CMI 可能内置了兼容的 Vault API。</td></tr><tr><td align="left"><strong>ViaBackwards (5.4.1)</strong></td><td align="left"><strong>旧版本客户端兼容</strong>。允许 <strong>旧版本</strong> Minecraft 客户端（如 1.9-1.18.x）连接到使用 <strong>更新版本</strong> 的服务器。</td><td align="left">需要配合 ViaVersion 使用。扩大服务器支持的客户端范围。</td></tr><tr><td align="left"><strong>ViaVersion (5.4.2)</strong></td><td align="left"><strong>新版本客户端兼容</strong>。允许 <strong>新版本</strong> Minecraft 客户端（如 1.19+）连接到使用 <strong>旧版本</strong> 的服务器。也支持旧版客户端连新版服务器。</td><td align="left">实现跨版本游玩的核心插件。ViaBackwards 是其功能的扩展（专门处理旧客户端连新服务器）。</td></tr><tr><td align="left"><strong>Welcomer_Plus (2.6.6)</strong></td><td align="left"><strong>进服&#x2F;离服消息管理</strong>。自定义玩家加入和退出服务器时显示的欢迎&#x2F;告别消息、标题、动作栏等。</td><td align="left">提升玩家初次体验和仪式感。</td></tr><tr><td align="left"><strong>WorldEdit (7.3.14+…)</strong></td><td align="left"><strong>强大的世界编辑工具</strong>。提供大量命令用于快速选择、复制、粘贴、填充、替换地形和建筑方块。</td><td align="left">服务器建筑、地形改造、地图制作的必备神器。功能极其强大。</td></tr><tr><td align="left"><strong>eBackup (1.3.1)</strong></td><td align="left"><strong>服务器世界备份</strong>。定时自动备份服务器地图&#x2F;世界文件夹。</td><td align="left">防止数据丢失，在服务器崩溃或重大错误后可以回档。</td></tr><tr><td align="left"><strong>packetevents (2.8.0)</strong></td><td align="left"><strong>低级网络数据包处理库</strong>。提供比 ProtocolLib 更底层、更高效的 API 来处理网络数据包。</td><td align="left">通常被需要极致性能或特定数据包操作的插件（如 ViaVersion 系列、某些反作弊）使用。是 ProtocolLib 的现代替代或补充。</td></tr></tbody></table><h3 id="SCHEMATICS投影下载"><a href="#SCHEMATICS投影下载" class="headerlink" title="SCHEMATICS投影下载"></a>SCHEMATICS投影下载</h3><p><a href="https://www.minecraft-schematics.com/">https://www.minecraft-schematics.com/</a></p><p><a href="https://mcbuild.org/schematics/">https://mcbuild.org/schematics/</a></p><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p><strong>HMCL</strong></p><p><a href="https://hmcl.huangyuhui.net/">https://hmcl.huangyuhui.net/</a></p><p><strong>PCL2</strong></p><p><a href="https://afdian.com/p/0164034c016c11ebafcb52540025c377">https://afdian.com/p/0164034c016c11ebafcb52540025c377</a></p><p><a href="https://pan.aoe.top/Tools/PCL2">https://pan.aoe.top/Tools/PCL2</a></p><p><strong>XMCL</strong></p><p><a href="https://xmcl.app/zh/">https://xmcl.app/zh/</a></p><h3 id="光影下载"><a href="#光影下载" class="headerlink" title="光影下载"></a>光影下载</h3><p><a href="https://modrinth.com/shaders">https://modrinth.com/shaders</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Java下载&quot;&gt;&lt;a href=&quot;#Java下载&quot; class=&quot;headerlink&quot; title=&quot;Java下载&quot;&gt;&lt;/a&gt;Java下载&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://docs.papermc.io/misc/java-install&quot;&gt;ht</summary>
      
    
    
    
    <category term="科普" scheme="https://blog.quickso.cn/categories/%E7%A7%91%E6%99%AE/"/>
    
    
    <category term="Minecraft" scheme="https://blog.quickso.cn/tags/Minecraft/"/>
    
    <category term="我的世界" scheme="https://blog.quickso.cn/tags/%E6%88%91%E7%9A%84%E4%B8%96%E7%95%8C/"/>
    
    <category term="Paper" scheme="https://blog.quickso.cn/tags/Paper/"/>
    
  </entry>
  
  <entry>
    <title>docker部署开源企业级远程办公VPN及软件安装-AnyLink</title>
    <link href="https://blog.quickso.cn/2025/02/11/docker%E9%83%A8%E7%BD%B2%E5%BC%80%E6%BA%90%E4%BC%81%E4%B8%9A%E7%BA%A7%E8%BF%9C%E7%A8%8B%E5%8A%9E%E5%85%ACVPN-%E5%8F%8A%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-AnyLink/"/>
    <id>https://blog.quickso.cn/2025/02/11/docker%E9%83%A8%E7%BD%B2%E5%BC%80%E6%BA%90%E4%BC%81%E4%B8%9A%E7%BA%A7%E8%BF%9C%E7%A8%8B%E5%8A%9E%E5%85%ACVPN-%E5%8F%8A%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-AnyLink/</id>
    <published>2025-02-11T11:01:27.000Z</published>
    <updated>2025-05-26T15:06:48.592Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>AnyLink是一个企业级远程办公 ssl vpn 软件，可以支持多人同时在线使用。基于 openconnect 协议开发，并且借鉴了 ocserv 的开发思路，可以完全兼容 AnyConnect 客户端。</p></blockquote><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/online.jpg" alt="online"></p><p>开源仓库：<a href="https://github.com/bjdgyc/anylink">https://github.com/bjdgyc/anylink</a></p><p><strong>AnyLink</strong> 最主要的功能莫过于<code>用户分组功能</code>.通过设置分组权限可以使不同用户或员工能访问的网段和路由也不同,加上支持 <strong>SMTP</strong> 邮件来分发密码,同时也支持 <strong>TOTP 动态令牌</strong> ,确实更适合小型企业的远程访问管理.但是<code>并不能</code>像 <strong>Openconnect VPN</strong> 一样支持证书登录,<strong>所以每次连接都需要手动输入密码</strong>.</p><h2 id="服务端安装"><a href="#服务端安装" class="headerlink" title="服务端安装"></a>服务端安装</h2><h4 id="1-安装Docker环境-解析域名"><a href="#1-安装Docker环境-解析域名" class="headerlink" title="1.安装Docker环境&amp;解析域名"></a>1.安装Docker环境&amp;解析域名</h4><p>参考 <a href="https://getdocker.quickso.cn/">https://getdocker.quickso.cn/</a></p><p>将你的域名解析到服务器</p><h4 id="2-拉取镜像"><a href="#2-拉取镜像" class="headerlink" title="2.拉取镜像"></a>2.拉取镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull bjdgyc/anylink:latest<br></code></pre></td></tr></table></figure><h4 id="3-生成密码和-jwt-secret"><a href="#3-生成密码和-jwt-secret" class="headerlink" title="3.生成密码和 jwt secret"></a>3.生成密码和 jwt secret</h4><p>首次运行以下命令来创建管理员密码.以下命令中含<code>rm</code>参数,仅用于执行创建密码的命令,会自行删除.将生成的<code>Passwd</code>和<code>secret</code>保存.</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs applescript">docker <span class="hljs-built_in">run</span> -<span class="hljs-keyword">it</span> <span class="hljs-comment">--rm bjdgyc/anylink tool -p your_password</span><br><span class="hljs-comment"># 生成 Passwd</span><br><span class="hljs-comment"># Passwd:$2a$10$iKPApINPOwuyUhZC/b7P0eI8chEukkpyxPEbYxqdS3BPTtImqStGW</span><br><br>docker <span class="hljs-built_in">run</span> -<span class="hljs-keyword">it</span> <span class="hljs-comment">--rm bjdgyc/anylink tool -s</span><br><span class="hljs-comment"># 生成 jwt secret</span><br><span class="hljs-comment"># Secret:r4-21-eDOrSAjtXL4k06PK0NFudNshMKh9euV09EQrsa9oEYlKaSgoa-CdY</span><br></code></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/3933217940.jpg" alt="img"></p><h4 id="4-获取配置目录"><a href="#4-获取配置目录" class="headerlink" title="4.获取配置目录"></a>4.获取配置目录</h4><p>复制以下命令,首次启动容器,拷贝配置文件到宿主机后删除容器.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -itd --name anylink --privileged=<span class="hljs-literal">true</span> bjdgyc/anylink<br></code></pre></td></tr></table></figure><p>使用 docker cp 将配置文件目录拷贝到当前目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">cp</span> anylink:/app/conf .<br></code></pre></td></tr></table></figure><p>删除容器</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">docker stop anylink<br>docker rm anylink<br></code></pre></td></tr></table></figure><h4 id="5-正式启动容器"><a href="#5-正式启动容器" class="headerlink" title="5.正式启动容器"></a>5.正式启动容器</h4><p>将 docker cp 拷贝出来的<code>conf</code>目录中的<code>server.toml</code>，进行修改</p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/image-20250211191625076.png" alt="image-20250211191625076"></p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/image-20250211191655733.png" alt="image-20250211191655733"></p><p>参考以下命令正式启动容器,注意本文示例<code>conf</code>目录存放于<code>/root</code>下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d \<br>    --name anylink \<br>    --restart always \<br>    --privileged=<span class="hljs-literal">true</span> \<br>    -p 55555:443 \<br>    -p 8800:8800 \<br>    -v /root/conf:/app/conf \<br>bjdgyc/anylink -c=/app/conf/server.toml<br></code></pre></td></tr></table></figure><h4 id="6-管理后台"><a href="#6-管理后台" class="headerlink" title="6.管理后台"></a>6.管理后台</h4><p>访问<code>内网IP:端口</code>,例如<code>https://IP:8800</code>输入<code>admin</code>密码登陆后台管理系统.</p><p><a href="https://ip:55555/">https://IP:55555</a> 即为VPN首页，可以自定义</p><p>后台管理非常简单明了,只需要配置<code>用户组</code>,<code>用户</code>即可开始使用,如需邮件分发密码功能可以在<code>邮件设置</code>中配置.</p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/image-20250211191205518.png" alt="image-20250211191205518"></p><p><code>其他设置</code>中可以配置Banner信息、自定义首页（支持HTML代码）、邮件分发模版等，可以根据自己的需求修改</p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/image-20250211191032651.png" alt="image-20250211191032651"></p><h4 id="7-用户组信息"><a href="#7-用户组信息" class="headerlink" title="7.用户组信息"></a>7.用户组信息</h4><p><code>添加用户组</code>只需要填写组名,其他保持默认,则表示该组用户所有流量都将被 VPN 服务器代理,属于完整的<code>全局代理</code>.</p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/image-20250209113308300.png" alt="image-20250209113308300"></p><p><code>包含路由</code>如果添加内网网段,例如网段为<code>10.0.0.0/24</code>,则表示该组用户<strong>可以访问内网设备</strong>,而互联网请求依旧使用<code>客户端本地的网络访问</code>.</p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/image-20250211191743260.png" alt="image-20250211191743260"></p><p><code>DNS 服务器</code>可根据需求自行设置</p><h4 id="8-用户信息"><a href="#8-用户信息" class="headerlink" title="8.用户信息"></a>8.用户信息</h4><p><code>添加新用户</code>并且分配<strong>用户组</strong>,<code>PIN 码</code>为客户端的登录密码,如果配置了 <strong>SMTP</strong> 并勾选了<code>发送邮件</code>,则会创建随机密码以邮件的形式发送.也可以手动设置密码.<code>OTP</code>功能如果没有需求关闭即可.</p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/image-20250209113446838.png" alt="image-20250209113446838"></p><p>自定义首页模板</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>XXXVPN系统<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        * &#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="language-css">            <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;Segoe UI&#x27;</span>, Arial, sans-serif;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f0f4f8</span>;</span><br><span class="language-css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.6</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.header</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">135deg</span>, <span class="hljs-number">#1a73e8</span>, <span class="hljs-number">#0d47a1</span>);</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: white;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">2rem</span> <span class="hljs-number">1rem</span>;</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">            <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">2px</span> <span class="hljs-number">10px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.1</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.container</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">max-width</span>: <span class="hljs-number">1200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">2rem</span> auto;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">1rem</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.card</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: white;</span><br><span class="language-css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">2rem</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">1.5rem</span>;</span><br><span class="language-css">            <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">2px</span> <span class="hljs-number">15px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.1</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.download-btn</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-number">#1a73e8</span>;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: white;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">12px</span> <span class="hljs-number">30px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">25px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">text-decoration</span>: none;</span><br><span class="language-css">            <span class="hljs-attribute">font-weight</span>: bold;</span><br><span class="language-css">            <span class="hljs-attribute">transition</span>: transform <span class="hljs-number">0.2s</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">1rem</span> <span class="hljs-number">0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.download-btn</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">2px</span>);</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-number">#1557b0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">h2</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#1a73e8</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">1rem</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border-left</span>: <span class="hljs-number">4px</span> solid <span class="hljs-number">#1a73e8</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">1rem</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">ul</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">list-style</span>: none;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">1rem</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">li</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0.5rem</span> <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">            <span class="hljs-attribute">align-items</span>: center;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">::before</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;✔&quot;</span>;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#1a73e8</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">1rem</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.notice</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-number">#fff3cd</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">1rem</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">1rem</span> <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border-left</span>: <span class="hljs-number">4px</span> solid <span class="hljs-number">#ffc107</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">footer</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">1.5rem</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-number">#1a273e</span>;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: white;</span><br><span class="language-css">            <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">3rem</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-keyword">@media</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">768px</span>) &#123;</span><br><span class="language-css">            <span class="hljs-selector-class">.container</span> &#123;</span><br><span class="language-css">                <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">0.5rem</span>;</span><br><span class="language-css">            &#125;</span><br><span class="language-css">            </span><br><span class="language-css">            <span class="hljs-selector-class">.card</span> &#123;</span><br><span class="language-css">                <span class="hljs-attribute">padding</span>: <span class="hljs-number">1.5rem</span>;</span><br><span class="language-css">            &#125;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>XXXVPN系统<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>安全连接 · 高效访问<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>客户端下载<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://ocserv.yydy.link:2023/&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;download-btn&quot;</span>&gt;</span>立即下载VPN客户端<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>支持版本：Windows / macOS / Linux / Android / iOS<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>支持客户端<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Cisco AnyConnect 客户端<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>OpenConnect 客户端<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>兼容标准SSL VPN协议<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>使用说明<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;notice&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>🔔 首次使用请先下载安装客户端，使用公司账号登录<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;padding-left: 2rem;&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>下载并安装对应客户端软件<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>输入服务器地址：vpn.abc.com<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>使用公司分配的账号密码登录<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>连接成功后即可访问内部资源<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>© 2025 欢哥科技 版权所有<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>技术支持：admin@huangetech.com<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="客户端安装"><a href="#客户端安装" class="headerlink" title="客户端安装"></a>客户端安装</h2><p><strong>下载客户端</strong></p><p><a href="https://www.cisco.com/">AnyConnect Secure Client</a> ( Windows&#x2F;macOS&#x2F;Linux&#x2F;Android&#x2F;iOS)</p><p><a href="https://gitlab.com/openconnect/openconnect">OpenConnect</a> (Windows&#x2F;macOS&#x2F;Linux)</p><p><a href="https://github.com/tlslink/anylink-client">三方 AnyLink Secure Client</a> (Windows&#x2F;macOS&#x2F;Linux)</p><p>【推荐】三方客户端下载地址( Windows&#x2F;macOS&#x2F;Linux&#x2F;Android&#x2F;iOS) <a href="https://ocserv.yydy.link:2023/">国内地址</a> <a href="https://cisco.yydy.link/#/">国外地址</a></p><p>OpenConnect Linux 客户端登陆脚本 （NAS可用）</p><p> <a href="https://github.com/muzihuaner/Openconnect-Login-Linux-ShellScript">https://github.com/muzihuaner/Openconnect-Login-Linux-ShellScript</a></p><p><strong>使用客户端</strong></p><p>安装客户端后，输入VPN服务器地址（有端口加端口）</p><p>点击链接，输入用户组、用户名、密码链接即可…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;AnyLink是一个企业级远程办公 ssl vpn 软件，可以支持多人同时在线使用。基于 openconnect 协议开发，并且借鉴了 ocserv 的开发思路，可以完全兼容 AnyConnect 客户端。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p</summary>
      
    
    
    
    <category term="教程" scheme="https://blog.quickso.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Docker" scheme="https://blog.quickso.cn/tags/Docker/"/>
    
    <category term="VPN" scheme="https://blog.quickso.cn/tags/VPN/"/>
    
    <category term="Anylink" scheme="https://blog.quickso.cn/tags/Anylink/"/>
    
  </entry>
  
  <entry>
    <title>Termux + Debian + Ollama 实现在手机上部署 DeepSeek-R1-1.5B</title>
    <link href="https://blog.quickso.cn/2025/02/02/Termux%20+%20Debian%20+%20Ollama%20%E5%AE%9E%E7%8E%B0%E5%9C%A8%E6%89%8B%E6%9C%BA%E4%B8%8A%E9%83%A8%E7%BD%B2%20DeepSeek-R1-1.5B/"/>
    <id>https://blog.quickso.cn/2025/02/02/Termux%20+%20Debian%20+%20Ollama%20%E5%AE%9E%E7%8E%B0%E5%9C%A8%E6%89%8B%E6%9C%BA%E4%B8%8A%E9%83%A8%E7%BD%B2%20DeepSeek-R1-1.5B/</id>
    <published>2025-02-02T04:53:08.000Z</published>
    <updated>2025-05-26T15:06:48.585Z</updated>
    
    <content type="html"><![CDATA[<h2 id="📱-环境要求"><a href="#📱-环境要求" class="headerlink" title="📱 环境要求"></a>📱 环境要求</h2><ul><li>Android 8.0+ 设备</li><li>剩余存储空间 ≥5GB</li><li>RAM ≥4GB（推荐6GB+）</li><li>稳定（国际）网络连接</li></ul><h2 id="一、Termux基础配置"><a href="#一、Termux基础配置" class="headerlink" title="一、Termux基础配置"></a>一、Termux基础配置</h2><h3 id="1-安装Termux"><a href="#1-安装Termux" class="headerlink" title="1. 安装Termux"></a>1. 安装Termux</h3><p>从 <a href="https://f-droid.org/packages/com.termux/">F-Droid</a> 下载最新版Termux（或者Google Play Store版本）</p><p>Github下载地址：<a href="https://github.com/termux/termux-app/releases">https://github.com/termux/termux-app/releases</a></p><h3 id="2-初始化环境"><a href="#2-初始化环境" class="headerlink" title="2. 初始化环境"></a>2. 初始化环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">termux-setup-storage <span class="hljs-comment">#获取存储权限</span><br>pkg update -y &amp;&amp; pkg upgrade -y <span class="hljs-comment">#更新</span><br>pkg install git cmake golang proot-distro <span class="hljs-comment">#安装用到的软件依赖</span><br></code></pre></td></tr></table></figure><h2 id="二、安装Debian系统"><a href="#二、安装Debian系统" class="headerlink" title="二、安装Debian系统"></a>二、安装Debian系统</h2><h3 id="1-部署Debian"><a href="#1-部署Debian" class="headerlink" title="1. 部署Debian"></a>1. 部署Debian</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">proot-distro install debian <span class="hljs-comment">#安装Debian</span><br>proot-distro login debian <span class="hljs-comment">#登陆Debian系统</span><br></code></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/image-20250202131439387.png" alt="image-20250202131439387"></p><h3 id="2-配置Debian环境"><a href="#2-配置Debian环境" class="headerlink" title="2. 配置Debian环境"></a>2. 配置Debian环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt update &amp;&amp; apt upgrade -y<br></code></pre></td></tr></table></figure><h3 id="3-安装Ollama（ARM64兼容版）"><a href="#3-安装Ollama（ARM64兼容版）" class="headerlink" title="3.安装Ollama（ARM64兼容版）"></a>3.安装Ollama（ARM64兼容版）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -fsSL https://ollama.com/install.sh | sh<br></code></pre></td></tr></table></figure><p>这个过程稍微有点慢~</p><h3 id="4-启动服务"><a href="#4-启动服务" class="headerlink" title="4.启动服务"></a>4.启动服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ollama serve<br><span class="hljs-comment"># 保持此终端运行</span><br></code></pre></td></tr></table></figure><h3 id="5-安装模型"><a href="#5-安装模型" class="headerlink" title="5.安装模型"></a>5.安装模型</h3><p>退回到桌面，不要关闭刚才的终端页面</p><p>长按 <strong>Termux</strong> 图标选择 “<strong>New session</strong>” 新建一个终端</p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/image-20250202131401181.png" alt="image-20250202131401181"></p><p>执行下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">proot-distro login debian <span class="hljs-comment">#登录安装的Debian系统</span><br>ollama run deepseek-r1:1.5b <span class="hljs-comment">#拉取模型</span><br></code></pre></td></tr></table></figure><p>拉取完毕就可以在命令行页面进行对话了</p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/image-20250202131617757.png" alt="image-20250202131617757"></p><h3 id="6-开启API"><a href="#6-开启API" class="headerlink" title="6.开启API"></a>6.开启API</h3><p>为了更方便使用，我们可以执行下面的命令开启API</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">OLLAMA_HOST=0.0.0.0<br>OLLAMA_ORIGINS=*<br>ollama serve<br></code></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/image-20250202131758742.png" alt="image-20250202131758742"></p><h3 id="7-配置chatbox"><a href="#7-配置chatbox" class="headerlink" title="7.配置chatbox"></a>7.配置chatbox</h3><p>下载安装chatbox<br>chatbox下载地址：<a href="https://chatboxai.app/zh/install?download=android_apk">https://chatboxai.app/zh/install?download=android_apk</a></p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/image-20250202131921087.png" alt="image-20250202131921087"></p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/image-20250202131953494.png" alt="image-20250202131953494"></p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/image-20250202132018691.png" alt="image-20250202132018691"></p><p>点“保存”即可。</p><p>最后，关闭chatbox和termux（可以直接划后台）<br>此时，准备工作就结束了。</p><p>部署完成之后，每次使用前，需要打开termux，执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">proot-distro login debian<br>ollama serve<br></code></pre></td></tr></table></figure><p>然后打开chatbox，就可以与deepseek对话了</p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/image-20250202132125763.png" alt="image-20250202132125763"></p><p>由于手机会限制后台应用的运行速度，且容易杀后台，使用时建议把termux放在前台，chatbox挂在小窗，这样模型才能快速流畅回答问题。</p><h3 id="8-结语"><a href="#8-结语" class="headerlink" title="8.结语"></a>8.结语</h3><p>快去折腾吧~ 碎碎念：要是能调用 手机GPU就好了~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;📱-环境要求&quot;&gt;&lt;a href=&quot;#📱-环境要求&quot; class=&quot;headerlink&quot; title=&quot;📱 环境要求&quot;&gt;&lt;/a&gt;📱 环境要求&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Android 8.0+ 设备&lt;/li&gt;
&lt;li&gt;剩余存储空间 ≥5GB&lt;/li&gt;
&lt;l</summary>
      
    
    
    
    <category term="教程" scheme="https://blog.quickso.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="DeepSeek" scheme="https://blog.quickso.cn/tags/DeepSeek/"/>
    
    <category term="大模型" scheme="https://blog.quickso.cn/tags/%E5%A4%A7%E6%A8%A1%E5%9E%8B/"/>
    
    <category term="Termux" scheme="https://blog.quickso.cn/tags/Termux/"/>
    
  </entry>
  
  <entry>
    <title>本地部署免费开源DeepSeek-R1大模型</title>
    <link href="https://blog.quickso.cn/2025/01/27/%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E5%85%8D%E8%B4%B9%E5%BC%80%E6%BA%90DeepSeek-R1%E5%A4%A7%E6%A8%A1%E5%9E%8B/"/>
    <id>https://blog.quickso.cn/2025/01/27/%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E5%85%8D%E8%B4%B9%E5%BC%80%E6%BA%90DeepSeek-R1%E5%A4%A7%E6%A8%A1%E5%9E%8B/</id>
    <published>2025-01-27T04:47:32.000Z</published>
    <updated>2025-05-26T15:06:48.614Z</updated>
    
    <content type="html"><![CDATA[<p>近期，杭州深度求索人工智能基础技术研究有限公司正式发布了其最新研发的高性能AI推理模型——<strong>DeepSeekR1</strong>。该模型在数学、代码和自然语言推理等任务上表现卓越，性能直接对标OpenAI的o1正式版，同时以开源形式向全球开发者开放，并使用MIT协议开源，支持免费商用，无需申请授权，为LLM大模型开源世界又补给了满满一仓库弹药。</p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/20250127133659012.png"></p><h4 id="DeepSeek-R1的核心优势"><a href="#DeepSeek-R1的核心优势" class="headerlink" title="DeepSeek R1的核心优势"></a>DeepSeek R1的核心优势</h4><p>DeepSeek R1的最大亮点在于其通过强化学习（RL）技术显著提升了模型的推理能力，且仅需极少量标注数据即可实现高效训练。与OpenAI的o1相比，R1在多个基准测试中表现优异，同时价格仅为o1的几十分之一，具有极高的性价比。</p><ol><li><strong>强化学习驱动的推理能力</strong><br>R1在后训练阶段大规模应用了强化学习技术，无需依赖大量监督微调（SFT）数据，即可显著提升模型的推理能力。这一创新方法不仅降低了训练成本，还使模型在复杂任务中表现出色。</li><li><strong>长链推理与模型蒸馏</strong><br>R1采用了长链推理（Chain-of-Thought, CoT）技术，能够逐步分解复杂问题，并通过多步骤逻辑推理解决问题。此外，R1支持模型蒸馏，开发者可以将其推理能力迁移到更小型的模型中，满足特定场景需求。</li><li><strong>开源与灵活的许可证</strong><br>R1遵循MIT License开源协议，允许用户自由使用、修改和商用。同时，DeepSeek还开源了R1-Zero和多个蒸馏后的小模型，进一步推动了AI技术的普及与创新。</li></ol><p>各项性能指标更是和OpenAI-o1 模型不相上下，甚至做到了小部分的超越，关键是开源的，我们可以本地部署使用</p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/20250127130112854.png"></p><h2 id="1、本地部署"><a href="#1、本地部署" class="headerlink" title="1、本地部署"></a>1、本地部署</h2><p>我们这里使用Ollama来进行模型部署,安装你的系统对应的客户端</p><h3 id="安装Ollama"><a href="#安装Ollama" class="headerlink" title="安装Ollama"></a>安装Ollama</h3><p>Ollama 官方版：<a href="https://ollama.com/">ollama.com&#x2F;</a></p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/20250127130631788.png"></p><h3 id="安装模型"><a href="#安装模型" class="headerlink" title="安装模型"></a>安装模型</h3><blockquote><p>如果使用 <strong>4-bit 量化</strong>，显存需求：</p><ul><li><p><strong>1.5B</strong>：约 <strong>1 GB</strong></p></li><li><p><strong>7B</strong>：约 <strong>4 GB</strong></p></li><li><p><strong>8B</strong>：约 <strong>4.5 GB</strong></p></li><li><p><strong>14B</strong>：约 <strong>8 GB</strong></p></li><li><p><strong>32B</strong>：约 <strong>18 GB</strong></p></li><li><p><strong>70B</strong>：约 <strong>40 GB</strong> </p></li><li><p>对于资源有限的用户，推荐使用 <strong>1.5B</strong> 或 <strong>7B</strong> 模型，它们可以在单张消费级显卡上运行。</p></li><li><p>如果需要更高的性能，可以选择 <strong>14B</strong> 或 <strong>32B</strong> 模型，但需要多 GPU 配置。</p></li><li><p><strong>70B</strong> 模型适合高端计算环境，需要多张高端 GPU 支持。</p></li></ul></blockquote><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/image-20250127131814855.png" alt="image-20250127131814855"></p><p><strong>1.5B Qwen DeepSeek R1</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ollama</span> run deepseek-r1:<span class="hljs-number">1</span>.<span class="hljs-number">5</span>b<br></code></pre></td></tr></table></figure><p><strong>7B Qwen DeepSeek R1</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">ollama <span class="hljs-built_in">run</span> deepseek-r1:7b<br></code></pre></td></tr></table></figure><p><strong>8B Llama DeepSeek R1</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">ollama <span class="hljs-built_in">run</span> deepseek-r1:8b<br></code></pre></td></tr></table></figure><p><strong>14B Qwen DeepSeek R1</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">ollama <span class="hljs-built_in">run</span> deepseek-r1:14b<br></code></pre></td></tr></table></figure><p><strong>32B Qwen DeepSeek R1</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">ollama <span class="hljs-built_in">run</span> deepseek-r1:32b<br></code></pre></td></tr></table></figure><p><strong>70B Llama DeepSeek R1</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">ollama <span class="hljs-built_in">run</span> deepseek-r1:70b<br></code></pre></td></tr></table></figure><p>安装完就可以使用终端去聊天了</p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/image-20250127131814855.png" alt="image-20250127131814855"></p><h3 id="安装控制端"><a href="#安装控制端" class="headerlink" title="安装控制端"></a>安装控制端</h3><p>为了更方便使用我们安装一个控制端，也可以使用其他的</p><p>浏览器<strong>Web UI 控制端【<a href="https://chromewebstore.google.com/detail/page-assist-%E6%9C%AC%E5%9C%B0-ai-%E6%A8%A1%E5%9E%8B%E7%9A%84-web/jfgfiigpkhlkbnfnbobbkinehhfdhndo">点击安装</a>】</strong></p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/image-20250127130936244.png" alt="image-20250127130936244"></p><h2 id="2-更多模型下载"><a href="#2-更多模型下载" class="headerlink" title="2. 更多模型下载"></a>2. 更多模型下载</h2><h3 id="DeepSeek-R1"><a href="#DeepSeek-R1" class="headerlink" title="DeepSeek-R1"></a>DeepSeek-R1</h3><table><thead><tr><th align="center"><strong>模型</strong></th><th align="center"><strong>#总参数</strong></th><th align="center"><strong>#已激活参数</strong></th><th align="center"><strong>上下文长度</strong></th><th align="center"><strong>下载</strong></th></tr></thead><tbody><tr><td align="center">DeepSeek-R1-Zero</td><td align="center">671B</td><td align="center">37B</td><td align="center">128千</td><td align="center"><a href="https://huggingface.co/deepseek-ai/DeepSeek-R1-Zero">🤗 HuggingFace</a></td></tr><tr><td align="center">DeepSeek-R1</td><td align="center">671B</td><td align="center">37B</td><td align="center">128千</td><td align="center"><a href="https://huggingface.co/deepseek-ai/DeepSeek-R1">🤗 HuggingFace</a></td></tr></tbody></table><p>DeepSeek-R1-Zero 和 DeepSeek-R1 基于 DeepSeek-V3-Base 进行训练。有关模型架构的更多详细信息，请参阅<a href="https://github.com/deepseek-ai/DeepSeek-V3">DeepSeek-V3</a>存储库。</p><h3 id="DeepSeek-R1-Distill-模型"><a href="#DeepSeek-R1-Distill-模型" class="headerlink" title="DeepSeek-R1-Distill 模型"></a>DeepSeek-R1-Distill 模型</h3><table><thead><tr><th align="center"><strong>模型</strong></th><th align="center"><strong>基础模型</strong></th><th align="center"><strong>下载</strong></th></tr></thead><tbody><tr><td align="center">DeepSeek-R1-Distill-Qwen-1.5B</td><td align="center"><a href="https://huggingface.co/Qwen/Qwen2.5-Math-1.5B">Qwen2.5-Math-1.5B</a></td><td align="center"><a href="https://huggingface.co/deepseek-ai/DeepSeek-R1-Distill-Qwen-1.5B">🤗 HuggingFace</a></td></tr><tr><td align="center">DeepSeek-R1-Distill-Qwen-7B</td><td align="center"><a href="https://huggingface.co/Qwen/Qwen2.5-Math-7B">Qwen2.5-Math-7B</a></td><td align="center"><a href="https://huggingface.co/deepseek-ai/DeepSeek-R1-Distill-Qwen-7B">🤗 HuggingFace</a></td></tr><tr><td align="center">DeepSeek-R1-Distill-Llama-8B</td><td align="center"><a href="https://huggingface.co/meta-llama/Llama-3.1-8B">Llama-3.1-8B</a></td><td align="center"><a href="https://huggingface.co/deepseek-ai/DeepSeek-R1-Distill-Llama-8B">🤗 HuggingFace</a></td></tr><tr><td align="center">DeepSeek-R1-Distill-Qwen-14B</td><td align="center"><a href="https://huggingface.co/Qwen/Qwen2.5-14B">Qwen2.5-14B</a></td><td align="center"><a href="https://huggingface.co/deepseek-ai/DeepSeek-R1-Distill-Qwen-14B">🤗 HuggingFace</a></td></tr><tr><td align="center">DeepSeek-R1-Distill-Qwen-32B</td><td align="center"><a href="https://huggingface.co/Qwen/Qwen2.5-32B">Qwen2.5-32B</a></td><td align="center"><a href="https://huggingface.co/deepseek-ai/DeepSeek-R1-Distill-Qwen-32B">🤗 HuggingFace</a></td></tr><tr><td align="center">DeepSeek-R1-Distill-Llama-70B</td><td align="center"><a href="https://huggingface.co/meta-llama/Llama-3.3-70B-Instruct">Llama-3.3-70B-Instruct</a></td><td align="center"><a href="https://huggingface.co/deepseek-ai/DeepSeek-R1-Distill-Llama-70B">🤗 HuggingFace</a></td></tr></tbody></table><p>DeepSeek-R1-Distill 模型基于开源模型进行了微调，使用了 DeepSeek-R1 生成的样本。我们对其配置和分词器进行了轻微更改。请使用我们的设置来运行这些模型。</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="4-评估结果"><a href="#4-评估结果" class="headerlink" title="4.评估结果"></a>4.评估结果</h2><h3 id="DeepSeek-R1-评估"><a href="#DeepSeek-R1-评估" class="headerlink" title="DeepSeek-R1-评估"></a>DeepSeek-R1-评估</h3><p>对于我们所有的模型，最大生成长度设置为 32,768 个 token。对于需要采样的基准，我们使用的温度为0.6，top-p 值为0.95，并为每个查询生成 64 个响应来估计 pass@1。</p><table><thead><tr><th align="center">类别</th><th align="center">基准（公制）</th><th align="center">克劳德-3.5-十四行诗-1022</th><th align="center">GPT-4o 0513</th><th align="center">DeepSeek V3</th><th align="center">OpenAI o1-mini</th><th align="center">OpenAI o1-1217</th><th align="center">DeepSeek R1</th></tr></thead><tbody><tr><td align="center"></td><td align="center">建筑学</td><td align="center">–</td><td align="center">–</td><td align="center">教育部</td><td align="center">–</td><td align="center">–</td><td align="center">教育部</td></tr><tr><td align="center"></td><td align="center"># 激活参数</td><td align="center">–</td><td align="center">–</td><td align="center">37B</td><td align="center">–</td><td align="center">–</td><td align="center">37B</td></tr><tr><td align="center"></td><td align="center"># 总参数</td><td align="center">–</td><td align="center">–</td><td align="center">671B</td><td align="center">–</td><td align="center">–</td><td align="center">671B</td></tr><tr><td align="center">英语</td><td align="center">MMLU（通过@1）</td><td align="center">88.3</td><td align="center">87.2</td><td align="center">88.5</td><td align="center">85.2</td><td align="center"><strong>91.8</strong></td><td align="center">90.8</td></tr><tr><td align="center"></td><td align="center">MMLU-Redux（EM）</td><td align="center">88.9</td><td align="center">88.0</td><td align="center">89.1</td><td align="center">86.7</td><td align="center">–</td><td align="center"><strong>92.9</strong></td></tr><tr><td align="center"></td><td align="center">MMLU-Pro（EM）</td><td align="center">78.0</td><td align="center">72.6</td><td align="center">75.9</td><td align="center">80.3</td><td align="center">–</td><td align="center"><strong>84.0</strong></td></tr><tr><td align="center"></td><td align="center">掉落 (3 发 F1)</td><td align="center">88.3</td><td align="center">83.7</td><td align="center">91.6</td><td align="center">83.9</td><td align="center">90.2</td><td align="center"><strong>92.2</strong></td></tr><tr><td align="center"></td><td align="center">IF-Eval（提示严格）</td><td align="center"><strong>86.5</strong></td><td align="center">84.3</td><td align="center">86.1</td><td align="center">84.8</td><td align="center">–</td><td align="center">83.3</td></tr><tr><td align="center"></td><td align="center">GPQA-钻石级 (Pass@1)</td><td align="center">65.0</td><td align="center">49.9</td><td align="center">59.1</td><td align="center">60.0</td><td align="center"><strong>75.7</strong></td><td align="center">71.5</td></tr><tr><td align="center"></td><td align="center">SimpleQA（正确）</td><td align="center">28.4</td><td align="center">38.2</td><td align="center">24.9</td><td align="center">7.0</td><td align="center"><strong>47.0</strong></td><td align="center">30.1</td></tr><tr><td align="center"></td><td align="center">框架（配件）</td><td align="center">72.5</td><td align="center">80.5</td><td align="center">73.3</td><td align="center">76.9</td><td align="center">–</td><td align="center"><strong>82.5</strong></td></tr><tr><td align="center"></td><td align="center">AlpacaEval2.0 (LC-胜率)</td><td align="center">52.0</td><td align="center">51.1</td><td align="center">70.0</td><td align="center">57.8</td><td align="center">–</td><td align="center"><strong>87.6</strong></td></tr><tr><td align="center"></td><td align="center">ArenaHard（GPT-4-1106）</td><td align="center">85.2</td><td align="center">80.4</td><td align="center">85.5</td><td align="center">92.0</td><td align="center">–</td><td align="center"><strong>92.3</strong></td></tr><tr><td align="center">代码</td><td align="center">LiveCodeBench (Pass@1-COT)</td><td align="center">33.8</td><td align="center">34.2</td><td align="center">–</td><td align="center">53.8</td><td align="center">63.4</td><td align="center"><strong>65.9</strong></td></tr><tr><td align="center"></td><td align="center">Codeforces（百分位数）</td><td align="center">20.3</td><td align="center">23.6</td><td align="center">58.7</td><td align="center">93.4</td><td align="center"><strong>96.6</strong></td><td align="center">96.3</td></tr><tr><td align="center"></td><td align="center">Codeforces（评级）</td><td align="center">717</td><td align="center">759</td><td align="center">1134</td><td align="center">1820</td><td align="center"><strong>2061</strong></td><td align="center">2029</td></tr><tr><td align="center"></td><td align="center">SWE 已验证（已解决）</td><td align="center"><strong>50.8</strong></td><td align="center">38.8</td><td align="center">42.0</td><td align="center">41.6</td><td align="center">48.9</td><td align="center">49.2</td></tr><tr><td align="center"></td><td align="center">Aider-Polyglot (Acc.)</td><td align="center">45.3</td><td align="center">16.0</td><td align="center">49.6</td><td align="center">32.9</td><td align="center"><strong>61.7</strong></td><td align="center">53.3</td></tr><tr><td align="center">数学</td><td align="center">AIME 2024（通行证@1）</td><td align="center">16.0</td><td align="center">9.3</td><td align="center">39.2</td><td align="center">63.6</td><td align="center">79.2</td><td align="center"><strong>79.8</strong></td></tr><tr><td align="center"></td><td align="center">数学-500 (通过@1)</td><td align="center">78.3</td><td align="center">74.6</td><td align="center">90.2</td><td align="center">90.0</td><td align="center">96.4</td><td align="center"><strong>97.3</strong></td></tr><tr><td align="center"></td><td align="center">CNMO 2024 (通行证@1)</td><td align="center">13.1</td><td align="center">10.8</td><td align="center">43.2</td><td align="center">67.6</td><td align="center">–</td><td align="center"><strong>78.8</strong></td></tr><tr><td align="center">中文</td><td align="center">CLUEWSC（EM）</td><td align="center">85.4</td><td align="center">87.9</td><td align="center">90.9</td><td align="center">89.9</td><td align="center">–</td><td align="center"><strong>92.8</strong></td></tr><tr><td align="center"></td><td align="center">C-评估（EM）</td><td align="center">76.7</td><td align="center">76.0</td><td align="center">86.5</td><td align="center">68.9</td><td align="center">–</td><td align="center"><strong>91.8</strong></td></tr><tr><td align="center"></td><td align="center">C-SimpleQA（正确）</td><td align="center">55.4</td><td align="center">58.7</td><td align="center"><strong>68.0</strong></td><td align="center">40.3</td><td align="center">–</td><td align="center">63.7</td></tr></tbody></table><h3 id="蒸馏模型评估"><a href="#蒸馏模型评估" class="headerlink" title="蒸馏模型评估"></a>蒸馏模型评估</h3><table><thead><tr><th align="center">模型</th><th align="center">AIME 2024 通行证@1</th><th align="center">AIME 2024 缺点@64</th><th align="center">MATH-500 通过@1</th><th align="center">GPQA 钻石通行证@1</th><th align="center">LiveCodeBench 通行证@1</th><th align="center">CodeForces 评级</th></tr></thead><tbody><tr><td align="center">GPT-4o-0513</td><td align="center">9.3</td><td align="center">13.4</td><td align="center">74.6</td><td align="center">49.9</td><td align="center">32.9</td><td align="center">759</td></tr><tr><td align="center">克劳德-3.5-十四行诗-1022</td><td align="center">16.0</td><td align="center">26.7</td><td align="center">78.3</td><td align="center">65.0</td><td align="center">38.9</td><td align="center">717</td></tr><tr><td align="center">o1-迷你</td><td align="center">63.6</td><td align="center">80.0</td><td align="center">90.0</td><td align="center">60.0</td><td align="center">53.8</td><td align="center"><strong>1820</strong></td></tr><tr><td align="center">QwQ-32B-预览</td><td align="center">44.0</td><td align="center">60.0</td><td align="center">90.6</td><td align="center">54.5</td><td align="center">41.9</td><td align="center">1316</td></tr><tr><td align="center">DeepSeek-R1-Distill-Qwen-1.5B</td><td align="center">28.9</td><td align="center">52.7</td><td align="center">83.9</td><td align="center">33.8</td><td align="center">16.9</td><td align="center">954</td></tr><tr><td align="center">DeepSeek-R1-Distill-Qwen-7B</td><td align="center">55.5</td><td align="center">83.3</td><td align="center">92.8</td><td align="center">49.1</td><td align="center">37.6</td><td align="center">1189</td></tr><tr><td align="center">DeepSeek-R1-Distill-Qwen-14B</td><td align="center">69.7</td><td align="center">80.0</td><td align="center">93.9</td><td align="center">59.1</td><td align="center">53.1</td><td align="center">1481</td></tr><tr><td align="center">DeepSeek-R1-Distill-Qwen-32B</td><td align="center"><strong>72.6</strong></td><td align="center">83.3</td><td align="center">94.3</td><td align="center">62.1</td><td align="center">57.2</td><td align="center">1691</td></tr><tr><td align="center">DeepSeek-R1-Distill-Llama-8B</td><td align="center">50.4</td><td align="center">80.0</td><td align="center">89.1</td><td align="center">49.0</td><td align="center">39.6</td><td align="center">1205</td></tr><tr><td align="center">DeepSeek-R1-Distill-Llama-70B</td><td align="center">70.0</td><td align="center"><strong>86.7</strong></td><td align="center"><strong>94.5</strong></td><td align="center"><strong>65.2</strong></td><td align="center"><strong>57.5</strong></td><td align="center">1633</td></tr></tbody></table><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="模型加载失败"><a href="#模型加载失败" class="headerlink" title="模型加载失败"></a>模型加载失败</h3><ul><li>确保模型名称正确。</li><li>检查网络连接，确保能够访问模型仓库。</li></ul><h3 id="GPU-不支持"><a href="#GPU-不支持" class="headerlink" title="GPU 不支持"></a>GPU 不支持</h3><ul><li>检查 CUDA 和驱动是否安装正确。</li><li>确保 Ollama 版本支持 GPU。</li></ul><h3 id="性能问题"><a href="#性能问题" class="headerlink" title="性能问题"></a>性能问题</h3><ul><li>尝试减少批量大小或使用更小的模型变体。</li><li>确保硬件资源充足。</li></ul><hr><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://ollama.ai/docs">Ollama 官方文档</a></li><li><a href="https://huggingface.co/models">Hugging Face 模型仓库</a></li><li><a href="https://github.com/deepseek-ai/DeepSeek-R1">DeepSeek-R1官方仓库</a></li></ul><hr><p>使用 Ollama 客户端轻松部署和运行 DeepSeek-R1 模型。如果有任何问题，可以参考官方文档或联系支持团队。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;近期，杭州深度求索人工智能基础技术研究有限公司正式发布了其最新研发的高性能AI推理模型——&lt;strong&gt;DeepSeekR1&lt;/strong&gt;。该模型在数学、代码和自然语言推理等任务上表现卓越，性能直接对标OpenAI的o1正式版，同时以开源形式向全球开发者开放，并使用M</summary>
      
    
    
    
    <category term="教程" scheme="https://blog.quickso.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="大模型" scheme="https://blog.quickso.cn/tags/%E5%A4%A7%E6%A8%A1%E5%9E%8B/"/>
    
    <category term="Deepseek" scheme="https://blog.quickso.cn/tags/Deepseek/"/>
    
    <category term="人工智能" scheme="https://blog.quickso.cn/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>使用tunasync搭建自己的开源软件镜像仓库</title>
    <link href="https://blog.quickso.cn/2025/01/03/%E4%BD%BF%E7%94%A8tunasync%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/"/>
    <id>https://blog.quickso.cn/2025/01/03/%E4%BD%BF%E7%94%A8tunasync%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/</id>
    <published>2025-01-03T15:43:01.000Z</published>
    <updated>2025-05-26T15:06:48.598Z</updated>
    
    <content type="html"><![CDATA[<p>在开源软件的使用中，镜像仓库（Mirror Repository）扮演着至关重要的角色。它们为全球用户提供快速、可靠的软件下载服务。特别是在国内，由于网络限制，访问官方仓库往往较为缓慢，因此搭建一个自己的镜像仓库就显得尤为重要。而 <strong><a href="https://github.com/tuna/tunasync/">TunaSync</a></strong>，作为一个开源的同步工具，提供了简便的方式来搭建和管理自己的镜像仓库。</p><p><a href="https://github.com/tuna/tunasync">tunasync</a> 是<a href="https://mirrors.tuna.tsinghua.edu.cn/">清华大学 TUNA 镜像源</a>目前使用的镜像方案。</p><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><p>镜像站需要一台服务器，如果有条件，建议准备一台专用的X86物理服务器作为镜像站的服务器。服务器推荐配置：</p><blockquote><p>CPU: 8 核心 2.5GHz 以上</p><p>内存: 64 GB以上</p><p>硬盘: 3TB 以上，越大越好</p><p>网络: 千兆上行带宽及以上</p><p>系统：Centos8&#x2F;9及其衍生版本、Debian10&#x2F;11&#x2F;12及其衍生版本</p></blockquote><p>当然，如果条件不具备，以上配置可以无视，选择自己最好配置的机器即可，毕竟服务器配置还是取决于最终用户的需求。</p><p>特别说要说明的是，硬盘大小要求必须超过需要同步的源文件大小，比如需要同时同步 CentOS 与 Ubuntu，就需要准备一块 1.6T 以上大小的硬盘。每个镜像的具体大小可以在清华大学开源软件镜像站 <a href="https://mirrors.tuna.tsinghua.edu.cn/status/#syncing-status">同步状态</a> 页面查到。</p><h2 id="2-同步源与架构选择"><a href="#2-同步源与架构选择" class="headerlink" title="2. 同步源与架构选择"></a>2. 同步源与架构选择</h2><p>在官方提供的源列表中选择最方便的同步源（最好是支持 rsync 的国内镜像源，但国内目前提供 rsync 服务的镜像源不多，以下是网络收集的部分 rsync 源）。</p><p>Ubuntu 源列表：<a href="https://launchpad.net/ubuntu/+archivemirrors">https://launchpad.net/ubuntu/+archivemirrors</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">rsync:<span class="hljs-regexp">//mi</span>rrors.shuosc.org<span class="hljs-regexp">/ubuntu/</span><br>rsync:<span class="hljs-regexp">//mi</span>rrors.sohu.com<span class="hljs-regexp">/ubuntu/</span><br>rsync:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/ubuntu/</span><br>rsync:<span class="hljs-regexp">//mi</span>rrors.ustc.edu.cn<span class="hljs-regexp">/ubuntu/</span><br>rsync:<span class="hljs-regexp">//mi</span>rrors.yun-idc.com<span class="hljs-regexp">/ubuntu/</span><br></code></pre></td></tr></table></figure><p>CentOS 源列表：<a href="https://www.centos.org/download/mirrors/">https://www.centos.org/download/mirrors/</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">rsync:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/centos/</span><br>rsync:<span class="hljs-regexp">//mi</span>rror.es.its.nyu.edu<span class="hljs-regexp">/centos/</span><br>rsync:<span class="hljs-regexp">//</span>centos.sonn.com<span class="hljs-regexp">/CentOS/</span><br></code></pre></td></tr></table></figure><p>EPEL 源列表：<a href="https://www.centos.org/download/mirrors/">https://admin.fedoraproject.org/mirrormanager/mirrors/EPEL</a></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">rsync:</span><span class="hljs-comment">//mirrors.yun-idc.com/epel</span><br><span class="hljs-symbol">rsync:</span><span class="hljs-comment">//rsync.mirrors.ustc.edu.cn/epel</span><br></code></pre></td></tr></table></figure><h2 id="3-开始安装"><a href="#3-开始安装" class="headerlink" title="3.开始安装"></a>3.开始安装</h2><h4 id="安装需要的软件"><a href="#安装需要的软件" class="headerlink" title="安装需要的软件"></a>安装需要的软件</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> rsync wget<br></code></pre></td></tr></table></figure><h4 id="下载tunasync"><a href="#下载tunasync" class="headerlink" title="下载tunasync"></a>下载tunasync</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//g</span>h-proxy.com<span class="hljs-regexp">/https:/</span><span class="hljs-regexp">/github.com/</span>tuna<span class="hljs-regexp">/tunasync/</span>releases<span class="hljs-regexp">/download/</span>v0.<span class="hljs-number">8.0</span>/tunasync-linux-amd64-bin.tar.gz<br><span class="hljs-comment">#基于amd64，如果是ARM系列，请去https://github.com/tuna/tunasync/releases自行替换下载一个</span><br>tar xf tunasync-linux-amd64-bin.tar.gz<br>mv tunasync <span class="hljs-regexp">/usr/</span>bin/<br>mv tunasynctl <span class="hljs-regexp">/usr/</span>bin/<br></code></pre></td></tr></table></figure><h4 id="创建仓库文件夹"><a href="#创建仓库文件夹" class="headerlink" title="创建仓库文件夹"></a>创建仓库文件夹</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">mkdir -p /home/www/mirrors<br></code></pre></td></tr></table></figure><h4 id="创建日志文件夹"><a href="#创建日志文件夹" class="headerlink" title="创建日志文件夹"></a>创建日志文件夹</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">mkdir -p /home/www/mirrors/logs<br></code></pre></td></tr></table></figure><h4 id="创建配置文件夹"><a href="#创建配置文件夹" class="headerlink" title="创建配置文件夹"></a>创建配置文件夹</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> /etc/tunasync<br></code></pre></td></tr></table></figure><h4 id="创建manager的配置文件"><a href="#创建manager的配置文件" class="headerlink" title="创建manager的配置文件"></a>创建manager的配置文件</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">vim</span> /etc/tunasync/manager.<span class="hljs-keyword">conf</span><br></code></pre></td></tr></table></figure><p>将以下内容根据自己的需求修改后写入manager的配置文件内</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">debug</span> = <span class="hljs-literal">false</span><br> <br><span class="hljs-section">[server]</span><br><span class="hljs-attr">addr</span> = <span class="hljs-string">&quot;127.0.0.1&quot;</span> <span class="hljs-comment">#manager服务的监听地址，默认127.0.0.1一般就可以了</span><br><span class="hljs-attr">port</span> = <span class="hljs-number">12345</span> <span class="hljs-comment"># manager服务监听端口</span><br><span class="hljs-attr">ssl_cert</span> = <span class="hljs-string">&quot;&quot;</span> <span class="hljs-comment">#证书配置，可为空</span><br><span class="hljs-attr">ssl_key</span> = <span class="hljs-string">&quot;&quot;</span> <span class="hljs-comment">#证书配置，可为空</span><br> <br><span class="hljs-section">[files]</span><br><span class="hljs-attr">db_type</span> = <span class="hljs-string">&quot;bolt&quot;</span><br><span class="hljs-attr">db_file</span> = <span class="hljs-string">&quot;/etc/tunasync/manager.db&quot;</span> <span class="hljs-comment">#数据库文件位置</span><br><span class="hljs-attr">ca_cert</span> = <span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="创建worker-conf配置文件"><a href="#创建worker-conf配置文件" class="headerlink" title="创建worker.conf配置文件"></a>创建worker.conf配置文件</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">vim</span> /etc/tunasync/worker.<span class="hljs-keyword">conf</span><br></code></pre></td></tr></table></figure><p>将以下内容根据自己的需求修改后写入worker的配置文件内，mirrors部分仅作示范写了两个，可以根据自身需要自由添加或删减</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[global]</span><br><span class="hljs-attr">name</span> = <span class="hljs-string">&quot;worker&quot;</span> <span class="hljs-comment"># worker名字</span><br><span class="hljs-attr">log_dir</span> = <span class="hljs-string">&quot;/home/www/mirrors/logs/&#123;&#123;.Name&#125;&#125;&quot;</span> <span class="hljs-comment"># 日志存储位置</span><br><span class="hljs-attr">mirror_dir</span> = <span class="hljs-string">&quot;/home/www/mirrors&quot;</span> <span class="hljs-comment"># 仓库存储位置</span><br><span class="hljs-attr">concurrent</span> = <span class="hljs-number">10</span> <span class="hljs-comment"># 线程数</span><br><span class="hljs-attr">interval</span> = <span class="hljs-number">240</span> <span class="hljs-comment"># 同步周期，单位分钟</span><br> <br><span class="hljs-section">[manager]</span><br><span class="hljs-attr">api_base</span> = <span class="hljs-string">&quot;http://127.0.0.1:12345&quot;</span> <span class="hljs-comment"># manager的API地址</span><br><span class="hljs-attr">token</span> = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-attr">ca_cert</span> = <span class="hljs-string">&quot;&quot;</span><br> <br><span class="hljs-section">[cgroup]</span><br><span class="hljs-attr">enable</span> = <span class="hljs-literal">false</span><br><span class="hljs-attr">base_path</span> = <span class="hljs-string">&quot;/sys/fs/cgroup&quot;</span><br><span class="hljs-attr">group</span> = <span class="hljs-string">&quot;tunasync&quot;</span><br> <br><span class="hljs-section">[server]</span><br><span class="hljs-attr">hostname</span> = <span class="hljs-string">&quot;localhost&quot;</span><br><span class="hljs-attr">listen_addr</span> = <span class="hljs-string">&quot;127.0.0.1&quot;</span><br><span class="hljs-attr">listen_port</span> = <span class="hljs-number">6000</span><br><span class="hljs-attr">ssl_cert</span> = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-attr">ssl_key</span> = <span class="hljs-string">&quot;&quot;</span><br> <br><span class="hljs-section">[[mirrors]]</span><br><span class="hljs-attr">name</span> = <span class="hljs-string">&quot;centos&quot;</span><br><span class="hljs-attr">provider</span> = <span class="hljs-string">&quot;rsync&quot;</span><br><span class="hljs-attr">upstream</span> = <span class="hljs-string">&quot;rsync://ftp.kaist.ac.kr/CentOS/&quot;</span><br><span class="hljs-attr">use_ipv6</span> = <span class="hljs-literal">false</span><br> <br><span class="hljs-section">[[mirrors]]</span><br><span class="hljs-attr">name</span> = <span class="hljs-string">&quot;ubuntu&quot;</span><br><span class="hljs-attr">provider</span> = <span class="hljs-string">&quot;rsync&quot;</span><br><span class="hljs-attr">upstream</span> = <span class="hljs-string">&quot;rsync://ftp.kaist.ac.kr/ubuntu/&quot;</span><br><span class="hljs-attr">use_ipv6</span> = <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h4 id="自定义同步脚本"><a href="#自定义同步脚本" class="headerlink" title="自定义同步脚本"></a>自定义同步脚本</h4><p>以Github为例</p><p>创建文件夹</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">mkdir -p /home/www/mirrors/scripts<br></code></pre></td></tr></table></figure><p>在worker.conf文件添加</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[[mirrors]]</span><br><span class="hljs-attr">name</span> = <span class="hljs-string">&quot;github-release&quot;</span><br><span class="hljs-attr">provider</span> = <span class="hljs-string">&quot;command&quot;</span><br><span class="hljs-attr">upstream</span> = <span class="hljs-string">&quot;https://api.github.com/repos/&quot;</span><br><span class="hljs-attr">command</span> = <span class="hljs-string">&quot;/home/www/mirrors/scripts/github-release.py&quot;</span><br><span class="hljs-attr">interval</span> = <span class="hljs-number">1440</span><br><span class="hljs-attr">docker_image</span> = <span class="hljs-string">&quot;tunathu/tunasync-scripts:latest&quot;</span><br></code></pre></td></tr></table></figure><p>下载同步脚本</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget -P scripts<span class="hljs-regexp">/ https:/</span><span class="hljs-regexp">/gh-proxy.com/</span>https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/muzihuaner/mi</span>rrors<span class="hljs-regexp">/refs/</span>heads<span class="hljs-regexp">/new/mi</span>rrors<span class="hljs-regexp">/scripts/gi</span>thub-release.py<br>wget -P scripts<span class="hljs-regexp">/ https:/</span><span class="hljs-regexp">/gh-proxy.com/</span>https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/muzihuaner/mi</span>rrors<span class="hljs-regexp">/refs/</span>heads<span class="hljs-regexp">/new/mi</span>rrors<span class="hljs-regexp">/scripts/gi</span>thub-release.json<br>chmod +x scripts/github-release.py<br>vim scripts/github-release.py<br>vim scripts/github-release.json <span class="hljs-comment">#修改你要同步的仓库</span><br></code></pre></td></tr></table></figure><p>可以先检验一下此脚本能否正常运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 scripts/github-release.py<br></code></pre></td></tr></table></figure><p>更多配置：<a href="https://github.com/tuna/tunasync/blob/master/docs/zh_CN/workers.conf">https://github.com/tuna/tunasync/blob/master/docs/zh_CN/workers.conf</a></p><p>更多脚本：<a href="https://github.com/tuna/tunasync-scripts">https://github.com/tuna/tunasync-scripts</a></p><h4 id="下载tunasync启动停止脚本"><a href="#下载tunasync启动停止脚本" class="headerlink" title="下载tunasync启动停止脚本"></a>下载tunasync启动停止脚本</h4><p><a href="https://github.com/whsir/tunasync-bin">https://github.com/whsir/tunasync-bin</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget -P <span class="hljs-regexp">/etc/i</span>nit.d<span class="hljs-regexp">/ https:/</span><span class="hljs-regexp">/gh-proxy.com/</span>https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/whsir/</span>tunasync-bin<span class="hljs-regexp">/master/</span>tunasync-manager<br>wget -P <span class="hljs-regexp">/etc/i</span>nit.d<span class="hljs-regexp">/ https:/</span><span class="hljs-regexp">/gh-proxy.com/</span>https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/whsir/</span>tunasync-bin<span class="hljs-regexp">/master/</span>tunasync-worker<br>chmod +x <span class="hljs-regexp">/etc/i</span>nit.d/tunasync-manager<br>chmod +x <span class="hljs-regexp">/etc/i</span>nit.d/tunasync-worker<br></code></pre></td></tr></table></figure><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">/etc/init.d/tuna<span class="hljs-built_in">sync-manager</span> <span class="hljs-built_in">start</span><br>/etc/init.d/tuna<span class="hljs-built_in">sync-worker</span> <span class="hljs-built_in">start</span><br></code></pre></td></tr></table></figure><h4 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-regexp">/etc/</span><span class="hljs-keyword">init</span>.d<span class="hljs-operator">/</span>tunasync<span class="hljs-operator">-</span>manager restart<br><span class="hljs-regexp">/etc/</span><span class="hljs-keyword">init</span>.d<span class="hljs-operator">/</span>tunasync<span class="hljs-operator">-</span>worker restart<br></code></pre></td></tr></table></figure><p>查看服务状态</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-regexp">/etc/</span><span class="hljs-keyword">init</span>.d<span class="hljs-operator">/</span>tunasync<span class="hljs-operator">-</span>manager status<br><span class="hljs-regexp">/etc/</span><span class="hljs-keyword">init</span>.d<span class="hljs-operator">/</span>tunasync<span class="hljs-operator">-</span>worker status<br></code></pre></td></tr></table></figure><p>到这里为止，自建仓库就算完成了，可以通过以下命令来查看进程</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">tunasynctl</span> list -p <span class="hljs-number">12345</span> --<span class="hljs-literal">all</span><br></code></pre></td></tr></table></figure><h4 id="添加计划任务"><a href="#添加计划任务" class="headerlink" title="添加计划任务"></a>添加计划任务</h4><p>创建日志文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">touch <span class="hljs-regexp">/home/</span>www<span class="hljs-regexp">/mirrors/</span>logs/wget.log<br></code></pre></td></tr></table></figure><p> 获取任务状态信息并保存为 json 文件</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">crontab -e</span><br></code></pre></td></tr></table></figure><p>添加</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">*<span class="hljs-regexp">/1 * * * * wget -q http:/</span><span class="hljs-regexp">/127.0.0.1:12345/</span>jobs -O <span class="hljs-regexp">/home/</span>www<span class="hljs-regexp">/mirrors/</span>jobs.json -o <span class="hljs-regexp">/home/</span>www<span class="hljs-regexp">/mirrors/</span>logs/wget.log<br></code></pre></td></tr></table></figure><p>验证</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">crontab -l</span><br></code></pre></td></tr></table></figure><h4 id="安装-Caddy-Web服务器"><a href="#安装-Caddy-Web服务器" class="headerlink" title="安装 Caddy Web服务器"></a>安装 Caddy Web服务器</h4><h4 id="配置访问权限"><a href="#配置访问权限" class="headerlink" title="配置访问权限"></a>配置访问权限</h4><p>镜像目录权限设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> 755 /home/www/mirrors<br></code></pre></td></tr></table></figure><p>SELINUX权限设置(可选)</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">chcon -R -t <span class="hljs-type">httpd_sys_content_t</span> /home/www/mirrors<br></code></pre></td></tr></table></figure><h4 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h4><p>如果你还没有安装 Docker，可以使用脚本安装 Docker：</p><p><a href="https://getdocker.quickso.cn/">https://getdocker.quickso.cn/</a></p><p>创建Caddy文件夹</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">mkdir -p /home/www/Caddy<br></code></pre></td></tr></table></figure><p>创建Caddyfile</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade">:<span class="hljs-number">80</span> &#123;<br>    root * <span class="hljs-regexp">/usr/</span>share/caddy<br>    file_server browse<br>&#125;<br></code></pre></td></tr></table></figure><p>为了简化部署，可以使用 <code>Docker Compose</code> 来管理 Caddy 服务和配置。</p><h4 id="创建-docker-compose-yml"><a href="#创建-docker-compose-yml" class="headerlink" title="创建 docker-compose.yml"></a>创建 <code>docker-compose.yml</code></h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">caddy:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">caddy:latest</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">caddy</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">unless-stopped</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;80:80&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;443:443&quot;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/home/www/Caddy/Caddyfile:/etc/caddy/Caddyfile</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/home/www/mirrors:/usr/share/caddy</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">caddy_data:/data</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">caddy_config:/config</span><br><br><span class="hljs-attr">volumes:</span><br>  <span class="hljs-attr">caddy_data:</span><br>  <span class="hljs-attr">caddy_config:</span><br></code></pre></td></tr></table></figure><h4 id="启动-Caddy-服务"><a href="#启动-Caddy-服务" class="headerlink" title="启动 Caddy 服务"></a>启动 Caddy 服务</h4><p>运行以下命令启动 Caddy 服务：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker-compose up -d</span><br></code></pre></td></tr></table></figure><p>并根据需要补充 <code>index.html</code> 和配置的 web 文件到 <code>/mirrors</code> 目录。</p><p>网页文件可以在 <a href="https://github.com/muzihuaner/mirrors/tree/new/mirrors%E4%B8%8A%E4%B8%8B%E8%BD%BD%E4%BD%BF%E7%94%A8%EF%BC%88%E6%89%80%E6%9C%89">https://github.com/muzihuaner/mirrors/tree/new/mirrors上下载使用（所有</a> web 文件放到 <code>/mirrors</code> 目录即可）。</p><p>文件夹层级</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs axapta">.<br>└── www<br>    └── mirrors 网站根目录<br>        ├── <span class="hljs-keyword">index</span>.html 首页<br>        ├── jobs.json 状态信息<br>        ├── logs 日志<br>        ├── scripts 脚本<br>        ├── <span class="hljs-keyword">static</span> 网页静态资源<br>        ├── status 服务器状态网页目录<br></code></pre></td></tr></table></figure><p>至此，同步服务以及 web 访问服务全部搭建完成，内网的小伙伴们可以通过浏览器访问镜像站了 <a href="http://服务器ip/">http:&#x2F;&#x2F;服务器IP&#x2F;</a>。</p><h4 id="文章参考"><a href="#文章参考" class="headerlink" title="文章参考"></a>文章参考</h4><p><a href="http://weyo.me/pages/techs/how-to-make-a-mirror-site/">http://weyo.me/pages/techs/how-to-make-a-mirror-site/</a></p><p><a href="https://blog.lussac.net/archives/342/">https://blog.lussac.net/archives/342/</a></p><p><a href="https://github.com/tuna/tunasync">https://github.com/tuna/tunasync</a></p><p><a href="https://blog.whsir.com/post-5094.html">https://blog.whsir.com/post-5094.html</a></p><p><a href="https://www.shellop.com/archives/36">https://www.shellop.com/archives/36</a></p><p><a href="https://fangpsh.github.io/posts/2014/2014-01-01.html">https://fangpsh.github.io/posts/2014/2014-01-01.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在开源软件的使用中，镜像仓库（Mirror Repository）扮演着至关重要的角色。它们为全球用户提供快速、可靠的软件下载服务。特别是在国内，由于网络限制，访问官方仓库往往较为缓慢，因此搭建一个自己的镜像仓库就显得尤为重要。而 &lt;strong&gt;&lt;a href=&quot;http</summary>
      
    
    
    
    <category term="教程" scheme="https://blog.quickso.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="开源" scheme="https://blog.quickso.cn/tags/%E5%BC%80%E6%BA%90/"/>
    
    <category term="tunasync" scheme="https://blog.quickso.cn/tags/tunasync/"/>
    
  </entry>
  
  <entry>
    <title>Caddy Docker版本安装部署</title>
    <link href="https://blog.quickso.cn/2025/01/01/CaddyDocker%E7%89%88%E6%9C%AC%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
    <id>https://blog.quickso.cn/2025/01/01/CaddyDocker%E7%89%88%E6%9C%AC%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</id>
    <published>2025-01-01T03:58:52.000Z</published>
    <updated>2025-05-26T15:06:48.564Z</updated>
    
    <content type="html"><![CDATA[<p>Caddy 是一款强大的 Web 服务器，具有自动 HTTPS 配置、简易的配置文件和多功能反向代理等功能。本文将通过 Docker 容器的方式部署 Caddy，并介绍如何配置 HTTPS、Web 服务、反向代理和负载均衡。</p><p>官方网站:<a href="https://caddyserver.com/">https://caddyserver.com/</a></p><p>官方文档:<a href="https://caddyserver.com/docs/">https://caddyserver.com/docs/</a></p><h3 id="1-安装和部署-Caddy-Docker-容器"><a href="#1-安装和部署-Caddy-Docker-容器" class="headerlink" title="1. 安装和部署 Caddy Docker 容器"></a>1. 安装和部署 Caddy Docker 容器</h3><h4 id="1-1-安装-Docker"><a href="#1-1-安装-Docker" class="headerlink" title="1.1 安装 Docker"></a>1.1 安装 Docker</h4><p>如果你还没有安装 Docker，可以通过以下命令安装 Docker：</p><p><a href="https://getdocker.quickso.cn/">https://getdocker.quickso.cn/</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl -fsSL https:<span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/mu</span>zihuaner<span class="hljs-regexp">/docker-install@master/i</span>nstall.sh -o install-docker.sh<br></code></pre></td></tr></table></figure><h4 id="1-2-拉取-Caddy-Docker-镜像"><a href="#1-2-拉取-Caddy-Docker-镜像" class="headerlink" title="1.2 拉取 Caddy Docker 镜像"></a>1.2 拉取 Caddy Docker 镜像</h4><p>通过 Docker Hub 拉取 Caddy 镜像：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">docker</span> pull caddy:latest<br></code></pre></td></tr></table></figure><h4 id="1-3-运行-Caddy-容器"><a href="#1-3-运行-Caddy-容器" class="headerlink" title="1.3 运行 Caddy 容器"></a>1.3 运行 Caddy 容器</h4><p>创建一个名为 <code>caddy</code> 的 Docker 容器并启动：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -d --name caddy -p <span class="hljs-number">80</span>:<span class="hljs-number">80</span> -p <span class="hljs-number">443</span>:<span class="hljs-number">443</span> caddy<br></code></pre></td></tr></table></figure><p>这将启动一个 Caddy 容器，并映射主机的 80 和 443 端口到容器内的对应端口。</p><h3 id="2-配置-HTTPS"><a href="#2-配置-HTTPS" class="headerlink" title="2. 配置 HTTPS"></a>2. 配置 HTTPS</h3><p>Caddy 会自动为你配置 HTTPS，前提是你已正确配置了 DNS 和域名。通过 <code>Caddyfile</code> 配置文件，你可以指定 HTTPS 的配置。</p><h4 id="2-1-创建-Caddyfile-配置文件"><a href="#2-1-创建-Caddyfile-配置文件" class="headerlink" title="2.1 创建 Caddyfile 配置文件"></a>2.1 创建 Caddyfile 配置文件</h4><p>创建一个 <code>Caddyfile</code> 文件（例如，<code>Caddyfile</code>）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> Caddyfile<br></code></pre></td></tr></table></figure><p>在该文件中配置域名和 HTTPS 设置：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts">your-domain.<span class="hljs-title class_">com</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-meta"># 自动启用 HTTPS</span><br>    root * <span class="hljs-keyword">/usr/</span>share/caddy<br>    file_server<br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>Caddy 会自动为 <code>your-domain.com</code> 配置 HTTPS，并且通过 Let’s Encrypt 获取 SSL 证书。</p><h4 id="2-2-挂载-Caddyfile-到-Docker-容器"><a href="#2-2-挂载-Caddyfile-到-Docker-容器" class="headerlink" title="2.2 挂载 Caddyfile 到 Docker 容器"></a>2.2 挂载 Caddyfile 到 Docker 容器</h4><p>修改 Docker 启动命令，挂载 <code>Caddyfile</code> 配置文件：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby">docker run -d --name caddy -p <span class="hljs-number">80</span><span class="hljs-symbol">:</span><span class="hljs-number">80</span> -p <span class="hljs-number">443</span><span class="hljs-symbol">:</span><span class="hljs-number">443</span> \<br>  -v /path/to/<span class="hljs-title class_">Caddyfile</span><span class="hljs-symbol">:/etc/caddy/Caddyfile</span> \<br>  caddy<br></code></pre></td></tr></table></figure><p>请将 <code>/path/to/Caddyfile</code> 替换为你的 <code>Caddyfile</code> 文件的路径。</p><h3 id="3-配置-Web-服务"><a href="#3-配置-Web-服务" class="headerlink" title="3. 配置 Web 服务"></a>3. 配置 Web 服务</h3><p>Caddy 支持静态文件服务和其他 Web 应用的反向代理。这里我们以静态网站为例，配置 Caddy 来提供 Web 服务。</p><h4 id="3-1-配置静态网站"><a href="#3-1-配置静态网站" class="headerlink" title="3.1 配置静态网站"></a>3.1 配置静态网站</h4><p>修改 <code>Caddyfile</code> 以指向你的网站目录：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">your-<span class="hljs-keyword">domain</span>.com &#123;<br>    root * /<span class="hljs-type">path</span>/<span class="hljs-keyword">to</span>/your/site<br>    file_server<br>&#125;<br></code></pre></td></tr></table></figure><p>其中，<code>/path/to/your/site</code> 是你的静态网站所在的目录。</p><h4 id="3-2-挂载网站目录到-Docker-容器"><a href="#3-2-挂载网站目录到-Docker-容器" class="headerlink" title="3.2 挂载网站目录到 Docker 容器"></a>3.2 挂载网站目录到 Docker 容器</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker run -d --name caddy -p <span class="hljs-number">80</span>:<span class="hljs-number">80</span> -p <span class="hljs-number">443</span>:<span class="hljs-number">443</span> \<br>  -v <span class="hljs-regexp">/path/</span>to<span class="hljs-regexp">/Caddyfile:/</span>etc<span class="hljs-regexp">/caddy/</span>Caddyfile \<br>  -v <span class="hljs-regexp">/path/</span>to<span class="hljs-regexp">/your/</span>site:<span class="hljs-regexp">/usr/</span>share/caddy \<br>  caddy<br></code></pre></td></tr></table></figure><p>这样，Caddy 将提供你的静态网站，并自动为其启用 HTTPS。</p><h3 id="4-配置反向代理"><a href="#4-配置反向代理" class="headerlink" title="4. 配置反向代理"></a>4. 配置反向代理</h3><p>Caddy 可以很容易地配置反向代理，用于将请求转发到后端服务。假设你有一个后端 API 或应用运行在其他服务器或容器中。</p><h4 id="4-1-配置反向代理"><a href="#4-1-配置反向代理" class="headerlink" title="4.1 配置反向代理"></a>4.1 配置反向代理</h4><p>在 <code>Caddyfile</code> 中配置反向代理：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">your-domain.<span class="hljs-keyword">com</span> &#123;<br>    reverse_proxy localhos<span class="hljs-variable">t:5000</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这将把所有访问 <code>your-domain.com</code> 的请求转发到本地的 <code>localhost:5000</code>（假设后端服务运行在 5000 端口）。</p><h4 id="4-2-反向代理多个后端服务"><a href="#4-2-反向代理多个后端服务" class="headerlink" title="4.2 反向代理多个后端服务"></a>4.2 反向代理多个后端服务</h4><p>你还可以配置多个后端服务进行负载均衡：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">your-domain.<span class="hljs-keyword">com</span> &#123;<br>    reverse_proxy /api/* localhos<span class="hljs-variable">t:5000</span> localhos<span class="hljs-variable">t:5001</span><br>    reverse_proxy /app/* localhos<span class="hljs-variable">t:6000</span> localhos<span class="hljs-variable">t:6001</span><br>&#125;<br></code></pre></td></tr></table></figure><p>此配置会根据请求路径（如 <code>/api/*</code> 和 <code>/app/*</code>）将请求分发到不同的后端服务。</p><h3 id="5-配置负载均衡"><a href="#5-配置负载均衡" class="headerlink" title="5. 配置负载均衡"></a>5. 配置负载均衡</h3><p>Caddy 提供了内置的负载均衡支持。你可以在 <code>reverse_proxy</code> 配置中指定多个后端服务，Caddy 会自动进行负载均衡。</p><h4 id="5-1-配置负载均衡"><a href="#5-1-配置负载均衡" class="headerlink" title="5.1 配置负载均衡"></a>5.1 配置负载均衡</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim">your-domain.<span class="hljs-keyword">com</span> &#123;<br>    reverse_proxy localhos<span class="hljs-variable">t:5000</span> localhos<span class="hljs-variable">t:5001</span> localhos<span class="hljs-variable">t:5002</span> &#123;<br>        lb_policy round_robin<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的配置会将请求轮询地分发到 <code>localhost:5000</code>、<code>localhost:5001</code> 和 <code>localhost:5002</code>。</p><h4 id="5-2-负载均衡策略"><a href="#5-2-负载均衡策略" class="headerlink" title="5.2 负载均衡策略"></a>5.2 负载均衡策略</h4><p>Caddy 支持多种负载均衡策略，如：</p><ul><li><code>round_robin</code>（默认）：轮询。</li><li><code>least_conn</code>：最少连接数优先。</li><li><code>random</code>：随机选择。</li></ul><p>你可以通过设置 <code>lb_policy</code> 来选择负载均衡策略：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim">your-domain.<span class="hljs-keyword">com</span> &#123;<br>    reverse_proxy localhos<span class="hljs-variable">t:5000</span> localhos<span class="hljs-variable">t:5001</span> localhos<span class="hljs-variable">t:5002</span> &#123;<br>        lb_policy least_conn<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-配置-Caddy-以支持-HTTPS-和自动证书续期"><a href="#6-配置-Caddy-以支持-HTTPS-和自动证书续期" class="headerlink" title="6. 配置 Caddy 以支持 HTTPS 和自动证书续期"></a>6. 配置 Caddy 以支持 HTTPS 和自动证书续期</h3><p>Caddy 会自动管理 HTTPS 证书的获取和续期，无需额外配置。只要你的域名指向正确的 IP 地址，Caddy 就会自动通过 Let’s Encrypt 获取证书。</p><h4 id="6-1-配置-DNS"><a href="#6-1-配置-DNS" class="headerlink" title="6.1 配置 DNS"></a>6.1 配置 DNS</h4><p>确保你的域名的 DNS 记录指向运行 Caddy 的服务器的 IP 地址。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">your-<span class="hljs-keyword">domain</span>.com -&gt; &lt;your-<span class="hljs-keyword">server</span>-ip&gt;<br></code></pre></td></tr></table></figure><h3 id="7-使用-Docker-Compose-管理-Caddy"><a href="#7-使用-Docker-Compose-管理-Caddy" class="headerlink" title="7. 使用 Docker Compose 管理 Caddy"></a>7. 使用 Docker Compose 管理 Caddy</h3><p>为了简化部署，可以使用 <code>Docker Compose</code> 来管理 Caddy 服务和配置。</p><h4 id="7-1-创建-docker-compose-yml"><a href="#7-1-创建-docker-compose-yml" class="headerlink" title="7.1 创建 docker-compose.yml"></a>7.1 创建 <code>docker-compose.yml</code></h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">caddy:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">caddy:latest</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">caddy</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">unless-stopped</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;80:80&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;443:443&quot;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./Caddyfile:/etc/caddy/Caddyfile</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./site:/usr/share/caddy</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">caddy_data:/data</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">caddy_config:/config</span><br><br><span class="hljs-attr">volumes:</span><br>  <span class="hljs-attr">caddy_data:</span><br>  <span class="hljs-attr">caddy_config:</span><br></code></pre></td></tr></table></figure><h4 id="7-2-启动-Caddy-服务"><a href="#7-2-启动-Caddy-服务" class="headerlink" title="7.2 启动 Caddy 服务"></a>7.2 启动 Caddy 服务</h4><p>运行以下命令启动 Caddy 服务：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker-compose up -d</span><br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过本文，你学会了如何使用 Docker 部署 Caddy，并配置了以下功能：</p><ul><li><strong>自动 HTTPS</strong>：Caddy 会自动为你提供免费的 SSL 证书并进行证书续期。</li><li><strong>Web 服务</strong>：可以通过 Caddy 提供静态网站。</li><li><strong>反向代理</strong>：可以将请求转发到其他后端服务。</li><li><strong>负载均衡</strong>：Caddy 可以在多个后端服务之间进行负载均衡。</li></ul><p>使用 Docker 和 Caddy 可以大大简化 Web 服务的部署与配置。如果需要更多自定义功能，Caddy 的文档中有丰富的选项可供参考。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Caddy 是一款强大的 Web 服务器，具有自动 HTTPS 配置、简易的配置文件和多功能反向代理等功能。本文将通过 Docker 容器的方式部署 Caddy，并介绍如何配置 HTTPS、Web 服务、反向代理和负载均衡。&lt;/p&gt;
&lt;p&gt;官方网站:&lt;a href=&quot;htt</summary>
      
    
    
    
    <category term="教程" scheme="https://blog.quickso.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Caddy" scheme="https://blog.quickso.cn/tags/Caddy/"/>
    
    <category term="Docker" scheme="https://blog.quickso.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Virtualizor部署及安装并对接whmcs</title>
    <link href="https://blog.quickso.cn/2024/12/24/Virtualizor%E9%83%A8%E7%BD%B2%E5%8F%8A%E5%AE%89%E8%A3%85%E5%B9%B6%E5%AF%B9%E6%8E%A5whmcs/"/>
    <id>https://blog.quickso.cn/2024/12/24/Virtualizor%E9%83%A8%E7%BD%B2%E5%8F%8A%E5%AE%89%E8%A3%85%E5%B9%B6%E5%AF%B9%E6%8E%A5whmcs/</id>
    <published>2024-12-24T11:36:32.000Z</published>
    <updated>2025-07-27T14:38:53.855Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>Virtualizor</strong> 是一款强大的虚拟化管理面板，允许用户轻松地创建、管理和维护虚拟机。它支持多种虚拟化技术，包括 KVM、Xen、OpenVZ 和 LXC 等，是一个广泛用于托管公司和云服务提供商的工具。</p><h3 id="主要功能："><a href="#主要功能：" class="headerlink" title="主要功能："></a>主要功能：</h3><ol><li><strong>多种虚拟化技术支持</strong>：如上所述，Virtualizor 支持 KVM、Xen、OpenVZ 和 LXC，不同的虚拟化技术可以根据需求进行选择。</li><li><strong>简化的用户界面</strong>：它为管理员和最终用户提供了简洁且易于使用的管理界面，用户可以通过浏览器轻松访问并管理虚拟机。</li><li><strong>自动化创建和管理虚拟机</strong>：管理员可以自动化虚拟机的创建、删除、重启和克隆等任务。</li><li><strong>资源监控和统计</strong>：提供对虚拟机的资源使用情况（如 CPU、内存、硬盘和网络带宽等）的实时监控。</li><li><strong>用户管理</strong>：支持多用户系统，管理员可以创建多个虚拟主机账户，并根据权限限制其管理功能。</li><li><strong>多种操作系统支持</strong>：支持多种主流操作系统，如 Linux、Windows 等的虚拟化。</li><li><strong>高可用性与灾备</strong>：对于企业级用户，Virtualizor 提供高可用性（HA）功能，确保虚拟机在物理服务器出现故障时可以继续运行。</li></ol><h3 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h3><ul><li><strong>VPS托管</strong>：Virtualizor 是虚拟专用服务器（VPS）托管提供商常用的工具，能够帮助他们提供给客户管理虚拟主机的接口。</li><li><strong>云计算平台</strong>：它可用作管理云计算资源的工具，支持基于虚拟机的弹性伸缩。</li><li><strong>企业数据中心管理</strong>：对于需要管理大量虚拟化资源的企业，Virtualizor 提供了简便的集中式管理功能。</li></ul></blockquote><h2 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h2><p>环境准备：使用<strong>Almalinux8</strong>作为演示系统。在执行操作前，建议您备份所有数据。</p><p>更新一下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">yum update -<span class="hljs-attribute">y</span><br></code></pre></td></tr></table></figure><h3 id="1-开心一下"><a href="#1-开心一下" class="headerlink" title="1.开心一下"></a>1.开心一下</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;152.53.227.142 api.virtualizor.com&quot;</span> &gt;&gt; /etc/hosts<br><span class="hljs-built_in">sudo</span> chattr +i /etc/hosts <span class="hljs-comment"># 锁定hosts</span><br></code></pre></td></tr></table></figure><h3 id="2-创建虚拟磁盘"><a href="#2-创建虚拟磁盘" class="headerlink" title="2.创建虚拟磁盘"></a>2.创建虚拟磁盘</h3><p>这时候创建的磁盘就是待会开lxc小鸡时，小鸡用的硬盘。创建的硬盘是一个弹性硬盘，也就是一开始的占用大小为0，所以可以大幅超售😋</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#不占空间，写个80G</span><br><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/zero of=/lxcdisk.img bs=1M seek=80000 count=0<br>losetup /dev/loop0 /lxcdisk.img<br><span class="hljs-comment">#加入开机启动</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;losetup /dev/loop0 /lxcdisk.img&quot;</span>&gt;&gt;/etc/rc.local<br><span class="hljs-built_in">chmod</span> +x /etc/rc.local<br><span class="hljs-comment">#分区</span><br>fdisk /dev/loop0<br></code></pre></td></tr></table></figure><p>执行如图操作，空的地方直接回车使用默认值就好。</p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/20250727222546709.png" alt="1743823603418.png"></p><p>然后运行<code>partprobe</code>刷新磁盘，报错不用管。然后，运行以下命令给硬盘添加新的卷，第二个命令执行后输入y确认。<code>lxcDisk01</code>只是卷名，可以随便起，只能英文加数字应该是，跟之后的一个地方相同就好</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">yum install lvm2 -y<br>pvcreate <span class="hljs-regexp">/dev/</span>loop0<br>vgcreate -s <span class="hljs-number">32</span>M lxcDisk01 <span class="hljs-regexp">/dev/</span>loop0<br></code></pre></td></tr></table></figure><p>重启后虚拟磁盘可能挂载会掉，请输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">losetup /dev/loop0 /lxcdisk.img<br></code></pre></td></tr></table></figure><p>重新挂载。</p><h3 id="3-安装Virtualizor"><a href="#3-安装Virtualizor" class="headerlink" title="3.安装Virtualizor"></a>3.安装Virtualizor</h3><p>执行如下命令，将email后换成您自己的，安装后输入y确认重启。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">wget –<span class="hljs-keyword">N</span> http://<span class="hljs-keyword">files</span>.virtualizor.<span class="hljs-keyword">com</span>/install.<span class="hljs-keyword">sh</span><br>chmod <span class="hljs-number">0755</span> install.<span class="hljs-keyword">sh</span><br>./install.<span class="hljs-keyword">sh</span> email=your@email.<span class="hljs-keyword">com</span> kernel=lxc<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdmirror.com/gh/muzihuaner/huancdn//img/84c2f0972238eb24379e5fba3595f621.png" alt="image"></p><p>推荐使用国外服务器，国内服务器第二步有点慢～</p><p>可以将脚本里的改成我的Softaculous国内镜像 websoft.quickso.cn</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">mirror_url</span>=files.softaculous.com<br></code></pre></td></tr></table></figure><p>然后打开您的IP:4085&#x2F;4084访问管理页面，使用您的root密码登录</p><p><img src="https://cdn.jsdmirror.com/gh/muzihuaner/huancdn//img/BQACAgUAAx0Ea55INgACAchmFWWG1-YxSFgX44Dfm8oto7QmCAAClQ8AAmSdsVRyc9RxCZRc3TQE.png" alt="Alt Text"></p><p>Virtualizor使用的端口为4081 - 4085，如果登不上可以考虑防火墙的问题：</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nsis">首先确保防火墙是开启状态：<br><span class="hljs-params">system</span>ctl status firewalld<br>开启防火墙：<br><span class="hljs-params">system</span>ctl start firewalld<br>关闭防火墙：<br><span class="hljs-params">system</span>ctl stop firewalld<br>开机启动防火墙：<br><span class="hljs-params">system</span>ctl enable firewalld<br>取消开机启动防火墙：<br><span class="hljs-params">system</span>ctl disable firewalld<br></code></pre></td></tr></table></figure><p>添加存储：打开Virtualizor Admin Panel -&gt; Storage -&gt; Add Storage，按下面介绍填写并提交。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">Name</span>：随意<br><span class="hljs-keyword">Server</span>：localhost<br><span class="hljs-keyword">Storage</span> <span class="hljs-keyword">Type</span> ：LVM<br><span class="hljs-keyword">Storage</span> <span class="hljs-type">Path</span>： 储存路径(LVM卷组路径，如果用我上面的那种的话就填/dev/lxcDisk01)<br>Overcommit：虚拟盘有多大写多大,这里是<span class="hljs-number">80</span><br>Alert Threshold: 告警(就是如果硬盘占用超过这个值就会提示你，一般不变就行了)<br><span class="hljs-keyword">Primary</span> <span class="hljs-keyword">Storage</span>: 如果你只有这一个硬盘请勾选，否则WHMCS开机器会报错<br></code></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/20250727222801136.png" alt="1743831638913.png"></p><h3 id="4-构建虚拟网卡"><a href="#4-构建虚拟网卡" class="headerlink" title="4.构建虚拟网卡"></a>4.构建虚拟网卡</h3><p>虚拟网卡用于小鸡的端口转发等网络通讯，类似于交换机。</p><p>首先，安装libvirt，并启用他：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install libvirt -y<br>systemctl <span class="hljs-built_in">enable</span> libvirtd<br>systemctl start libvirtd<br></code></pre></td></tr></table></figure><p>然后我们会使用如下例子创建NAT环境：</p><blockquote><p>Network: 10.0.0.0<br>Netmask: 255.0.0.0<br>Prefix: 8<br>Gateway: 10.0.0.1<br>Usable IPs: 10.0.0.100 to 10.0.0.250</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/</span>libvirt<span class="hljs-regexp">/qemu/</span>networks/HAProxy.xml<br></code></pre></td></tr></table></figure><p>并写入如下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;network&gt;<br>  &lt;name&gt;HAProxy&lt;/name&gt;<br>  &lt;forward mode=<span class="hljs-string">&#x27;nat&#x27;</span>/&gt;<br>  &lt;bridge name=<span class="hljs-string">&#x27;HAProxy&#x27;</span> stp=<span class="hljs-string">&#x27;on&#x27;</span> delay=<span class="hljs-string">&#x27;0&#x27;</span> /&gt;<br>  &lt;ip address=<span class="hljs-string">&#x27;10.0.0.1&#x27;</span> netmask=<span class="hljs-string">&#x27;255.0.0.0&#x27;</span>&gt;<br>  &lt;/ip&gt;<br>&lt;/network&gt;<br></code></pre></td></tr></table></figure><p>然后运行下面命令启用他：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">virsh net-define /etc/libvirt/qemu/networks/HAProxy.xml<br>virsh net-autostart HAProxy<br>virsh net-start HAProxy<br></code></pre></td></tr></table></figure><p>如果在执行最后一条命令遇到如下错误：</p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/20250727222940727.png" alt="1743833013517.png"></p><p>请运行<code>ifdown eth1</code>后重新运行<code>virsh net-start HAProxy</code>。</p><p>打开<code>Virtualizor Admin Panel -&gt; IP Pool -&gt; Create IP Pool</code>，按照下图填写并提交。</p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/20250727223001776.png" alt="1743834523116.png"></p><h3 id="5-下载系统镜像"><a href="#5-下载系统镜像" class="headerlink" title="5.下载系统镜像"></a>5.下载系统镜像</h3><p>打开Virtualizor Admin Panel -&gt; Media -&gt; OS Templates Browser，Type选LXC，勾上你想要的，提交。</p><p><img src="https://cdn.jsdmirror.com/gh/muzihuaner/huancdn//img/image-20241225224401783.png" alt="image-20241225224401783"></p><h3 id="6-设置端口转发"><a href="#6-设置端口转发" class="headerlink" title="6.设置端口转发"></a>6.设置端口转发</h3><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/20250727223132894.png" alt="1743834860515.png"></p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/20250727223145385.png" alt="1743834963788.png"></p><p>设置完这两个地方，对接了whmcs之后就可以在用户端面板设置端口转发了。</p><p>这个时候，还需要执行一条iptables指令，才能让VPS正常联网：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">iptables -t nat -A POSTROUTING -s 10.0.0.0/24 -j MASQUERADE<br></code></pre></td></tr></table></figure><h3 id="7-对接WHMCS"><a href="#7-对接WHMCS" class="headerlink" title="7.对接WHMCS"></a>7.对接WHMCS</h3><p>创建一个plan，之后要是想设置不同配置的产品的话创建新的plan即可。</p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/20250727223257276.png" alt="1743835613055.png"></p><p>这里要提一下的是CPU Units，这是类似优先值的概念，比如你开了两台小鸡，一台CPU Units设置为1000，另一台设置为2000，那么当CPU跑满的时候 第一台会占有1000 &#x2F; (1000+2000)的CPU资源，第二台会占有2000 &#x2F; (1000+2000)的CPU资源 CPU%是指占所有核心的百分数，比如你有四个核心，想要VPS最多用一半的性能，你可以设置CPU%为50，那么他最多使用 2 ÷ 4 x 100 &#x3D; 50 (CPU%)</p><p>下载<a href="https://www.virtualizor.com/docs/billing/whmcs-module/">Virtualizor_For_WHMCS</a>插件，上传到&#x2F;path&#x2F;to&#x2F;whmcs&#x2F;modules&#x2F;servers&#x2F;目录<br>WHMCS管理面板-&gt;设置-&gt;产品&#x2F;服务-&gt;服务器设置</p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/20250727223356933.png" alt="1743837418698.png"></p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/20250727223420233.png" alt="1743837454588.png"></p><p>点击下方的测试连接，如果报错<code>FAILED: Could not connect to Virtualizor.Please make sure that all Ports from 4081 to 4085 are open on your WHMCS Server or please check the server details entered are as displayed on Admin Panel &gt;&gt; Configuration &gt;&gt; Server Info -- Can not get any response from admin panel. Please check ip:port</code>可以重置一下api keys，再把新的key和pass填进去，一般就可以了。测试连接成功后会给你蹦出来个更详细的界面，这上面信息你看着填就行，主机名要和ip一样，最后点保存就好</p><p>创建产品：产品&#x2F;服务–&gt;新增分组，新增产品</p><p><img src="https://cdn.jsdmirror.com/gh/muzihuaner/huancdn//img/BQACAgUAAx0Ea55INgACAblmFWSrXI7ehP8U0bkPMiZos9LgvAAChg8AAmSdsVQd6DSmi3CdPjQE.png" alt="Alt Text"></p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/20250727223656029.png" alt="1743837871686.png"></p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/20250727223551621.png" alt="1743837968304.png"></p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/20250727223755030.png" alt="1743838086785.png"></p><p>到这就完成了！</p><p>写入必要的开机启动项，<code>vi /etc/rc.local</code>加入以下一行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">virsh net-start HAProxy<br></code></pre></td></tr></table></figure><h3 id="Q-A"><a href="#Q-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h3><p>出现The viifbr0 is not started. Please run<strong>service virtnetwork start</strong></p><p>解决方案：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo<span class="hljs-built_in"> ip </span>link <span class="hljs-built_in">add</span> viifbr0<span class="hljs-built_in"> type bridge</span><br><span class="hljs-built_in"></span>sudo<span class="hljs-built_in"> ip </span>link <span class="hljs-built_in">set</span> dev viifbr0 up<br></code></pre></td></tr></table></figure><h3 id="文章参考"><a href="#文章参考" class="headerlink" title="文章参考"></a>文章参考</h3><p><a href="https://www.nodeseek.com/post-216025-1">https://www.nodeseek.com/post-216025-1</a></p><p><a href="https://duantong.net/post-10.html">https://duantong.net/post-10.html</a></p><p><a href="https://xy.sd/archives/429">https://xy.sd/archives/429</a></p><p><a href="https://www.xuei.ru/2023/07/31/virtualizor%E5%BC%80lxc-nat-vps%E5%B9%B6%E5%AF%B9%E6%8E%A5whmcs/#%E4%B8%80%EF%BC%9A%E5%87%86%E5%A4%87%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83">https://www.xuei.ru/2023/07/31/virtualizor%E5%BC%80lxc-nat-vps%E5%B9%B6%E5%AF%B9%E6%8E%A5whmcs/#%E4%B8%80%EF%BC%9A%E5%87%86%E5%A4%87%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83</a></p><p><a href="https://maofun.com/3241.html">https://maofun.com/3241.html</a></p><p><a href="https://blog.sdnie.fun/archives/vt-whmcs.html">https://blog.sdnie.fun/archives/vt-whmcs.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Virtualizor&lt;/strong&gt; 是一款强大的虚拟化管理面板，允许用户轻松地创建、管理和维护虚拟机。它支持多种虚拟化技术，包括 KVM、Xen、OpenVZ 和 LXC 等，是一个广泛用于托管公司和云服务提供商的工具。&lt;/p</summary>
      
    
    
    
    <category term="教程" scheme="https://blog.quickso.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Linux" scheme="https://blog.quickso.cn/tags/Linux/"/>
    
    <category term="Virtualizor" scheme="https://blog.quickso.cn/tags/Virtualizor/"/>
    
    <category term="WHMCS" scheme="https://blog.quickso.cn/tags/WHMCS/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu22.04部署K3s</title>
    <link href="https://blog.quickso.cn/2024/12/21/Ubuntu22-04%E9%83%A8%E7%BD%B2K3s/"/>
    <id>https://blog.quickso.cn/2024/12/21/Ubuntu22-04%E9%83%A8%E7%BD%B2K3s/</id>
    <published>2024-12-20T17:14:33.000Z</published>
    <updated>2025-05-26T15:06:48.586Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu22-04部署K3s"><a href="#Ubuntu22-04部署K3s" class="headerlink" title="Ubuntu22.04部署K3s"></a>Ubuntu22.04部署K3s</h1><p>K3s 是一个轻量级的 Kubernetes 发行版，旨在简化和优化 Kubernetes 的安装和运行。K3s 使用了简化的架构，使其更适合在资源受限的环境中运行，如边缘设备、物联网（IoT）设备和低功耗硬件。K3s 的架构基于标准的 Kubernetes 组件，但对其进行了精简和优化。</p><p>官方文档：<a href="https://docs.k3s.io/zh/">https://docs.k3s.io/zh/</a></p><p><a href="https://docs.rancher.cn/docs/k3s/_index]">https://docs.rancher.cn/docs/k3s/_index</a></p><h3 id="K3s-集群的典型拓扑"><a href="#K3s-集群的典型拓扑" class="headerlink" title="K3s 集群的典型拓扑"></a>K3s 集群的典型拓扑</h3><ul><li>Server 节点指的是运行 <code>k3s server</code> 命令的主机，control plane 和数据存储组件由 K3s 管理。</li><li>Agent 节点指的是运行 <code>k3s agent</code> 命令的主机，不具有任何数据存储或 control plane 组件。</li><li>Server 和 Agent 都运行 kubelet、容器运行时和 CNI。</li></ul><p><img src="https://docs.k3s.io/zh/assets/images/how-it-works-k3s-revised-9c025ef482404bca2e53a89a0ba7a3c5.svg"></p><h4 id="1-单节点模式"><a href="#1-单节点模式" class="headerlink" title="1. 单节点模式"></a>1. <strong>单节点模式</strong></h4><p>在单节点模式下，<code>k3s server</code> 和 <code>k3s agent</code> 运行在同一台机器上。适用于测试环境或资源非常有限的环境。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-attr">[Master Node]</span> (K3s server + agent)<br>  └── K3s API Server<br>  └── K3s Controller Manager<br>  └── K3s Scheduler<br>  └── etcd (默认使用 SQLite)<br>  └── K3s agent (用于运行容器和 Pod)<br></code></pre></td></tr></table></figure><h4 id="2-多节点模式"><a href="#2-多节点模式" class="headerlink" title="2. 多节点模式"></a>2. <strong>多节点模式</strong></h4><p>在多节点模式下，<code>k3s server</code> 可以部署多个实例以提供高可用性，而 <code>k3s agent</code> 部署在多个工作节点上。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-attr">[Master Node 1]</span> (K3s server)<br>  └── K3s API Server<br>  └── K3s Controller Manager<br>  └── K3s Scheduler<br>  └── etcd (或外部 etcd)<br><br><span class="hljs-selector-attr">[Master Node 2]</span> (K3s server)  &lt;- 高可用配置<br>  └── K3s API Server<br>  └── K3s Controller Manager<br>  └── K3s Scheduler<br><br><span class="hljs-selector-attr">[Worker Node 1]</span> (K3s agent)<br>  └── K3s agent<br>  └── 容器运行时<br><br><span class="hljs-selector-attr">[Worker Node 2]</span> (K3s agent)<br>  └── K3s agent<br>  └── 容器运行时<br></code></pre></td></tr></table></figure><p>在 Ubuntu 22.04 上部署 K3s 单节点模式是非常简单的。以下是安装步骤，涵盖了从安装 K3s 到验证集群是否正常运行的完整过程。</p><h3 id="步骤-1：准备环境"><a href="#步骤-1：准备环境" class="headerlink" title="步骤 1：准备环境"></a>步骤 1：准备环境</h3><p>确保你的 Ubuntu 22.04 机器有互联网连接，并且已经更新了系统。</p><ol><li><strong>更新系统</strong> ：<br>在安装 K3s 之前，先确保系统是最新的：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt update<br><span class="hljs-built_in">sudo</span> apt upgrade -y<br></code></pre></td></tr></table></figure><p><strong>2.安装Docker</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">apt <span class="hljs-keyword">install</span> docker.io<br></code></pre></td></tr></table></figure><h3 id="步骤-2：安装-K3s"><a href="#步骤-2：安装-K3s" class="headerlink" title="步骤 2：安装 K3s"></a>步骤 2：安装 K3s</h3><h4 id="1-使用官方安装脚本安装-K3s"><a href="#1-使用官方安装脚本安装-K3s" class="headerlink" title="1.使用官方安装脚本安装 K3s"></a><strong>1.使用官方安装脚本安装 K3s</strong></h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">curl –sfL \<br>     https://rancher-mirror.rancher.<span class="hljs-keyword">cn</span>/k3s/k3s-install.<span class="hljs-keyword">sh</span> | \<br>     INSTALL_K3S_MIRROR=<span class="hljs-keyword">cn</span> <span class="hljs-keyword">sh</span> -s - \<br>     --<span class="hljs-built_in">system</span>-default-registry <span class="hljs-string">&quot;registry.cn-hangzhou.aliyuncs.com&quot;</span><br></code></pre></td></tr></table></figure><p>列出 所有命名空间 下的所有 服务（services）</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">kubectl <span class="hljs-keyword">get</span> services <span class="hljs-comment">--all-namespaces</span><br></code></pre></td></tr></table></figure><p>列出 所有命名空间 下的所有 Pod</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">kubectl <span class="hljs-keyword">get</span> pods <span class="hljs-comment">--all-namespaces</span><br></code></pre></td></tr></table></figure><p>查看名为 kuboard-etcd-gvx6q 的 Pod 在 kuboard 命名空间中的详细信息</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">kubectl describe pod kuboard-etcd-gvx6q -<span class="hljs-built_in">n</span> kuboard<br></code></pre></td></tr></table></figure><h4 id="2-配置镜像"><a href="#2-配置镜像" class="headerlink" title="2.配置镜像"></a>2.配置镜像</h4><h5 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&#123;&quot;registry-mirrors&quot;: [&quot;https://docker.1ms.run&quot;]&#125;&#x27;</span> | <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">tee</span> /etc/docker/daemon.json &gt; /dev/null<br>systemctl daemon-reload<br>systemctl restart docker<br></code></pre></td></tr></table></figure><h5 id="K3s"><a href="#K3s" class="headerlink" title="K3s"></a>K3s</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> &gt;&gt; /etc/rancher/k3s/registries.yaml &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">mirrors:</span><br><span class="hljs-string">  &quot;docker.io&quot;:</span><br><span class="hljs-string">    endpoint:</span><br><span class="hljs-string">      - &quot;https://docker.1ms.run&quot;</span><br><span class="hljs-string">EOF</span><br>systemctl restart k3s<br></code></pre></td></tr></table></figure><p>安装完成后，K3s 会自动启动， 检查K3s服务的状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl status k3s<br><br></code></pre></td></tr></table></figure><p>安装完成后通过以下指令获取k3s节点的工作状态</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">k3s kubectl get node<br></code></pre></td></tr></table></figure><p>将会输出存在的节点的工作状态</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">NAME</span>       STATUS   ROLES                  AGE    VERSION<br><span class="hljs-symbol">ubuntu</span>   Ready    control-plane,master   <span class="hljs-number">134</span>m   <span class="hljs-built_in">v1</span>.<span class="hljs-number">29</span>.<span class="hljs-number">5</span>+k3s1<br></code></pre></td></tr></table></figure><p>查看 K3S_TOKEN</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">cat</span> /var/lib/rancher/k3s/server/node-token<br></code></pre></td></tr></table></figure><h3 id="工作节点的安装（可选）"><a href="#工作节点的安装（可选）" class="headerlink" title="工作节点的安装（可选）"></a>工作节点的安装（可选）</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">curl -sfL https://rancher-mirror.rancher.<span class="hljs-keyword">cn</span>/k3s/k3s-install.<span class="hljs-keyword">sh</span> | INSTALL_K3S_MIRROR=<span class="hljs-keyword">cn</span> K3S_URL=https://<span class="hljs-number">192.168</span>.<span class="hljs-number">113.57</span>:<span class="hljs-number">6443</span> K3S_TOKEN=&#123;K3S_TOKEN&#125; <span class="hljs-keyword">sh</span> -<br></code></pre></td></tr></table></figure><p>根据需求把上面的 <code>https://192.168.113.57:6443</code>和 <code>K3S_TOKEN</code>更换成你的即可</p><p>K3s worker 节点的角色默认为<code>none</code>，如何修改？</p><p>可以通过<code>kubectl label node 节点名称 node-role.kubernetes.io/worker=worker</code>为节点增加 worker 角色。</p><h2 id="配套工具"><a href="#配套工具" class="headerlink" title="配套工具"></a>配套工具</h2><h2 id="helm"><a href="#helm" class="headerlink" title="helm"></a>helm</h2><blockquote><p>Helm 是一个 Kubernetes 包管理工具，类似于 Linux 下的 <code>apt</code> 或 <code>yum</code>，它帮助用户管理 Kubernetes 应用的安装、升级和配置。</p><p>helm官网地址：<a href="https://helm.sh/docs/intro/install/">https://helm.sh/docs/intro/install/</a></p></blockquote><p>在上面的文档中找到你的服务器对应系统的安装流程，下面是Ubuntu的安装流程</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">curl</span> -<span class="hljs-string">fsSL</span> -<span class="hljs-string">o</span> <span class="hljs-string">get_helm</span>.<span class="hljs-string">sh</span> <span class="hljs-string">https</span>://<span class="hljs-string">raw</span>.<span class="hljs-string">githubusercontent</span>.<span class="hljs-string">com</span>/<span class="hljs-string">helm</span>/<span class="hljs-string">helm</span>/<span class="hljs-string">main</span>/<span class="hljs-string">scripts</span>/<span class="hljs-built_in">get-helm-3</span><br><span class="hljs-string">chmod</span> <span class="hljs-string">700</span> <span class="hljs-string">get_helm</span>.<span class="hljs-string">sh</span><br>./<span class="hljs-string">get_helm</span>.<span class="hljs-string">sh</span><br> <br></code></pre></td></tr></table></figure><p>也可以Apt安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">tee</span> /usr/share/keyrings/helm.gpg &gt; /dev/null<br><span class="hljs-built_in">sudo</span> apt-get install apt-transport-https --<span class="hljs-built_in">yes</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb [arch=<span class="hljs-subst">$(dpkg --print-architecture)</span> signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main&quot;</span> | <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">tee</span> /etc/apt/sources.list.d/helm-stable-debian.list<br><span class="hljs-built_in">sudo</span> apt-get update<br><span class="hljs-built_in">sudo</span> apt-get install helm<br></code></pre></td></tr></table></figure><p>然后复制k3s.yml到~&#x2F;.kube&#x2F;文件夹下即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> /etc/rancher/k3s/k3s.yaml ~/.kube/<br></code></pre></td></tr></table></figure><p>测试helm命令：<br><img src="https://cdn.jsdmirror.com/gh/muzihuaner/huancdn//img/xwm7fssuac6j9q4g.png" alt="image.png"></p><h2 id="kuboard"><a href="#kuboard" class="headerlink" title="kuboard"></a>kuboard</h2><p>接着去安装<a href="https://kuboard.cn/">kuboard</a>这个面板来可视化管理集群。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">kubectl apply -f https://addons.kuboard.cn/kuboard/kuboard-v3.yaml<br></code></pre></td></tr></table></figure><p>使用 <code>watch kubectl get pods -n kuboard</code>命令监控所有的Pod就绪</p><p><strong>访问Kuboard</strong></p><ul><li>在浏览器中打开链接<code>http://your-node-ip-address:30080</code><ul><li>用户名：admin</li><li>密码：Kuboard123</li></ul></li></ul><h2 id="kube-explorer"><a href="#kube-explorer" class="headerlink" title="kube-explorer"></a>kube-explorer</h2><p><strong>Kube-Explorer</strong> 是一个用来探索和管理 Kubernetes 集群资源的工具。它的目的是简化与 Kubernetes 集群的交互，帮助用户更容易地查看、分析和管理 Kubernetes 中的各种资源，如 Pod、服务、部署、命名空间等。</p><p><a href="https://github.com/cnrancher/kube-explorer">https://github.com/cnrancher/kube-explorer</a></p><h2 id="cert-manager"><a href="#cert-manager" class="headerlink" title="cert-manager"></a>cert-manager</h2><p>启用HTTPS访问你的服务</p><p><a href="https://cert-manager.io/docs/installation/kubectl/">https://cert-manager.io/docs/installation/kubectl/</a></p><h2 id="部署服务"><a href="#部署服务" class="headerlink" title="部署服务"></a>部署服务</h2><p>这里以部署nginx为例</p><p><img src="https://cdn.jsdmirror.com/gh/muzihuaner/huancdn//img/image-20241221105101161.png" alt="image-20241221105101161"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">wx-mp-nginx-deployment</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">wx-mp-nginx</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">wx-mp-nginx</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">wx-mp-nginx</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">wx-mp-nginx</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:1.23.1</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-data</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/usr/share/nginx/html/</span><br>      <span class="hljs-attr">volumes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-data</span><br>          <span class="hljs-attr">hostPath:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/root/data/wx-mp-nginx</span><br>            <span class="hljs-attr">type:</span> <span class="hljs-string">Directory</span><br></code></pre></td></tr></table></figure><p>说明</p><p><img src="https://cdn.jsdmirror.com/gh/muzihuaner/huancdn//img/543925-20221009230406182-86435399.png" alt="img"></p><p>此时，无法通过外网和服务间无法调用，需要部署service来实现，部署yaml如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">wx-mp-nginx-service</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">wx-mp-nginx</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">nodePort:</span> <span class="hljs-number">31432</span><br></code></pre></td></tr></table></figure><p>过NodePort方式，将服务开启在了31432端口</p><p><img src="https://cdn.jsdmirror.com/gh/muzihuaner/huancdn//img/543925-20221010004022067-330806679.png" alt="img"></p><p>此时，在服务器安全组里添加【31432】端口，即可外网正常访问此时部署的Nginx服务了</p><p>如果有域名可以这样</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-deployment</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span> <span class="hljs-comment"># tells deployment to run 2 pods matching the template</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:1.14.2</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br> <br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-svc</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">ClusterIP</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-comment"># apply service to any pod with label app: nginx</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Ingress</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-ingress-1</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">spec.ingressClassName:</span> <span class="hljs-string">traefik</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">rules:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">host:</span> <span class="hljs-string">nginx.abc.com</span><br>      <span class="hljs-attr">http:</span><br>        <span class="hljs-attr">paths:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>            <span class="hljs-attr">pathType:</span> <span class="hljs-string">Prefix</span><br>            <span class="hljs-attr">backend:</span><br>              <span class="hljs-attr">service:</span><br>                <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-svc</span><br>                <span class="hljs-attr">port:</span><br>                  <span class="hljs-attr">number:</span> <span class="hljs-number">80</span><br><br></code></pre></td></tr></table></figure><p>这个yml包含Deployment、Service和traefik Ingress</p><p>如果没有域名，在本地的hosts添加代理</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">你的IP nginx.<span class="hljs-keyword">abc</span>.<span class="hljs-keyword">com</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Ubuntu22-04部署K3s&quot;&gt;&lt;a href=&quot;#Ubuntu22-04部署K3s&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu22.04部署K3s&quot;&gt;&lt;/a&gt;Ubuntu22.04部署K3s&lt;/h1&gt;&lt;p&gt;K3s 是一个轻量级的 Ku</summary>
      
    
    
    
    <category term="教程" scheme="https://blog.quickso.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Ubuntu" scheme="https://blog.quickso.cn/tags/Ubuntu/"/>
    
    <category term="K3s" scheme="https://blog.quickso.cn/tags/K3s/"/>
    
  </entry>
  
  <entry>
    <title>哪吒面板新版本v1安装教程</title>
    <link href="https://blog.quickso.cn/2024/12/01/%E5%93%AA%E5%90%92%E9%9D%A2%E6%9D%BF%E6%96%B0%E7%89%88%E6%9C%ACv1%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    <id>https://blog.quickso.cn/2024/12/01/%E5%93%AA%E5%90%92%E9%9D%A2%E6%9D%BF%E6%96%B0%E7%89%88%E6%9C%ACv1%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</id>
    <published>2024-12-01T06:23:25.000Z</published>
    <updated>2025-05-26T15:06:48.605Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h1 id="哪吒监控"><a href="#哪吒监控" class="headerlink" title="哪吒监控"></a>哪吒监控</h1><p>开源、轻量、易用的服务器监控与运维工具</p><p>官方网站：<a href="https://nezha.wiki/">https://nezha.wiki/</a></p><p>Github：<a href="https://github.com/nezhahq/nezhahq.github.io">https://github.com/nezhahq/nezhahq.github.io</a></p></blockquote><h1 id="START"><a href="#START" class="headerlink" title="START"></a>START</h1><p>最近，哪吒面板进行了V1版本的更新，页面UI和系统操作逻辑和V0相比有了非常大的变化，</p><p>所以写一篇新的教程教大家如何搭建安装。</p><p><img src="https://cdn.jsdmirror.com/gh/muzihuaner/huancdn//img/image-20241201150437124.png" alt="image-20241201150437124"></p><h1 id="安装-Dashboard"><a href="#安装-Dashboard" class="headerlink" title="安装 Dashboard"></a>安装 Dashboard</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>搭建哪吒监控的 Dashboard，你需要：</p><ol><li>一台可以连接公网的服务器。防火墙和安全策略需放行 8008 端口，否则无法访问或接收数据。单核 512MB 内存的服务器即可满足大多数使用场景。</li><li>一个已设置好 A 记录，指向 Dashboard 服务器 IP 的域名。</li></ol><blockquote><p>如果你想使用 CDN，请准备两个域名：</p><ul><li>一个配置好 CDN，用作公开访问，CDN 需支持 WebSocket 协议；</li><li>另一个域名不使用 CDN，用作 Agent 与 Dashboard 的通信。</li></ul><p>本文档以 “dashboard.example.com” 和 “data.example.com” 为例。</p></blockquote><h2 id="在服务器中安装-Dashboard"><a href="#在服务器中安装-Dashboard" class="headerlink" title="在服务器中安装 Dashboard"></a>在服务器中安装 Dashboard</h2><p>在面板服务器中，运行以下安装脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -L https://raw.githubusercontent.com/nezhahq/scripts/refs/heads/main/install.sh -o nezha.sh &amp;&amp; <span class="hljs-built_in">chmod</span> +x nezha.sh &amp;&amp; <span class="hljs-built_in">sudo</span> ./nezha.sh<br></code></pre></td></tr></table></figure><p>如果你的服务器位于中国大陆，可以使用镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -L https://gitee.com/naibahq/scripts/raw/main/install.sh -o nezha.sh &amp;&amp; <span class="hljs-built_in">chmod</span> +x nezha.sh &amp;&amp; <span class="hljs-built_in">sudo</span> CN=<span class="hljs-literal">true</span> ./nezha.sh<br></code></pre></td></tr></table></figure><p>以 Docker 安装为例，安装完成后按提示输入以下信息：</p><ul><li><code>请输入站点标题:</code> - 自定义站点标题。</li><li><code>请输入暴露端口:</code> - 公开访问端口（默认 8008，可自定义，如果是云服务器记得在安全组开启8008端口）。</li><li><code>请指定后台语言:</code> - 选择语言偏好。</li></ul><p>输入完成后，等待拉取 Docker 镜像。安装结束后，如果一切正常，你可以通过域名和端口号访问 Dashboard，例如：<br><code>http://dashboard.example.com:8008</code></p><p>如果需要再次运行安装脚本，可输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./nezha.sh<br></code></pre></td></tr></table></figure><p>打开管理脚本。</p><h2 id="登录到-Dashboard-配置界面"><a href="#登录到-Dashboard-配置界面" class="headerlink" title="登录到 Dashboard 配置界面"></a>登录到 Dashboard 配置界面</h2><p>后台管理界面的路径为 <code>/dashboard</code>，你只需访问：<br><code>http://dashboard.example.com:8008/dashboard</code></p><p>首次登录的默认用户名和密码均为 <code>admin</code>。</p><blockquote><p><strong>WARNING</strong></p><p>默认密码为弱密码，对于高权限的面板来说，使用弱密码非常危险！<br>建议安装后立即进入管理页面：点击头像 → “个人信息” → “更新个人资料”修改密码。<br>建议密码长度至少 18 位，并混合大小写字母、数字及符号。</p></blockquote><h2 id="配置反向代理"><a href="#配置反向代理" class="headerlink" title="配置反向代理"></a>配置反向代理</h2><p><strong>本教程以1panel配置反向代理 Dashboard 的过程作为示范。</strong></p><blockquote><p>WARNING</p><p>本项目并不依赖1panel面板。你可以使用任何服务器面板，或手动安装 Nginx 或 Caddy 来配置 SSL 和反向代理。</p><p>如果你认为无需通过 80 或 443 端口访问 Dashboard，可以直接使用安装脚本部署并运行哪吒监控，无需安装 Nginx 或其他 Web 服务器。</p></blockquote><p>以1panel面板为例，在1panel面板中<strong>新建网站</strong>，选择<strong>反向代理</strong>，<strong>主域名</strong>填写公开访问域名，如 <code>http://dashboard.example.com</code>，然后填写“<strong>代理地址</strong>”。</p><p>在“代理地址”中填入：<br><code>http://127.0.0.1:8008</code><br>点击“确定”。</p><p>现在，你可以直接通过域名访问面板，例如：<br><code>http://dashboard.example.com</code></p><h2 id="更新-Dashboard"><a href="#更新-Dashboard" class="headerlink" title="更新 Dashboard"></a>更新 Dashboard</h2><p>运行脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./nezha.sh<br></code></pre></td></tr></table></figure><p>选择重启面板并更新。</p><h1 id="安装-Agent"><a href="#安装-Agent" class="headerlink" title="安装 Agent"></a>安装 Agent</h1><blockquote><p><strong>哪吒监控的被控端服务被称为 Agent</strong></p><p>Agent 二进制文件仓库地址为：<a href="https://github.com/nezhahq/agent/releases">https://github.com/nezhahq/agent/releases</a></p></blockquote><h2 id="一键安装-Agent"><a href="#一键安装-Agent" class="headerlink" title="一键安装 Agent"></a>一键安装 Agent</h2><p>哪吒监控支持在 Windows、macOS 和 Linux 上一键安装 Agent。遵循本文档的步骤，你可以轻松地在服务器上部署它。</p><p><img src="https://cdn.jsdmirror.com/gh/muzihuaner/huancdn//img/image-20241201152638638.png" alt="image-20241201152638638"></p><h3 id="准备工作-1"><a href="#准备工作-1" class="headerlink" title="准备工作"></a>准备工作</h3><p>在安装前，需要提前在管理面板中设置通信域名，该域名不可以接入 CDN。本文档以示例通信域名 “data.example.com” 为例。</p><ol><li>在后台管理面板点击头像，进入“系统设置”页。</li><li>在“仪表板服务器域名&#x2F;IP（无 CDN）”项中填入通信域名。</li><li>点击“确认”保存设置。</li></ol><h3 id="一键安装步骤"><a href="#一键安装步骤" class="headerlink" title="一键安装步骤"></a>一键安装步骤</h3><ol><li>在 <code>服务器</code> 页面中，点击 <code>安装命令</code> 并选择对应操作系统，安装命令将自动复制到你的剪贴板。</li><li>在被控端服务器中运行安装命令，等待安装完成后返回到 <code>服务器</code> 页面查看是否上线。</li><li>如果安装成功，页面中将自动弹出新的服务器，你可以点击编辑按钮为其设置名称。</li></ol><h3 id="平台特有问题说明"><a href="#平台特有问题说明" class="headerlink" title="平台特有问题说明"></a>平台特有问题说明</h3><h4 id="1-不小心多执行了几次，多了好多一样的Agent怎么办？"><a href="#1-不小心多执行了几次，多了好多一样的Agent怎么办？" class="headerlink" title="1.不小心多执行了几次，多了好多一样的Agent怎么办？"></a>1.不小心多执行了几次，多了好多一样的Agent怎么办？</h4><p>如果有多个 <code>nezha-agent</code> 服务实例，你可以运行以下命令来查看所有相关服务并停止它们：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl list-units --<span class="hljs-built_in">type</span>=service | grep nezha-agent<br></code></pre></td></tr></table></figure><p>然后，针对每个服务运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl stop &lt;service-name&gt;<br></code></pre></td></tr></table></figure><p>最后，删除&#x2F;opt&#x2F;nezha&#x2F;agent&#x2F;nezha-agent&#x2F;xxx-config.yml 文件</p><h4 id="2-Windows-特殊说明"><a href="#2-Windows-特殊说明" class="headerlink" title="2.Windows 特殊说明"></a>2.Windows 特殊说明</h4><ol><li><p>在 Windows 服务器中，运行 PowerShell。</p></li><li><p>在 PowerShell 中粘贴并运行安装命令(复制命令后修改并按下面方法执行)。</p></li></ol> <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">#分别执行</span><br><span class="hljs-variable">$env:NZ_SERVER</span>=<span class="hljs-string">&quot;xxxx:8008&quot;</span> <span class="hljs-comment">#记得加&quot;&quot;</span><br><span class="hljs-variable">$env:NZ_TLS</span>=<span class="hljs-string">&quot;false&quot;</span> <br><span class="hljs-variable">$env:NZ_CLIENT_SECRET</span>=<span class="hljs-string">&quot;xxxx&quot;</span><br><span class="hljs-comment">#然后执行</span><br>  <br>[<span class="hljs-type">Net.ServicePointManager</span>]::SecurityProtocol = [<span class="hljs-type">Net.SecurityProtocolType</span>]::Ssl3 <span class="hljs-operator">-bor</span> [<span class="hljs-type">Net.SecurityProtocolType</span>]::Tls <span class="hljs-operator">-bor</span> [<span class="hljs-type">Net.SecurityProtocolType</span>]::Tls11 <span class="hljs-operator">-bor</span> [<span class="hljs-type">Net.SecurityProtocolType</span>]::Tls12;<span class="hljs-built_in">set-ExecutionPolicy</span> RemoteSigned;<span class="hljs-built_in">Invoke-WebRequest</span> https://raw.githubusercontent.com/nezhahq/scripts/main/agent/install.ps1 <span class="hljs-literal">-OutFile</span> C:install.ps1;powershell.exe C:install.ps1<br></code></pre></td></tr></table></figure><ol start="4"><li>如遇到「执行策略变更」确认提示，输入 <code>Y</code> 并回车。</li></ol><h4 id="3-Agent-有-Docker-镜像吗？"><a href="#3-Agent-有-Docker-镜像吗？" class="headerlink" title="3.Agent 有 Docker 镜像吗？"></a>3.Agent 有 Docker 镜像吗？</h4><p><strong>Agent 目前没有推出 Docker 镜像。</strong><br>Agent 的设计思路和 Dashboard 相反：Dashboard 的目标是尽量减少对宿主机的干扰，而 Agent 则需要深度与宿主机集成以执行监控服务和命令任务。</p><p>虽然将 Agent 放入容器中可以继续执行监控任务，但 WebShell 等功能将无法正常运行，因此官方不提供 Docker 镜像支持。</p><h1 id="设置三网监控"><a href="#设置三网监控" class="headerlink" title="设置三网监控"></a>设置三网监控</h1><p>要新增一个网络波动监控，请按照以下步骤操作：</p><ol><li><strong>进入管理面板</strong><br>转到 <strong><code>服务</code></strong> 页，点击 <strong><code>+</code></strong> 按钮添加新的服务监控。</li><li><strong>配置参数</strong><br>在新增监控时，设置以下参数：<ul><li><strong>名称</strong>：为此服务自定义一个名称。</li><li>目标<ul><li><code>TCP Ping</code>：输入运营商 IP 地址&#x2F;域名并添加端口号，例如：<code>1.1.1.1:80</code> 或 <code>example.com:22</code>。</li></ul></li><li><strong>类型</strong>：选择监控类型（<code>TCP Ping</code>）。</li><li><strong>服务中显示</strong>：选择是否向游客显示此监控（隐私性选项）。</li><li><strong>间隔</strong>：设置监控间隔时间（单位：秒）。</li><li><strong>覆盖范围</strong>：选择一条规则来确定哪些 Agent 请求目标。</li><li><strong>特定服务器</strong>：指定覆盖范围内需要使用的 Agent。</li><li><strong>通知组 ID</strong>：选择已在 <strong><code>通知</code></strong> 页中配置的通知方式，详见 <a href="https://nezha.wiki/guide/notifications.html#%E7%81%B5%E6%B4%BB%E7%9A%84%E9%80%9A%E7%9F%A5%E6%96%B9%E5%BC%8F">通知方式配置</a>。</li><li><strong>启用失败通知</strong>：可选择在目标故障时接收通知（默认为不启用）。</li></ul></li><li><strong>提交监控</strong><br>点击 <strong><code>提交</code></strong> 按钮保存配置，稍等片刻后返回主页查看监控结果。</li></ol><p><strong>效果：</strong></p><p><img src="https://cdn.jsdmirror.com/gh/muzihuaner/huancdn//img/image-20241201150358094.png" alt="image-20241201150358094"></p><h3 id="全国三网IP地址"><a href="#全国三网IP地址" class="headerlink" title="全国三网IP地址"></a>全国三网IP地址</h3><ul><li>河北</li></ul><table><thead><tr><th>联通</th><th>移动</th><th>电信</th></tr></thead><tbody><tr><td>61.182.138.156</td><td>111.62.229.100</td><td>27.185.242.215</td></tr></tbody></table><ul><li>山西</li></ul><table><thead><tr><th>联通</th><th>移动</th><th>电信</th></tr></thead><tbody><tr><td>60.221.18.41</td><td>183.201.244.91</td><td>1.71.157.41</td></tr></tbody></table><ul><li>辽宁</li></ul><table><thead><tr><th>联通</th><th>移动</th><th>电信</th></tr></thead><tbody><tr><td>218.61.211.132</td><td>36.131.156.145</td><td>123.184.58.41</td></tr></tbody></table><ul><li>吉林</li></ul><table><thead><tr><th>联通</th><th>移动</th><th>电信</th></tr></thead><tbody><tr><td>122.143.8.41</td><td>111.27.127.176</td><td>123.172.127.217</td></tr></tbody></table><ul><li>黑龙江</li></ul><table><thead><tr><th>联通</th><th>移动</th><th>电信</th></tr></thead><tbody><tr><td>113.7.211.140</td><td>111.42.190.25</td><td>42.101.84.132</td></tr></tbody></table><ul><li>江苏</li></ul><table><thead><tr><th>联通</th><th>移动</th><th>电信</th></tr></thead><tbody><tr><td>122.96.235.165</td><td>36.156.92.132</td><td>58.215.210.220</td></tr></tbody></table><ul><li>浙江</li></ul><table><thead><tr><th>联通</th><th>移动</th><th>电信</th></tr></thead><tbody><tr><td>101.69.194.224</td><td>117.147.213.41</td><td>115.220.14.91</td></tr></tbody></table><ul><li>安徽</li></ul><table><thead><tr><th>联通</th><th>移动</th><th>电信</th></tr></thead><tbody><tr><td>112.132.208.41</td><td>112.29.198.100</td><td>223.247.108.251</td></tr></tbody></table><ul><li>福建</li></ul><table><thead><tr><th>联通</th><th>移动</th><th>电信</th></tr></thead><tbody><tr><td>36.248.48.139</td><td>112.50.96.88</td><td>106.126.10.28</td></tr></tbody></table><ul><li>江西</li></ul><table><thead><tr><th>联通</th><th>移动</th><th>电信</th></tr></thead><tbody><tr><td>116.153.69.224</td><td>117.168.150.249</td><td>106.227.22.132</td></tr></tbody></table><ul><li>山东</li></ul><table><thead><tr><th>联通</th><th>移动</th><th>电信</th></tr></thead><tbody><tr><td>112.240.56.143</td><td>120.220.145.91</td><td>144.123.160.140</td></tr></tbody></table><ul><li>河南</li></ul><table><thead><tr><th>联通</th><th>移动</th><th>电信</th></tr></thead><tbody><tr><td>123.6.65.101</td><td>111.7.99.220</td><td>171.15.110.220</td></tr></tbody></table><ul><li>湖北</li></ul><table><thead><tr><th>联通</th><th>移动</th><th>电信</th></tr></thead><tbody><tr><td>122.189.226.138</td><td>111.47.131.101</td><td>111.170.8.60</td></tr></tbody></table><ul><li>湖南</li></ul><table><thead><tr><th>联通</th><th>移动</th><th>电信</th></tr></thead><tbody><tr><td>116.162.28.220</td><td>120.226.192.91</td><td>113.240.117.108</td></tr></tbody></table><ul><li>广东</li></ul><table><thead><tr><th>联通</th><th>移动</th><th>电信</th></tr></thead><tbody><tr><td>112.90.211.100</td><td>183.240.65.191</td><td>183.36.23.111</td></tr></tbody></table><ul><li>海南</li></ul><table><thead><tr><th>联通</th><th>移动</th><th>电信</th></tr></thead><tbody><tr><td>153.0.226.35</td><td>111.29.29.219</td><td>124.225.43.220</td></tr></tbody></table><ul><li>四川</li></ul><table><thead><tr><th>联通</th><th>移动</th><th>电信</th></tr></thead><tbody><tr><td>101.206.163.49</td><td>183.220.151.41</td><td>118.123.218.220</td></tr></tbody></table><ul><li>贵州</li></ul><table><thead><tr><th>联通</th><th>移动</th><th>电信</th></tr></thead><tbody><tr><td>117.187.254.132</td><td>61.243.18.220</td><td>58.42.61.132</td></tr></tbody></table><ul><li>云南</li></ul><table><thead><tr><th>联通</th><th>移动</th><th>电信</th></tr></thead><tbody><tr><td>14.204.150.41</td><td>36.147.44.219</td><td>222.221.102.220</td></tr></tbody></table><ul><li>陕西</li></ul><table><thead><tr><th>联通</th><th>移动</th><th>电信</th></tr></thead><tbody><tr><td>123.139.127.132</td><td>111.19.148.100</td><td>124.115.14.100</td></tr></tbody></table><ul><li>甘肃</li></ul><table><thead><tr><th>联通</th><th>移动</th><th>电信</th></tr></thead><tbody><tr><td>59.81.94.53</td><td>117.157.16.41</td><td>118.182.228.91</td></tr></tbody></table><ul><li>青海</li></ul><table><thead><tr><th>联通</th><th>移动</th><th>电信</th></tr></thead><tbody><tr><td>116.177.237.137</td><td>111.12.152.170</td><td>223.221.216.219</td></tr></tbody></table><ul><li>内蒙古</li></ul><table><thead><tr><th>联通</th><th>移动</th><th>电信</th></tr></thead><tbody><tr><td>116.114.98.41</td><td>117.161.76.41</td><td>110.76.186.70</td></tr></tbody></table><ul><li>广西</li></ul><table><thead><tr><th>联通</th><th>移动</th><th>电信</th></tr></thead><tbody><tr><td>171.39.5.51</td><td>36.136.112.41</td><td>222.217.93.55</td></tr></tbody></table><ul><li>西藏</li></ul><table><thead><tr><th>联通</th><th>移动</th><th>电信</th></tr></thead><tbody><tr><td>43.242.165.35</td><td>117.180.234.41</td><td>113.62.176.89</td></tr></tbody></table><ul><li>宁夏</li></ul><table><thead><tr><th>联通</th><th>移动</th><th>电信</th></tr></thead><tbody><tr><td>116.129.226.28</td><td>111.51.155.214</td><td>222.75.44.220</td></tr></tbody></table><ul><li>新疆</li></ul><table><thead><tr><th>联通</th><th>移动</th><th>电信</th></tr></thead><tbody><tr><td>116.178.77.40</td><td>36.189.208.164</td><td>110.157.243.45</td></tr></tbody></table><ul><li>北京</li></ul><table><thead><tr><th>联通</th><th>移动</th><th>电信</th></tr></thead><tbody><tr><td>202.108.29.159</td><td>222.35.73.1</td><td>220.181.173.35</td></tr></tbody></table><ul><li>天津</li></ul><table><thead><tr><th>联通</th><th>移动</th><th>电信</th></tr></thead><tbody><tr><td>116.78.119.56</td><td>111.31.236.35</td><td>42.81.98.35</td></tr></tbody></table><ul><li>上海</li></ul><table><thead><tr><th>联通</th><th>移动</th><th>电信</th></tr></thead><tbody><tr><td>59.81.65.42</td><td>183.194.219.220</td><td>101.227.191.14</td></tr></tbody></table><ul><li>重庆</li></ul><table><thead><tr><th>联通</th><th>移动</th><th>电信</th></tr></thead><tbody><tr><td>113.207.69.190</td><td>221.178.81.101</td><td>119.84.131.101</td></tr></tbody></table><h1 id="通知设置"><a href="#通知设置" class="headerlink" title="通知设置"></a>通知设置</h1><blockquote><p>哪吒监控支持对服务器的负载、CPU、内存、硬盘、流量、月流量、进程数和连接数进行监控，并在达到用户设定的阈值时发送通知。</p></blockquote><h4 id="1-先设置一个通知方式"><a href="#1-先设置一个通知方式" class="headerlink" title="1.先设置一个通知方式"></a>1.先设置一个通知方式</h4><p>我这里是用飞书</p><p><strong>获取 URL 参数</strong></p><ol><li><strong>创建机器人</strong>：在飞书群设置中添加自定义机器人（Webhook）。</li><li><strong>获取 Webhook URL</strong>：创建完成后获得。</li></ol><p><strong>通知配置：</strong></p><ul><li><strong>名称</strong>：哪吒面板 Bot</li><li><strong>URL</strong>：<code>https://open.feishu.cn/open-apis/bot/v2/hook/xxxxxxxxxxxxxxxxx</code></li><li><strong>请求方式</strong>：<code>POST</code></li><li><strong>请求类型</strong>：<code>JSON</code></li><li><strong>Body</strong>：</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;msg_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;content&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;【哪吒通知消息】\n🕐 时间：\n#DATETIME#\n📋 事件：\n#NEZHA#&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>更多通知方式：</p><p><a href="https://nezha.wiki/guide/notifications.html">https://nezha.wiki/guide/notifications.html</a></p><blockquote><p>如果对通知配置有疑问，可以使用以下第三方配置生成器简化操作（哪吒监控不对第三方生成器的功能性作任何保证）：</p><ul><li><a href="https://nz.sina.us.kg/">Nezha Rule Generator</a>：适用于大多数场景。</li><li><a href="https://wiziscool.github.io/Nezha-Traffic-Alarm-Generator/">Nezha-Traffic-Alarm-Generator</a>：专注于周期流量通知规则生成。</li></ul></blockquote><h4 id="2-设置告警"><a href="#2-设置告警" class="headerlink" title="2.设置告警"></a>2.设置告警</h4><p><a href="https://nezha.wiki/guide/notifications.html#%E8%AD%A6%E6%8A%A5%E8%A7%84%E5%88%99%E8%AF%B4%E6%98%8E">https://nezha.wiki/guide/notifications.html#%E8%AD%A6%E6%8A%A5%E8%A7%84%E5%88%99%E8%AF%B4%E6%98%8E</a></p><hr><h4 id="3-设置通知分组"><a href="#3-设置通知分组" class="headerlink" title="3.设置通知分组"></a>3.设置通知分组</h4><blockquote><p>通知分组允许用户将多个通知方式组合成一个通知组，通知组可用作任务或告警的通知目标，实现一键发送多种方式的通知。</p></blockquote><p>配置步骤</p><p>1.点击“<strong>分组</strong>”-“<strong>通知分组</strong>”</p><p>2.选择你要已经设置好的通知方式。</p><h4 id="4-应用通知组"><a href="#4-应用通知组" class="headerlink" title="4.应用通知组"></a>4.应用通知组</h4><p>在任务或告警规则中选择通知组作为通知目标，触发时会同时通过分组内的所有通知方式发送通知。</p><h1 id="END"><a href="#END" class="headerlink" title="END"></a>END</h1><p>好了，这样基本就安装好了。其他内容可以看<a href="https://nezha.wiki/">官方文档</a></p><p>DEMO：<a href="https://serverstatus.quickso.cn/">https://serverstatus.quickso.cn/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;h1 id=&quot;哪吒监控&quot;&gt;&lt;a href=&quot;#哪吒监控&quot; class=&quot;headerlink&quot; title=&quot;哪吒监控&quot;&gt;&lt;/a&gt;哪吒监控&lt;/h1&gt;&lt;p&gt;开源、轻量、易用的服务器监控与运维工具&lt;/p&gt;
&lt;p&gt;官方网站：&lt;a href=&quot;https://</summary>
      
    
    
    
    <category term="教程" scheme="https://blog.quickso.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="VPS" scheme="https://blog.quickso.cn/tags/VPS/"/>
    
    <category term="哪吒面板" scheme="https://blog.quickso.cn/tags/%E5%93%AA%E5%90%92%E9%9D%A2%E6%9D%BF/"/>
    
    <category term="探针" scheme="https://blog.quickso.cn/tags/%E6%8E%A2%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>小米平板6crDroid类原生安卓14系统刷机</title>
    <link href="https://blog.quickso.cn/2024/10/05/%E5%B0%8F%E7%B1%B3%E5%B9%B3%E6%9D%BF6crDroid%E7%B1%BB%E5%8E%9F%E7%94%9F%E5%AE%89%E5%8D%9314%E7%B3%BB%E7%BB%9F%E5%88%B7%E6%9C%BA/"/>
    <id>https://blog.quickso.cn/2024/10/05/%E5%B0%8F%E7%B1%B3%E5%B9%B3%E6%9D%BF6crDroid%E7%B1%BB%E5%8E%9F%E7%94%9F%E5%AE%89%E5%8D%9314%E7%B3%BB%E7%BB%9F%E5%88%B7%E6%9C%BA/</id>
    <published>2024-10-04T23:33:07.000Z</published>
    <updated>2025-05-26T15:06:48.610Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p><strong>刷机有风险，小白需谨慎！！！解锁会丢失所有数据，请做好数据备份！！！</strong></p><p>所谓「类原生」，是指基于 <strong>AOSP</strong>（Android Open Source Project，Android 开放源代码工程）开发的第三方固件，其界面与操作方式与谷歌官方的 Android 一致。</p><p>AOSP</p><p>?优点：「轻快」</p><p>大多界面简洁，有原生动画，</p><p>没有厂商预装系统软件和三方软件（差不多只有电话、短信、时钟、文件、设置、甚至没有浏览器），</p><p>没有太多花里胡哨的功能，系统后台占用率较少。</p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/202410050812237.png"></p><p>对于安卓来说，刷机流程都大致一样</p><p>1.解锁 Bootloader<br>2.刷入 Recovery<br>3.刷入 ROM&#x2F;Gapps&#x2F;Magisk<br>4.开始愉快地玩耍</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="1-解锁BL（Bootloader）"><a href="#1-解锁BL（Bootloader）" class="headerlink" title="1.解锁BL（Bootloader）"></a>1.解锁BL（Bootloader）</h3><p>小米的系统现在解锁越来越难了，<a href="https://s.xiaomi.cn/c/3hfTCor6"><strong>小米澎湃 OS · Bootloader 解锁权限变更公告</strong></a>，需要实名认证+通过社区答题测试+社区 5 级账号。</p><blockquote><p>大家好！ Bootloader 锁处于上锁状态时，有助于保护设备安全、避免数据泄露，也给用户提供更加安全、稳定的使用体验。自即日起，升级到小米澎湃 OS 后的 Bootloader 解锁权限将仅针对开发者和手机发烧友开放，感谢大家的支持和理解。</p></blockquote><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/202410050811297.png"></p><p>不过好在有大佬搞了一个绕开的工具，只需要168小时就可以解锁了</p><p>工具下载地址：  <a href="https://www.123865.com/s/FrsrVv-wB47A?%E6%8F%90%E5%8F%96%E7%A0%81:8ecC">https://www.123865.com/s/FrsrVv-wB47A?提取码:8ecC</a></p><p><strong>提示：解锁BL会清除所有数据，请及时备份</strong></p><p>具体方法：</p><p>1.usb调式界面的操作</p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/202410050820031.png" alt="image-20241005082032966"></p><p>2.安装旧版设置（上面链接有）<br>3.下载工具php8.39，电脑解压双击php目录下”bypass.cmd”脚本运行<br>4.出现这样就是成功了</p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/202410050821639.png" alt="image-20241005082121481"></p><p>5.小米解锁工具解锁，依旧要等168小时。</p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/202410050821133.png" alt="image-20241005082144070"></p><p>6.好了，现在可以关闭本文了，7天后再来。</p><h3 id="2-开始刷机"><a href="#2-开始刷机" class="headerlink" title="2.开始刷机"></a>2.开始刷机</h3><p><strong>注意：确保使用基于 Android 13 固件的 MIUI 14，请勿尝试使用 HyperOS 固件运行此 ROM</strong></p><p>参考：<a href="https://github.com/DragonEmperor9480/pipa_notes">https://github.com/DragonEmperor9480/pipa_notes</a></p><p>如果使用的是 HyperOS，请按照以下步骤操作</p><blockquote><p>按照下面步骤 1 到 7 进行操作，然后使用命令 adb sideload fw_package_name.zip（将 fw_package_name.zip 替换为您下载的固件名称.zip）刷入区域固件<br>，刷入后，重新启动一次recovery并继续按照上述剩余步骤操作</p></blockquote><p>如果已经在使用 MIUI固件&#x2F;第三方ROM，则可以跳过此步骤并按照以下步骤操作。</p><p>刷机资料文件： </p><p><a href="https://www.123865.com/s/FrsrVv-gB47A?%E6%8F%90%E5%8F%96%E7%A0%81:GgYS">https://www.123865.com/s/FrsrVv-gB47A?提取码:GgYS</a></p><ol><li>下载 rom 包以及 boot、dtbo 和 vendor_boot 等（链接里的所有文件）</li><li>将下载的文件放在一个文件夹中</li><li>重新启动到fastboot（按住电源 + 音量减）</li></ol><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/202410050840173.png" alt="image-20241005083959513"></p><p>4.在电脑上，打开文件所在的文件夹，打开cmd 并依次运行以下命令（文件需要具体的路径）：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">fastboot flash <span class="hljs-keyword">boot</span> <span class="hljs-keyword">boot</span>.img<br></code></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">fastboot</span> flash dtbo dtbo.img<br></code></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">fastboot</span> flash vendor_boot vendor_boot.img<br></code></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">fastboot reboot recovery</span><br></code></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/202410050842939.png" alt="image-20241005084228825"></p><p>5.通过recovery格式化数据（如果刷入的是同一个系列的rom，这步可以省略）</p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/202410050844812.png" alt="image-20241005084442712"></p><p>6.重启一次 recovery(advanced -&gt; reboot to recovery)</p><p>7.然后选择apply update  选择 adb sideload</p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/202410050847367.png" alt="image-20241005084705249"></p><p>8.还是在刚才的目录里打开cmd 刷入ROM包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">adb sideload rom.<span class="hljs-built_in">zip</span>（将 rom.<span class="hljs-built_in">zip</span> 替换为下载的 rom 包名.<span class="hljs-built_in">zip</span>，最好是具体路径）<br></code></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/202410050850696.png" alt="image-20241005085041587"></p><p>9.有可能会卡到47%，弹出重启recovery 这时其实已经刷完机了，点击重启到recovery。</p><p>10.接下来就可以刷入Gapps（谷歌套件，上面链接里有）等第三方包了，刷入方法和上面一样，选择apply update  选择 adb sideload，CMD运行</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">adb</span> sideload gapps.zip<br></code></pre></td></tr></table></figure><p>11.刷完就点击 reboot system，重启系统，开始玩了～</p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/202410050856508.png" alt="image-20241005085650406"></p><h3 id="3-Magisk-安装"><a href="#3-Magisk-安装" class="headerlink" title="3.Magisk 安装"></a>3.Magisk 安装</h3><p>1.下载 Magisk apk 并安装</p><p><a href="https://github.com/topjohnwu/Magisk/releases">https://github.com/topjohnwu/Magisk/releases</a> </p><p>2.打开Magisk，①：安装 – ②：选择 boot.img – ③：开始修补文件 – ④：修补完成（修补生成 magisk_patched-xxx.img 文件在 Download 目录）</p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/202410050903510.jpg" alt="Magisk安装教程插图"></p><p>3.将修补完的文件传入刚才的ROM文件夹，进入 Bootloader 模式</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">adb reboot bootloader</span><br></code></pre></td></tr></table></figure><p>4.运行</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">fastboot flash <span class="hljs-keyword">boot </span>刚才修补的文件路径<br></code></pre></td></tr></table></figure><p>5.显示下面这三行代码，就是成功刷入了。再使用指令 <code>fastboot reboot</code> 重启。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Sending</span> &#x27;boot&#x27; (<span class="hljs-number">131072</span> KB)      OKAY<span class="hljs-meta"> [ 3.105s]</span><br><span class="hljs-attribute">Writing</span> &#x27;boot&#x27;                  OKAY<span class="hljs-meta"> [ 0.404s]</span><br><span class="hljs-attribute">Finished</span>. Total time: <span class="hljs-number">3</span>.<span class="hljs-number">556</span>s<br></code></pre></td></tr></table></figure><p>6.显示Magisk的版本，就是刷好了的</p><p><img src="https://gcore.jsdelivr.net/gh/muzihuaner/huancdn@main/img/202410050903329.jpg" alt="Magisk安装教程插图4"></p><p>温馨提示:</p><p>如果刷入 <strong>magisk.img</strong> 不能开机，可以把前面提取的 <strong>boot.img</strong> 通过 <strong>fastboot</strong> 刷回去，恢复原 boot，一般都能正常开机！<br><strong>boot.img</strong> 保留一份在电脑，避免出问题了可以自救下！还原 boot 指令</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">fastboot flash <span class="hljs-keyword">boot</span> <span class="hljs-keyword">boot</span>.img<br></code></pre></td></tr></table></figure><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>好久没有刷机了，刷机方式也变了好多。通过这次刷机，又熟悉了一遍。</p><p>参考资料：</p><p><a href="https://xdaforums.com/f/xiaomi-pad-6.12759/">https://xdaforums.com/f/xiaomi-pad-6.12759/</a></p><p><a href="https://xdaforums.com/t/beta-crdroid-10-x-a14-pipa.4641070/">https://xdaforums.com/t/beta-crdroid-10-x-a14-pipa.4641070/</a></p><p><a href="https://xdaforums.com/t/rom-14-pipa-lmodroid-unofficial-aosp.4652823/">https://xdaforums.com/t/rom-14-pipa-lmodroid-unofficial-aosp.4652823/</a></p><p><a href="https://crdroid.net/pipa/10">https://crdroid.net/pipa/10</a></p><p><a href="https://magiskcn.com/">https://magiskcn.com/</a></p><p><a href="https://www.byboke.com/2569.html">https://www.byboke.com/2569.html</a></p><p><a href="https://github.com/DragonEmperor9480/pipa_notes?tab=readme-ov-file#installation-guide">https://github.com/DragonEmperor9480/pipa_notes?tab=readme-ov-file#installation-guide</a></p><p><a href="https://www.coolapk.com/feed/57324806?shareKey=MmVmOGZiYjliMzYwNjcwMDdmMjI~&shareUid=524513&shareFrom=com.coolapk.market_14.5.0">https://www.coolapk.com/feed/57324806?shareKey=MmVmOGZiYjliMzYwNjcwMDdmMjI~&amp;shareUid=524513&amp;shareFrom=com.coolapk.market_14.5.0</a></p><p><a href="https://www.youtube.com/watch?v=ytW2R3Laujg&t=254s">https://www.youtube.com/watch?v=ytW2R3Laujg&amp;t=254s</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;刷机有风险，小白需谨慎！！！解锁会丢失所有数据，请做好数据备份！！！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所谓「</summary>
      
    
    
    
    <category term="教程" scheme="https://blog.quickso.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="ADB" scheme="https://blog.quickso.cn/tags/ADB/"/>
    
    <category term="安卓" scheme="https://blog.quickso.cn/tags/%E5%AE%89%E5%8D%93/"/>
    
    <category term="刷机" scheme="https://blog.quickso.cn/tags/%E5%88%B7%E6%9C%BA/"/>
    
    <category term="小米平板6" scheme="https://blog.quickso.cn/tags/%E5%B0%8F%E7%B1%B3%E5%B9%B3%E6%9D%BF6/"/>
    
  </entry>
  
</feed>
